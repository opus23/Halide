	.text
	.file	"posix_allocator.cpp"
	.section	.text.halide_default_malloc,"ax",@progbits
	.weak	halide_default_malloc           # -- Begin function halide_default_malloc
	.p2align	4, 0x90
	.type	halide_default_malloc,@function
halide_default_malloc:                  # @halide_default_malloc
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	leaq	64(%rsi), %rdi
	callq	malloc@PLT
	testq	%rax, %rax
	je	.LBB0_1
# %bb.2:                                # %if.end
	movq	%rax, %rcx
	addq	$71, %rax
	andq	$-64, %rax
	movq	%rcx, -8(%rax)
	popq	%rbp
	retq
.LBB0_1:
	xorl	%eax, %eax
	popq	%rbp
	retq
.Lfunc_end0:
	.size	halide_default_malloc, .Lfunc_end0-halide_default_malloc
                                        # -- End function
	.section	.text.halide_default_free,"ax",@progbits
	.weak	halide_default_free             # -- Begin function halide_default_free
	.p2align	4, 0x90
	.type	halide_default_free,@function
halide_default_free:                    # @halide_default_free
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	-8(%rsi), %rdi
	popq	%rbp
	jmp	free@PLT                        # TAILCALL
.Lfunc_end1:
	.size	halide_default_free, .Lfunc_end1-halide_default_free
                                        # -- End function
	.section	.text.halide_set_custom_malloc,"ax",@progbits
	.weak	halide_set_custom_malloc        # -- Begin function halide_set_custom_malloc
	.p2align	4, 0x90
	.type	halide_set_custom_malloc,@function
halide_set_custom_malloc:               # @halide_set_custom_malloc
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal13custom_mallocE@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rax
	movq	%rdi, (%rcx)
	popq	%rbp
	retq
.Lfunc_end2:
	.size	halide_set_custom_malloc, .Lfunc_end2-halide_set_custom_malloc
                                        # -- End function
	.section	.text.halide_set_custom_free,"ax",@progbits
	.weak	halide_set_custom_free          # -- Begin function halide_set_custom_free
	.p2align	4, 0x90
	.type	halide_set_custom_free,@function
halide_set_custom_free:                 # @halide_set_custom_free
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal11custom_freeE@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rax
	movq	%rdi, (%rcx)
	popq	%rbp
	retq
.Lfunc_end3:
	.size	halide_set_custom_free, .Lfunc_end3-halide_set_custom_free
                                        # -- End function
	.section	.text.halide_malloc,"ax",@progbits
	.weak	halide_malloc                   # -- Begin function halide_malloc
	.p2align	4, 0x90
	.type	halide_malloc,@function
halide_malloc:                          # @halide_malloc
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal13custom_mallocE@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	popq	%rbp
	jmpq	*%rax                           # TAILCALL
.Lfunc_end4:
	.size	halide_malloc, .Lfunc_end4-halide_malloc
                                        # -- End function
	.section	.text.halide_free,"ax",@progbits
	.weak	halide_free                     # -- Begin function halide_free
	.p2align	4, 0x90
	.type	halide_free,@function
halide_free:                            # @halide_free
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal11custom_freeE@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	popq	%rbp
	jmpq	*%rax                           # TAILCALL
.Lfunc_end5:
	.size	halide_free, .Lfunc_end5-halide_free
                                        # -- End function
	.section	.text.halide_default_error,"ax",@progbits
	.weak	halide_default_error            # -- Begin function halide_default_error
	.p2align	4, 0x90
	.type	halide_default_error,@function
halide_default_error:                   # @halide_default_error
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$4104, %rsp                     # imm = 0x1008
	movq	%rsi, %rbx
	movq	%rdi, %r15
	leaq	-26(%rbp), %rsi
	leaq	.L.str(%rip), %rdx
	leaq	-4120(%rbp), %r14
	movq	%r14, %rdi
	callq	halide_string_to_string@PLT
	leaq	4094(%rax), %rsi
	movq	%rax, %rdi
	movq	%rbx, %rdx
	callq	halide_string_to_string@PLT
	cmpb	$10, -1(%rax)
	je	.LBB6_2
# %bb.1:                                # %if.then
	movw	$10, (%rax)
	incq	%rax
.LBB6_2:                                # %if.end
	subq	%r14, %rax
	incq	%rax
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r15, %rdi
	movq	%r14, %rsi
	callq	halide_print@PLT
	callq	abort@PLT
	addq	$4104, %rsp                     # imm = 0x1008
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end6:
	.size	halide_default_error, .Lfunc_end6-halide_default_error
                                        # -- End function
	.section	.text.halide_error,"ax",@progbits
	.weak	halide_error                    # -- Begin function halide_error
	.p2align	4, 0x90
	.type	halide_error,@function
halide_error:                           # @halide_error
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal13error_handlerE@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	popq	%rbp
	jmpq	*%rax                           # TAILCALL
.Lfunc_end7:
	.size	halide_error, .Lfunc_end7-halide_error
                                        # -- End function
	.section	.text.halide_set_error_handler,"ax",@progbits
	.weak	halide_set_error_handler        # -- Begin function halide_set_error_handler
	.p2align	4, 0x90
	.type	halide_set_error_handler,@function
halide_set_error_handler:               # @halide_set_error_handler
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal13error_handlerE@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rax
	movq	%rdi, (%rcx)
	popq	%rbp
	retq
.Lfunc_end8:
	.size	halide_set_error_handler, .Lfunc_end8-halide_set_error_handler
                                        # -- End function
	.section	.text.halide_print,"ax",@progbits
	.weak	halide_print                    # -- Begin function halide_print
	.p2align	4, 0x90
	.type	halide_print,@function
halide_print:                           # @halide_print
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal12custom_printE@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	popq	%rbp
	jmpq	*%rax                           # TAILCALL
.Lfunc_end9:
	.size	halide_print, .Lfunc_end9-halide_print
                                        # -- End function
	.section	.text.halide_set_custom_print,"ax",@progbits
	.weak	halide_set_custom_print         # -- Begin function halide_set_custom_print
	.p2align	4, 0x90
	.type	halide_set_custom_print,@function
halide_set_custom_print:                # @halide_set_custom_print
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal12custom_printE@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rax
	movq	%rdi, (%rcx)
	popq	%rbp
	retq
.Lfunc_end10:
	.size	halide_set_custom_print, .Lfunc_end10-halide_set_custom_print
                                        # -- End function
	.section	.text.halide_start_clock,"ax",@progbits
	.weak	halide_start_clock              # -- Begin function halide_start_clock
	.p2align	4, 0x90
	.type	halide_start_clock,@function
halide_start_clock:                     # @halide_start_clock
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%rax
	movq	halide_reference_clock_inited@GOTPCREL(%rip), %rbx
	cmpb	$0, (%rbx)
	jne	.LBB11_2
# %bb.1:                                # %if.then
	movq	halide_reference_clock@GOTPCREL(%rip), %rdx
	movl	$228, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	callq	syscall@PLT
	movb	$1, (%rbx)
.LBB11_2:                               # %if.end
	xorl	%eax, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end11:
	.size	halide_start_clock, .Lfunc_end11-halide_start_clock
                                        # -- End function
	.section	.text.halide_current_time_ns,"ax",@progbits
	.weak	halide_current_time_ns          # -- Begin function halide_current_time_ns
	.p2align	4, 0x90
	.type	halide_current_time_ns,@function
halide_current_time_ns:                 # @halide_current_time_ns
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	leaq	-16(%rbp), %rdx
	movl	$228, %edi
	xorl	%esi, %esi
	xorl	%eax, %eax
	callq	syscall@PLT
	vmovdqa	-16(%rbp), %xmm0
	movq	halide_reference_clock@GOTPCREL(%rip), %rax
	vpsubq	(%rax), %xmm0, %xmm0
	vmovq	%xmm0, %rax
	imulq	$1000000000, %rax, %rcx         # imm = 0x3B9ACA00
	vpextrq	$1, %xmm0, %rax
	addq	%rcx, %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end12:
	.size	halide_current_time_ns, .Lfunc_end12-halide_current_time_ns
                                        # -- End function
	.section	.text.halide_sleep_ms,"ax",@progbits
	.weak	halide_sleep_ms                 # -- Begin function halide_sleep_ms
	.p2align	4, 0x90
	.type	halide_sleep_ms,@function
halide_sleep_ms:                        # @halide_sleep_ms
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	imull	$1000, %esi, %edi               # imm = 0x3E8
	popq	%rbp
	jmp	usleep@PLT                      # TAILCALL
.Lfunc_end13:
	.size	halide_sleep_ms, .Lfunc_end13-halide_sleep_ms
                                        # -- End function
	.section	.text.halide_default_print,"ax",@progbits
	.weak	halide_default_print            # -- Begin function halide_default_print
	.p2align	4, 0x90
	.type	halide_default_print,@function
halide_default_print:                   # @halide_default_print
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%rax
	movq	%rsi, %rbx
	movq	%rsi, %rdi
	callq	strlen@PLT
	movl	$1, %edi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	jmp	write@PLT                       # TAILCALL
.Lfunc_end14:
	.size	halide_default_print, .Lfunc_end14-halide_default_print
                                        # -- End function
	.section	.text.halide_host_cpu_count,"ax",@progbits
	.weak	halide_host_cpu_count           # -- Begin function halide_host_cpu_count
	.p2align	4, 0x90
	.type	halide_host_cpu_count,@function
halide_host_cpu_count:                  # @halide_host_cpu_count
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movl	$84, %edi
	popq	%rbp
	jmp	sysconf@PLT                     # TAILCALL
.Lfunc_end15:
	.size	halide_host_cpu_count, .Lfunc_end15-halide_host_cpu_count
                                        # -- End function
	.section	.text.halide_thread_yield,"ax",@progbits
	.weak	halide_thread_yield             # -- Begin function halide_thread_yield
	.p2align	4, 0x90
	.type	halide_thread_yield,@function
halide_thread_yield:                    # @halide_thread_yield
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	popq	%rbp
	jmp	sched_yield@PLT                 # TAILCALL
.Lfunc_end16:
	.size	halide_thread_yield, .Lfunc_end16-halide_thread_yield
                                        # -- End function
	.section	.text.halide_default_do_task,"ax",@progbits
	.weak	halide_default_do_task          # -- Begin function halide_default_do_task
	.p2align	4, 0x90
	.type	halide_default_do_task,@function
halide_default_do_task:                 # @halide_default_do_task
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rsi, %rax
	movl	%edx, %esi
	movq	%rcx, %rdx
	popq	%rbp
	jmpq	*%rax                           # TAILCALL
.Lfunc_end17:
	.size	halide_default_do_task, .Lfunc_end17-halide_default_do_task
                                        # -- End function
	.section	.text.halide_default_do_loop_task,"ax",@progbits
	.weak	halide_default_do_loop_task     # -- Begin function halide_default_do_loop_task
	.p2align	4, 0x90
	.type	halide_default_do_loop_task,@function
halide_default_do_loop_task:            # @halide_default_do_loop_task
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rsi, %rax
	movl	%edx, %esi
	movl	%ecx, %edx
	movq	%r8, %rcx
	movq	%r9, %r8
	popq	%rbp
	jmpq	*%rax                           # TAILCALL
.Lfunc_end18:
	.size	halide_default_do_loop_task, .Lfunc_end18-halide_default_do_loop_task
                                        # -- End function
	.section	.text.halide_default_do_par_for,"ax",@progbits
	.weak	halide_default_do_par_for       # -- Begin function halide_default_do_par_for
	.p2align	4, 0x90
	.type	halide_default_do_par_for,@function
halide_default_do_par_for:              # @halide_default_do_par_for
# %bb.0:                                # %entry
	testl	%ecx, %ecx
	jle	.LBB19_1
# %bb.2:                                # %if.end
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	subq	$128, %rsp
	movq	$0, -144(%rbp)
	movl	%edx, -108(%rbp)
	movl	%ecx, -104(%rbp)
	movb	$0, -96(%rbp)
	movl	$0, -112(%rbp)
	movq	%r8, -136(%rbp)
	movl	$0, -100(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, -128(%rbp)
	movq	%rsi, -88(%rbp)
	movq	%rdi, -40(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -24(%rbp)
	movb	$0, -20(%rbp)
	leaq	-144(%rbp), %rbx
	movq	%rbx, -72(%rbp)
	movl	$0, -64(%rbp)
	movq	$0, -56(%rbp)
	movq	_ZN6Halide7Runtime8Internal10work_queueE@GOTPCREL(%rip), %r14
	movq	%r14, %rdi
	callq	halide_mutex_lock@PLT
	movl	$1, %edi
	movq	%rbx, %rsi
	xorl	%edx, %edx
	callq	_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_@PLT
	movq	%rbx, %rdi
	callq	_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE@PLT
	movq	%r14, %rdi
	callq	halide_mutex_unlock@PLT
	movl	-28(%rbp), %eax
	addq	$128, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.LBB19_1:
	xorl	%eax, %eax
	retq
.Lfunc_end19:
	.size	halide_default_do_par_for, .Lfunc_end19-halide_default_do_par_for
                                        # -- End function
	.section	.text.halide_mutex_lock,"ax",@progbits
	.weak	halide_mutex_lock               # -- Begin function halide_mutex_lock
	.p2align	4, 0x90
	.type	halide_mutex_lock,@function
halide_mutex_lock:                      # @halide_mutex_lock
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$16, %rsp
	movl	$1, %ecx
	xorl	%eax, %eax
	lock		cmpxchgq	%rcx, (%rdi)
	jne	.LBB20_1
.LBB20_4:                               # %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB20_1:                               # %if.then.i
	movq	%rdi, %rbx
	movq	(%rdi), %rax
	movl	$40, %r12d
	movq	_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE@GOTPCREL(%rip), %r15
	addq	$16, %r15
	leaq	-48(%rbp), %r14
	.p2align	4, 0x90
.LBB20_2:                               # %while.cond.outer.i.i
                                        # =>This Inner Loop Header: Depth=1
	testb	$1, %al
	jne	.LBB20_5
# %bb.3:                                # %if.then.i.i
                                        #   in Loop: Header=BB20_2 Depth=1
	movq	%rax, %rcx
	orq	$1, %rcx
	lock		cmpxchgq	%rcx, (%rbx)
	jne	.LBB20_2
	jmp	.LBB20_4
.LBB20_5:                               # %if.end4.i.i
                                        #   in Loop: Header=BB20_2 Depth=1
	testl	%r12d, %r12d
	jg	.LBB20_10
# %bb.6:                                #   in Loop: Header=BB20_2 Depth=1
	movl	%r12d, %ecx
.LBB20_7:                               # %if.end8.i.i
                                        #   in Loop: Header=BB20_2 Depth=1
	testb	$2, %al
	jne	.LBB20_12
# %bb.8:                                # %if.then10.i.i
                                        #   in Loop: Header=BB20_2 Depth=1
	movq	%rax, %rdx
	orq	$2, %rdx
	lock		cmpxchgq	%rdx, (%rbx)
	jne	.LBB20_9
.LBB20_12:                              # %if.end19.i.i
                                        #   in Loop: Header=BB20_2 Depth=1
	movq	%r15, -48(%rbp)
	movq	%rbx, -40(%rbp)
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy@PLT
	cmpq	%rbx, %rax
	je	.LBB20_4
# %bb.13:                               # %if.end24.i.i
                                        #   in Loop: Header=BB20_2 Depth=1
	movq	(%rbx), %rax
	movl	$40, %r12d
	jmp	.LBB20_2
.LBB20_10:                              # %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i
                                        #   in Loop: Header=BB20_2 Depth=1
	xorl	%ecx, %ecx
	cmpl	$1, %r12d
	je	.LBB20_7
# %bb.11:                               # %if.then6.i.i
                                        #   in Loop: Header=BB20_2 Depth=1
	decl	%r12d
	callq	halide_thread_yield@PLT
	movq	(%rbx), %rax
	jmp	.LBB20_2
.LBB20_9:                               # %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i
                                        #   in Loop: Header=BB20_2 Depth=1
	movl	%ecx, %r12d
	jmp	.LBB20_2
.Lfunc_end20:
	.size	halide_mutex_lock, .Lfunc_end20-halide_mutex_lock
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_ # -- Begin function _ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_,@function
_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_: # @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	movq	%rsi, %rbx
	movl	%edi, %r14d
	movq	_ZN6Halide7Runtime8Internal10work_queueE@GOTPCREL(%rip), %r10
	cmpb	$0, 2121(%r10)
	movq	%rdx, -56(%rbp)                 # 8-byte Spill
	je	.LBB21_1
# %bb.13:                               # %if.end4
	movl	%r14d, %r13d
	testl	%r14d, %r14d
	movq	%r14, -72(%rbp)                 # 8-byte Spill
	jle	.LBB21_14
.LBB21_15:                              # %for.body.preheader
	cmpl	$1, %r14d
	jne	.LBB21_30
# %bb.16:
	movl	$-1, %r15d
	xorl	%eax, %eax
	xorl	%r12d, %r12d
	xorl	%r11d, %r11d
	movl	$0, -44(%rbp)                   # 4-byte Folded Spill
	xorl	%r14d, %r14d
.LBB21_17:                              # %for.cond.cleanup.loopexit.unr-lcssa
	testb	$1, %r13b
	movq	-56(%rbp), %rdx                 # 8-byte Reload
	je	.LBB21_21
# %bb.18:                               # %for.body.epil
	shlq	$7, %rax
	movl	44(%rbx,%rax), %ecx
	addl	%ecx, %r12d
	testl	%ecx, %ecx
	movzbl	%r14b, %r14d
	movl	$1, %ecx
	cmovel	%ecx, %r14d
	movzbl	%r11b, %r11d
	cmovnel	%ecx, %r11d
	cmpl	$0, 32(%rbx,%rax)
	movl	-44(%rbp), %esi                 # 4-byte Reload
	movzbl	%sil, %esi
	cmovnel	%ecx, %esi
	movl	%esi, -44(%rbp)                 # 4-byte Spill
	cmpb	$0, 48(%rbx,%rax)
	je	.LBB21_20
# %bb.19:                               # %if.then23.epil
	incl	%r15d
	jmp	.LBB21_21
.LBB21_1:                               # %land.rhs.i.preheader
	xorl	%eax, %eax
	.p2align	4, 0x90
.LBB21_2:                               # %land.rhs.i
                                        # =>This Inner Loop Header: Depth=1
	cmpb	$0, 12(%r10,%rax)
	jne	.LBB21_7
# %bb.3:                                # %while.body.i
                                        #   in Loop: Header=BB21_2 Depth=1
	cmpb	$0, 13(%r10,%rax)
	jne	.LBB21_4
# %bb.56:                               # %while.body.i.1
                                        #   in Loop: Header=BB21_2 Depth=1
	cmpb	$0, 14(%r10,%rax)
	jne	.LBB21_6
# %bb.57:                               # %while.body.i.2
                                        #   in Loop: Header=BB21_2 Depth=1
	cmpb	$0, 15(%r10,%rax)
	jne	.LBB21_5
# %bb.58:                               # %while.body.i.3
                                        #   in Loop: Header=BB21_2 Depth=1
	addq	$4, %rax
	cmpq	$2116, %rax                     # imm = 0x844
	jne	.LBB21_2
	jmp	.LBB21_10
.LBB21_30:                              # %for.body.preheader.new
	movl	%r13d, %edx
	andl	$-2, %edx
	leaq	176(%rbx), %rsi
	movl	$-1, %r15d
	xorl	%eax, %eax
	movl	$1, %r9d
	xorl	%r12d, %r12d
	xorl	%r11d, %r11d
	movl	$0, -44(%rbp)                   # 4-byte Folded Spill
	xorl	%r14d, %r14d
	jmp	.LBB21_31
	.p2align	4, 0x90
.LBB21_59:                              # %if.else24.1
                                        #   in Loop: Header=BB21_31 Depth=1
	addl	-8(%rsi), %r15d
.LBB21_60:                              # %for.inc.1
                                        #   in Loop: Header=BB21_31 Depth=1
	addl	%edi, %r12d
	addq	$2, %rax
	addq	$256, %rsi                      # imm = 0x100
	cmpq	%rax, %rdx
	je	.LBB21_17
.LBB21_31:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	cmpb	$0, -128(%rsi)
	je	.LBB21_33
# %bb.32:                               # %if.then23
                                        #   in Loop: Header=BB21_31 Depth=1
	incl	%r15d
	jmp	.LBB21_34
	.p2align	4, 0x90
.LBB21_33:                              # %if.else24
                                        #   in Loop: Header=BB21_31 Depth=1
	addl	-136(%rsi), %r15d
.LBB21_34:                              # %for.inc
                                        #   in Loop: Header=BB21_31 Depth=1
	movl	-132(%rsi), %ecx
	addl	%ecx, %r12d
	testl	%ecx, %ecx
	movzbl	%r14b, %r14d
	cmovel	%r9d, %r14d
	movl	-4(%rsi), %edi
	testl	%edi, %edi
	cmovel	%r9d, %r14d
	movzbl	%r11b, %r11d
	orl	%edi, %ecx
	cmovnel	%r9d, %r11d
	movl	-144(%rsi), %ecx
	movl	-44(%rbp), %r8d                 # 4-byte Reload
	movzbl	%r8b, %r8d
	orl	-16(%rsi), %ecx
	cmovnel	%r9d, %r8d
	movl	%r8d, -44(%rbp)                 # 4-byte Spill
	cmpb	$0, (%rsi)
	je	.LBB21_59
# %bb.35:                               # %if.then23.1
                                        #   in Loop: Header=BB21_31 Depth=1
	incl	%r15d
	jmp	.LBB21_60
.LBB21_20:                              # %if.else24.epil
	addl	40(%rbx,%rax), %r15d
.LBB21_21:                              # %for.cond.cleanup.loopexit
	movl	-44(%rbp), %eax                 # 4-byte Reload
	andb	$1, %al
	movl	%eax, -44(%rbp)                 # 4-byte Spill
	andb	$1, %r11b
	andb	$1, %r14b
	testq	%rdx, %rdx
	movl	%r11d, -60(%rbp)                # 4-byte Spill
	je	.LBB21_23
.LBB21_36:                              # %do.body61
	movl	112(%rdx), %eax
	imull	44(%rdx), %eax
	subl	96(%rdx), %eax
	cmpl	%eax, %r12d
	jle	.LBB21_38
# %bb.37:                               # %if.then66
	leaq	.L.str.3(%rip), %rsi
	xorl	%edi, %edi
	callq	halide_print@PLT
	callq	abort@PLT
	movl	-60(%rbp), %r11d                # 4-byte Reload
	movq	_ZN6Halide7Runtime8Internal10work_queueE@GOTPCREL(%rip), %r10
	movq	-56(%rbp), %rdx                 # 8-byte Reload
.LBB21_38:                              # %do.end69
	movl	-44(%rbp), %r12d                # 4-byte Reload
	movl	%r12d, %eax
	orb	%r11b, %al
	movq	-72(%rbp), %rdi                 # 8-byte Reload
	je	.LBB21_40
# %bb.39:                               # %if.then73
	incl	96(%rdx)
	jmp	.LBB21_40
.LBB21_7:                               # %do.body.i.loopexit
	addq	%r10, %rax
	addq	$12, %rax
	movl	$2128, %ecx                     # imm = 0x850
	addq	_ZN6Halide7Runtime8Internal10work_queueE@GOTPCREL(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB21_9
	jmp	.LBB21_10
.LBB21_4:                               # %do.body.i.split.loop.exit11
	addq	%r10, %rax
	addq	$13, %rax
	movl	$2128, %ecx                     # imm = 0x850
	addq	_ZN6Halide7Runtime8Internal10work_queueE@GOTPCREL(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB21_9
	jmp	.LBB21_10
.LBB21_6:                               # %do.body.i.split.loop.exit9
	addq	%r10, %rax
	addq	$14, %rax
	movl	$2128, %ecx                     # imm = 0x850
	addq	_ZN6Halide7Runtime8Internal10work_queueE@GOTPCREL(%rip), %rcx
	cmpq	%rcx, %rax
	jne	.LBB21_9
	jmp	.LBB21_10
.LBB21_5:                               # %do.body.i.split.loop.exit
	addq	%r10, %rax
	addq	$15, %rax
	movl	$2128, %ecx                     # imm = 0x850
	addq	_ZN6Halide7Runtime8Internal10work_queueE@GOTPCREL(%rip), %rcx
	cmpq	%rcx, %rax
	je	.LBB21_10
.LBB21_9:                               # %if.then.i
	leaq	.L.str.6(%rip), %rsi
	xorl	%edi, %edi
	callq	halide_print@PLT
	callq	abort@PLT
	movq	_ZN6Halide7Runtime8Internal10work_queueE@GOTPCREL(%rip), %r10
	movq	-56(%rbp), %rdx                 # 8-byte Reload
.LBB21_10:                              # %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
	movl	8(%r10), %eax
	testl	%eax, %eax
	jne	.LBB21_12
# %bb.11:                               # %if.then2
	callq	_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv@PLT
	movq	_ZN6Halide7Runtime8Internal10work_queueE@GOTPCREL(%rip), %r10
	movq	-56(%rbp), %rdx                 # 8-byte Reload
.LBB21_12:                              # %if.end
	testl	%eax, %eax
	movl	$1, %ecx
	cmovgl	%eax, %ecx
	cmpl	$256, %ecx                      # imm = 0x100
	movl	$256, %eax                      # imm = 0x100
	cmovll	%ecx, %eax
	movl	%eax, 8(%r10)
	movb	$1, 2121(%r10)
	movl	%r14d, %r13d
	testl	%r14d, %r14d
	movq	%r14, -72(%rbp)                 # 8-byte Spill
	jg	.LBB21_15
.LBB21_14:
	xorl	%r14d, %r14d
	movl	$-1, %r15d
	movl	$0, -44(%rbp)                   # 4-byte Folded Spill
	xorl	%r11d, %r11d
	xorl	%r12d, %r12d
	testq	%rdx, %rdx
	movl	%r11d, -60(%rbp)                # 4-byte Spill
	jne	.LBB21_36
.LBB21_23:                              # %if.then32
	movl	-44(%rbp), %eax                 # 4-byte Reload
                                        # kill: def $al killed $al killed $eax
	orb	%r11b, %al
	sete	-45(%rbp)                       # 1-byte Folded Spill
	movl	24(%r10), %ecx
	cmpl	$255, %ecx
	jg	.LBB21_28
# %bb.24:                               # %land.rhs.preheader
	movzbl	%al, %eax
	addl	%eax, %r12d
	jmp	.LBB21_25
	.p2align	4, 0x90
.LBB21_27:                              # %while.body
                                        #   in Loop: Header=BB21_25 Depth=1
	incl	28(%r10)
	movq	_ZN6Halide7Runtime8Internal13worker_threadEPv@GOTPCREL(%rip), %rdi
	xorl	%esi, %esi
	callq	halide_spawn_thread@PLT
	movq	_ZN6Halide7Runtime8Internal10work_queueE@GOTPCREL(%rip), %r10
	movslq	24(%r10), %rdx
	leal	1(%rdx), %ecx
	movl	%ecx, 24(%r10)
	movq	%rax, 72(%r10,%rdx,8)
	cmpq	$255, %rdx
	jge	.LBB21_28
.LBB21_25:                              # %land.rhs
                                        # =>This Inner Loop Header: Depth=1
	movl	8(%r10), %eax
	decl	%eax
	cmpl	%eax, %ecx
	jl	.LBB21_27
# %bb.26:                               # %lor.rhs
                                        #   in Loop: Header=BB21_25 Depth=1
	subl	2124(%r10), %ecx
	incl	%ecx
	cmpl	%r12d, %ecx
	jl	.LBB21_27
.LBB21_28:                              # %do.end50
	cmpb	$0, -45(%rbp)                   # 1-byte Folded Reload
	movq	-72(%rbp), %rdi                 # 8-byte Reload
	movl	-44(%rbp), %r12d                # 4-byte Reload
	jne	.LBB21_40
# %bb.29:                               # %if.then54
	incl	2124(%r10)
.LBB21_40:                              # %if.end77
	testl	%edi, %edi
	jle	.LBB21_48
# %bb.41:                               # %for.body83.lr.ph
	movq	16(%r10), %rcx
	testb	$1, %r13b
	jne	.LBB21_43
# %bb.42:
	movl	%edi, %eax
	cmpl	$1, %edi
	jne	.LBB21_45
	jmp	.LBB21_47
.LBB21_43:                              # %for.body83.prol
	leal	-1(%rdi), %eax
	movq	%rax, %rdx
	shlq	$7, %rdx
	movq	%rcx, 64(%rbx,%rdx)
	leaq	(%rbx,%rdx), %rcx
	movq	%rbx, 72(%rbx,%rdx)
	movl	%edi, 80(%rbx,%rdx)
	movl	$0, 96(%rbx,%rdx)
	decq	%r13
	cmpl	$1, %edi
	je	.LBB21_47
.LBB21_45:                              # %for.body83.preheader
	addq	$2, %r13
	addl	$-2, %eax
	.p2align	4, 0x90
.LBB21_46:                              # %for.body83
                                        # =>This Inner Loop Header: Depth=1
	leal	1(%rax), %edx
	shlq	$7, %rdx
	leaq	(%rbx,%rdx), %rsi
	movq	%rcx, 64(%rbx,%rdx)
	movq	%rbx, 72(%rbx,%rdx)
	movl	%edi, 80(%rbx,%rdx)
	movl	$0, 96(%rbx,%rdx)
	movl	%eax, %edx
	shlq	$7, %rdx
	leaq	(%rbx,%rdx), %rcx
	movq	%rsi, 64(%rbx,%rdx)
	movq	%rbx, 72(%rbx,%rdx)
	movl	%edi, 80(%rbx,%rdx)
	movl	$0, 96(%rbx,%rdx)
	addq	$-2, %r13
	addl	$-2, %eax
	cmpq	$2, %r13
	jg	.LBB21_46
.LBB21_47:                              # %for.cond80.for.cond.cleanup82_crit_edge
	movq	%rbx, 16(%r10)
.LBB21_48:                              # %for.cond.cleanup82
	movl	24(%r10), %eax
	movl	64(%r10), %ecx
	cmpl	%ecx, %r15d
	cmovgl	%eax, %r15d
	cmpl	%eax, %ecx
	cmovll	%eax, %r15d
	cmpl	$0, 68(%r10)
	cmovnel	%eax, %r15d
	movl	%r15d, 32(%r10)
	leaq	40(%r10), %rdi
	callq	halide_cond_broadcast@PLT
	movq	_ZN6Halide7Runtime8Internal10work_queueE@GOTPCREL(%rip), %rcx
	movl	32(%rcx), %eax
	cmpl	28(%rcx), %eax
	jle	.LBB21_51
# %bb.49:                               # %if.then107
	leaq	48(%rcx), %rdi
	callq	halide_cond_broadcast@PLT
	movq	_ZN6Halide7Runtime8Internal10work_queueE@GOTPCREL(%rip), %rcx
	testb	%r14b, %r14b
	je	.LBB21_51
# %bb.50:                               # %if.then109
	leaq	56(%rcx), %rdi
	callq	halide_cond_broadcast@PLT
	movq	_ZN6Halide7Runtime8Internal10work_queueE@GOTPCREL(%rip), %rcx
.LBB21_51:                              # %if.end111
	orb	-60(%rbp), %r12b                # 1-byte Folded Reload
	je	.LBB21_55
# %bb.52:                               # %if.then115
	movq	-56(%rbp), %rax                 # 8-byte Reload
	testq	%rax, %rax
	je	.LBB21_54
# %bb.53:                               # %if.then117
	decl	96(%rax)
	jmp	.LBB21_55
.LBB21_54:                              # %if.else120
	decl	2124(%rcx)
.LBB21_55:                              # %if.end123
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end21:
	.size	_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_, .Lfunc_end21-_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE # -- Begin function _ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE,@function
_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE: # @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	movq	%rdi, %r13
	xorl	%eax, %eax
	movq	%rax, -48(%rbp)                 # 8-byte Spill
	movq	_ZN6Halide7Runtime8Internal10work_queueE@GOTPCREL(%rip), %r14
	leaq	48(%r14), %rax
	movq	%rax, -104(%rbp)                # 8-byte Spill
	leaq	40(%r14), %rax
	movq	%rax, -96(%rbp)                 # 8-byte Spill
	leaq	56(%r14), %rax
	movq	%rax, -72(%rbp)                 # 8-byte Spill
	leaq	16(%r14), %rax
	movq	%rax, -120(%rbp)                # 8-byte Spill
	movq	%rdi, -64(%rbp)                 # 8-byte Spill
	jmp	.LBB22_1
.LBB22_100:                             # %land.lhs.true307
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpb	$0, 124(%r12)
	movl	$0, %eax
	movq	%rax, -48(%rbp)                 # 8-byte Spill
	je	.LBB22_1
	.p2align	4, 0x90
.LBB22_101:                             # %if.then310
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-72(%rbp), %rdi                 # 8-byte Reload
	callq	halide_cond_broadcast@PLT
	xorl	%eax, %eax
	movq	%rax, -48(%rbp)                 # 8-byte Spill
.LBB22_1:                               # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_13 Depth 2
                                        #     Child Loop BB22_11 Depth 2
                                        #       Child Loop BB22_30 Depth 3
                                        #     Child Loop BB22_52 Depth 2
                                        #       Child Loop BB22_54 Depth 3
                                        #         Child Loop BB22_55 Depth 4
                                        #     Child Loop BB22_83 Depth 2
	testq	%r13, %r13
	je	.LBB22_7
# %bb.2:                                # %cond.true
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	112(%r13), %eax
	movl	40(%r13), %ecx
	orl	%eax, %ecx
	je	.LBB22_102
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	16(%r14), %r12
	cmpl	$0, 116(%r13)
	je	.LBB22_16
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB22_1 Depth=1
	testl	%eax, %eax
	jne	.LBB22_9
# %bb.5:                                # %while.cond6.preheader
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpq	%r13, %r12
	je	.LBB22_6
	.p2align	4, 0x90
.LBB22_13:                              # %while.body8
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%r12, %rax
	movq	64(%r12), %r12
	cmpq	%r13, %r12
	jne	.LBB22_13
# %bb.14:                               # %while.end.loopexit
                                        #   in Loop: Header=BB22_1 Depth=1
	addq	$64, %rax
	jmp	.LBB22_15
	.p2align	4, 0x90
.LBB22_7:                               # %cond.end
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpb	$0, 2120(%r14)
	jne	.LBB22_102
# %bb.8:                                # %while.body.thread
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	16(%r14), %r12
.LBB22_9:                               # %do.end
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	%r14, %r15
	testq	%r12, %r12
	je	.LBB22_37
# %bb.10:                               # %do.end27.preheader
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-120(%rbp), %r14                # 8-byte Reload
	jmp	.LBB22_11
	.p2align	4, 0x90
.LBB22_36:                              # %cleanup
                                        #   in Loop: Header=BB22_11 Depth=2
	movq	64(%r12), %rax
	addq	$64, %r12
	movq	%r12, %r14
	movq	%rax, %r12
	testq	%rax, %rax
	je	.LBB22_37
.LBB22_11:                              # %do.end27
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_30 Depth 3
	movq	88(%r12), %rdi
	testq	%rdi, %rdi
	je	.LBB22_12
# %bb.19:                               # %if.else32
                                        #   in Loop: Header=BB22_11 Depth=2
	movl	44(%rdi), %edx
	movl	112(%rdi), %ecx
	testl	%ecx, %ecx
	je	.LBB22_21
# %bb.20:                               # %if.else38
                                        #   in Loop: Header=BB22_11 Depth=2
	imull	%ecx, %edx
.LBB22_21:                              # %if.end45
                                        #   in Loop: Header=BB22_11 Depth=2
	subl	96(%rdi), %edx
	jmp	.LBB22_22
	.p2align	4, 0x90
.LBB22_12:                              # %if.then31
                                        #   in Loop: Header=BB22_11 Depth=2
	movq	%r15, %rax
	movl	24(%r15), %edx
	subl	2124(%r15), %edx
	incl	%edx
.LBB22_22:                              # %if.end45
                                        #   in Loop: Header=BB22_11 Depth=2
	movl	44(%r12), %esi
	movb	$1, %bl
	movb	$1, %cl
	testq	%r13, %r13
	je	.LBB22_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB22_11 Depth=2
	movq	72(%r12), %rcx
	cmpq	72(%r13), %rcx
	sete	%al
	testl	%esi, %esi
	sete	%cl
	orb	%al, %cl
.LBB22_24:                              # %lor.end
                                        #   in Loop: Header=BB22_11 Depth=2
	cmpb	$0, 48(%r12)
	je	.LBB22_26
# %bb.25:                               # %lor.rhs70
                                        #   in Loop: Header=BB22_11 Depth=2
	cmpl	$0, 112(%r12)
	sete	%bl
.LBB22_26:                              # %lor.end73
                                        #   in Loop: Header=BB22_11 Depth=2
	cmpl	%esi, %edx
	jl	.LBB22_36
# %bb.27:                               # %lor.end73
                                        #   in Loop: Header=BB22_11 Depth=2
	xorb	$1, %cl
	jne	.LBB22_36
# %bb.28:                               # %lor.end73
                                        #   in Loop: Header=BB22_11 Depth=2
	testb	%bl, %bl
	je	.LBB22_36
# %bb.29:                               # %if.then86
                                        #   in Loop: Header=BB22_11 Depth=2
	movl	120(%r12), %ecx
	cmpl	32(%r12), %ecx
	jge	.LBB22_33
	.p2align	4, 0x90
.LBB22_30:                              # %for.body.i
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_11 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	24(%r12), %rax
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	movq	(%rax,%rcx), %rdi
	movl	8(%rax,%rcx), %esi
	callq	halide_default_semaphore_try_acquire@PLT
	testb	%al, %al
	je	.LBB22_36
# %bb.31:                               # %for.inc.i
                                        #   in Loop: Header=BB22_30 Depth=3
	movl	120(%r12), %ecx
	incl	%ecx
	movl	%ecx, 120(%r12)
	cmpl	32(%r12), %ecx
	jl	.LBB22_30
# %bb.32:                               # %while.end101.thread502.loopexit
                                        #   in Loop: Header=BB22_1 Depth=1
	leaq	88(%r12), %rax
	movq	%rax, -48(%rbp)                 # 8-byte Spill
	leaq	44(%r12), %rax
	movq	88(%r12), %rdi
	movl	44(%r12), %esi
	movl	$0, 120(%r12)
	incl	112(%r12)
	testq	%rdi, %rdi
	je	.LBB22_35
.LBB22_49:                              # %if.else143
                                        #   in Loop: Header=BB22_1 Depth=1
	addl	%esi, 96(%rdi)
	cmpb	$0, 48(%r12)
	movq	%rax, -56(%rbp)                 # 8-byte Spill
	je	.LBB22_75
.LBB22_51:                              # %if.then156
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	64(%r12), %rax
	movq	%rax, (%r14)
	movq	%r15, %r14
	movq	%r15, %rdi
	callq	halide_mutex_unlock@PLT
	xorl	%ebx, %ebx
	movl	$1, %r13d
	.p2align	4, 0x90
.LBB22_52:                              # %while.cond161.preheader
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_54 Depth 3
                                        #         Child Loop BB22_55 Depth 4
	movl	40(%r12), %ecx
	movl	%ecx, %eax
	subl	%ebx, %eax
	cmpl	%r13d, %eax
	jle	.LBB22_61
# %bb.53:                               # %land.rhs.preheader
                                        #   in Loop: Header=BB22_52 Depth=2
	movl	32(%r12), %eax
	movl	120(%r12), %edx
	jmp	.LBB22_54
	.p2align	4, 0x90
.LBB22_58:                              # %while.body167
                                        #   in Loop: Header=BB22_54 Depth=3
	movl	$0, 120(%r12)
	incl	%r13d
	movl	%ecx, %esi
	subl	%ebx, %esi
	xorl	%edx, %edx
	cmpl	%r13d, %esi
	jle	.LBB22_59
.LBB22_54:                              # %land.rhs
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_52 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB22_55 Depth 4
	cmpl	%eax, %edx
	jge	.LBB22_58
	.p2align	4, 0x90
.LBB22_55:                              # %for.body.i483
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_52 Depth=2
                                        #       Parent Loop BB22_54 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movq	24(%r12), %rax
	movslq	%edx, %rcx
	shlq	$4, %rcx
	movq	(%rax,%rcx), %rdi
	movl	8(%rax,%rcx), %esi
	callq	halide_default_semaphore_try_acquire@PLT
	testb	%al, %al
	je	.LBB22_61
# %bb.56:                               # %for.inc.i486
                                        #   in Loop: Header=BB22_55 Depth=4
	movl	32(%r12), %eax
	movl	120(%r12), %edx
	incl	%edx
	movl	%edx, 120(%r12)
	cmpl	%eax, %edx
	jl	.LBB22_55
# %bb.57:                               # %while.body167.loopexit
                                        #   in Loop: Header=BB22_54 Depth=3
	movl	40(%r12), %ecx
	jmp	.LBB22_58
	.p2align	4, 0x90
.LBB22_61:                              # %while.end169
                                        #   in Loop: Header=BB22_52 Depth=2
	testl	%r13d, %r13d
	je	.LBB22_62
.LBB22_59:                              # %if.end172
                                        #   in Loop: Header=BB22_52 Depth=2
	movq	104(%r12), %rdi
	movl	36(%r12), %edx
	addl	%ebx, %edx
	movq	(%r12), %rsi
	movq	8(%r12), %r8
	movl	%r13d, %ecx
	movq	%r12, %r9
	callq	halide_do_loop_task@PLT
	addl	%r13d, %ebx
	xorl	%r13d, %r13d
	testl	%eax, %eax
	je	.LBB22_52
# %bb.60:                               #   in Loop: Header=BB22_1 Depth=1
	movl	%eax, %r15d
	jmp	.LBB22_63
	.p2align	4, 0x90
.LBB22_37:                              # %if.then103
                                        #   in Loop: Header=BB22_1 Depth=1
	testq	%r13, %r13
	je	.LBB22_42
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-48(%rbp), %rax                 # 8-byte Reload
	leal	1(%rax), %ebx
	cmpl	$39, %eax
	movq	%r15, %r14
	jg	.LBB22_40
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	%r14, %rdi
	callq	halide_mutex_unlock@PLT
	callq	halide_thread_yield@PLT
	movq	%r14, %rdi
	callq	halide_mutex_lock@PLT
	jmp	.LBB22_41
	.p2align	4, 0x90
.LBB22_16:                              # %if.else
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	88(%r13), %rax
	testq	%rax, %rax
	je	.LBB22_9
# %bb.17:                               # %land.lhs.true
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	116(%rax), %eax
	testl	%eax, %eax
	je	.LBB22_9
# %bb.18:                               # %if.then15
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	%eax, 116(%r13)
	movq	-72(%rbp), %rdi                 # 8-byte Reload
	callq	halide_cond_broadcast@PLT
	jmp	.LBB22_1
.LBB22_62:                              #   in Loop: Header=BB22_1 Depth=1
	xorl	%r15d, %r15d
	movb	$1, %r13b
.LBB22_63:                              # %while.end179
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	%r14, %rdi
	callq	halide_mutex_lock@PLT
	addl	%ebx, 36(%r12)
	movl	40(%r12), %eax
	subl	%ebx, %eax
	movl	%eax, 40(%r12)
	testb	%r13b, %r13b
	je	.LBB22_64
# %bb.72:                               # %if.else190
                                        #   in Loop: Header=BB22_1 Depth=1
	testl	%eax, %eax
	movq	-64(%rbp), %r13                 # 8-byte Reload
	movq	-56(%rbp), %rdx                 # 8-byte Reload
	jle	.LBB22_73
# %bb.74:                               # %if.then194
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	16(%r14), %rax
	movq	%rax, 64(%r12)
	movq	%r12, 16(%r14)
	xorl	%eax, %eax
	jmp	.LBB22_93
.LBB22_64:                              # %if.end230.thread513
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, 40(%r12)
	movq	-64(%rbp), %r13                 # 8-byte Reload
	jmp	.LBB22_65
.LBB22_42:                              # %if.else112
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	%r15, %r14
	incl	64(%r15)
	movl	28(%r15), %eax
	cmpl	32(%r15), %eax
	jle	.LBB22_44
# %bb.43:                               # %if.then115
                                        #   in Loop: Header=BB22_1 Depth=1
	decl	%eax
	movl	%eax, 28(%r14)
	movq	-104(%rbp), %rdi                # 8-byte Reload
	movq	%r14, %rsi
	callq	halide_cond_wait@PLT
	incl	28(%r14)
	decl	64(%r14)
	jmp	.LBB22_1
.LBB22_40:                              # %if.else108
                                        #   in Loop: Header=BB22_1 Depth=1
	incl	68(%r14)
	movb	$1, 124(%r13)
	movq	-72(%rbp), %rdi                 # 8-byte Reload
	movq	%r14, %rsi
	callq	halide_cond_wait@PLT
	movb	$0, 124(%r13)
	decl	68(%r14)
.LBB22_41:                              # %while.cond
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	%ebx, %eax
	movq	%rax, -48(%rbp)                 # 8-byte Spill
	jmp	.LBB22_1
.LBB22_44:                              # %if.else118
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-48(%rbp), %rax                 # 8-byte Reload
	leal	1(%rax), %ebx
	cmpl	$39, %eax
	jg	.LBB22_46
# %bb.45:                               # %if.then121
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	%r14, %rdi
	callq	halide_mutex_unlock@PLT
	callq	halide_thread_yield@PLT
	movq	%r14, %rdi
	callq	halide_mutex_lock@PLT
	jmp	.LBB22_47
.LBB22_6:                               #   in Loop: Header=BB22_1 Depth=1
	leaq	16(%r14), %rax
.LBB22_15:                              # %while.end
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	64(%r13), %rcx
	movq	%rcx, (%rax)
	movl	$0, 40(%r13)
	jmp	.LBB22_1
.LBB22_73:                              #   in Loop: Header=BB22_1 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_93
.LBB22_46:                              # %if.else122
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-96(%rbp), %rdi                 # 8-byte Reload
	movq	%r14, %rsi
	callq	halide_cond_wait@PLT
.LBB22_47:                              # %if.end124
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	%ebx, %eax
	movq	%rax, -48(%rbp)                 # 8-byte Spill
	decl	64(%r14)
	jmp	.LBB22_1
.LBB22_33:                              # %while.end101.thread502.loopexit67
                                        #   in Loop: Header=BB22_1 Depth=1
	leaq	88(%r12), %rax
	movq	%rax, -48(%rbp)                 # 8-byte Spill
	leaq	44(%r12), %rax
	movl	$0, 120(%r12)
	incl	112(%r12)
	testq	%rdi, %rdi
	jne	.LBB22_49
.LBB22_35:                              # %if.then136
                                        #   in Loop: Header=BB22_1 Depth=1
	addl	%esi, 2124(%r15)
	cmpb	$0, 48(%r12)
	movq	%rax, -56(%rbp)                 # 8-byte Spill
	jne	.LBB22_51
.LBB22_75:                              # %if.else198
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	(%r12), %rax
	movq	%rax, -112(%rbp)                # 8-byte Spill
	movq	8(%r12), %rax
	movq	%rax, -88(%rbp)                 # 8-byte Spill
	movl	36(%r12), %r13d
	movq	56(%r12), %rbx
	movq	104(%r12), %rax
	movq	%rax, -80(%rbp)                 # 8-byte Spill
	leal	1(%r13), %eax
	movl	%eax, 36(%r12)
	decl	40(%r12)
	jne	.LBB22_77
# %bb.76:                               # %if.then208
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	64(%r12), %rax
	movq	%rax, (%r14)
.LBB22_77:                              # %if.end210
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	%r15, %r14
	movq	%r15, %rdi
	callq	halide_mutex_unlock@PLT
	testq	%rbx, %rbx
	je	.LBB22_79
# %bb.78:                               # %if.then212
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-80(%rbp), %rdi                 # 8-byte Reload
	movq	%rbx, %rsi
	movl	%r13d, %edx
	movq	-88(%rbp), %rcx                 # 8-byte Reload
	callq	halide_do_task@PLT
	jmp	.LBB22_80
.LBB22_79:                              # %if.else220
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-80(%rbp), %rdi                 # 8-byte Reload
	movq	-112(%rbp), %rsi                # 8-byte Reload
	movl	%r13d, %edx
	movl	$1, %ecx
	movq	-88(%rbp), %r8                  # 8-byte Reload
	movq	%r12, %r9
	callq	halide_do_loop_task@PLT
.LBB22_80:                              # %if.end230
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	%eax, %r15d
	movq	%r14, %rdi
	callq	halide_mutex_lock@PLT
	testl	%r15d, %r15d
	movq	-64(%rbp), %r13                 # 8-byte Reload
	je	.LBB22_81
.LBB22_65:                              # %if.then238
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	%r15d, 116(%r12)
	movl	80(%r12), %edx
	testl	%edx, %edx
	jle	.LBB22_81
# %bb.66:                               # %do.end243.lr.ph
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	72(%r12), %r8
	cmpl	$1, %edx
	jne	.LBB22_82
# %bb.67:                               #   in Loop: Header=BB22_1 Depth=1
	xorl	%esi, %esi
	xorl	%eax, %eax
.LBB22_68:                              # %if.end271.loopexit.unr-lcssa
                                        #   in Loop: Header=BB22_1 Depth=1
	testb	$1, %dl
	movq	-56(%rbp), %rdx                 # 8-byte Reload
	je	.LBB22_93
# %bb.69:                               # %do.end243.epil
                                        #   in Loop: Header=BB22_1 Depth=1
	shlq	$7, %rsi
	cmpl	$0, 116(%r8,%rsi)
	jne	.LBB22_93
# %bb.70:                               # %if.then247.epil
                                        #   in Loop: Header=BB22_1 Depth=1
	leaq	(%r8,%rsi), %rcx
	addq	$116, %rcx
	movl	%r15d, (%rcx)
	cmpl	$0, 112(%r12)
	je	.LBB22_91
# %bb.71:                               #   in Loop: Header=BB22_1 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB22_92
.LBB22_81:                              #   in Loop: Header=BB22_1 Depth=1
	xorl	%eax, %eax
	movq	-56(%rbp), %rdx                 # 8-byte Reload
.LBB22_93:                              # %if.end271
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-48(%rbp), %rcx                 # 8-byte Reload
	movq	(%rcx), %rcx
	movl	(%rdx), %edx
	testq	%rcx, %rcx
	je	.LBB22_94
# %bb.95:                               # %if.else281
                                        #   in Loop: Header=BB22_1 Depth=1
	subl	%edx, 96(%rcx)
	jmp	.LBB22_96
.LBB22_94:                              # %if.then274
                                        #   in Loop: Header=BB22_1 Depth=1
	subl	%edx, 2124(%r14)
.LBB22_96:                              # %if.end290
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	112(%r12), %ecx
	decl	%ecx
	movl	%ecx, 112(%r12)
	testb	$1, %al
	jne	.LBB22_101
# %bb.97:                               # %lor.lhs.false297
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, %eax
	movq	%rax, -48(%rbp)                 # 8-byte Spill
	testl	%ecx, %ecx
	jne	.LBB22_1
# %bb.98:                               # %land.lhs.true300
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$0, 40(%r12)
	je	.LBB22_100
# %bb.99:                               # %lor.lhs.false304
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$0, 116(%r12)
	movl	$0, %eax
	movq	%rax, -48(%rbp)                 # 8-byte Spill
	jne	.LBB22_100
	jmp	.LBB22_1
.LBB22_82:                              # %do.end243.lr.ph.new
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	%edx, %edi
	andl	$-2, %edi
	leaq	116(%r8), %rbx
	xorl	%esi, %esi
	xorl	%eax, %eax
	jmp	.LBB22_83
.LBB22_103:                             # %land.rhs254.1
                                        #   in Loop: Header=BB22_83 Depth=2
	movzbl	136(%rbx), %ecx
.LBB22_104:                             # %land.end260.1
                                        #   in Loop: Header=BB22_83 Depth=2
	andb	$1, %al
	orb	%cl, %al
.LBB22_105:                             # %for.inc.1
                                        #   in Loop: Header=BB22_83 Depth=2
	addq	$2, %rsi
	addq	$256, %rbx                      # imm = 0x100
	cmpq	%rsi, %rdi
	je	.LBB22_68
.LBB22_83:                              # %do.end243
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, (%rbx)
	je	.LBB22_84
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB22_83 Depth=2
	cmpl	$0, 128(%rbx)
	jne	.LBB22_105
	jmp	.LBB22_89
	.p2align	4, 0x90
.LBB22_84:                              # %if.then247
                                        #   in Loop: Header=BB22_83 Depth=2
	movl	%r15d, (%rbx)
	cmpl	$0, 112(%r12)
	je	.LBB22_86
# %bb.85:                               #   in Loop: Header=BB22_83 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB22_87
.LBB22_86:                              # %land.rhs254
                                        #   in Loop: Header=BB22_83 Depth=2
	movzbl	8(%rbx), %ecx
.LBB22_87:                              # %land.end260
                                        #   in Loop: Header=BB22_83 Depth=2
	andb	$1, %al
	orb	%cl, %al
	cmpl	$0, 128(%rbx)
	jne	.LBB22_105
.LBB22_89:                              # %if.then247.1
                                        #   in Loop: Header=BB22_83 Depth=2
	movl	%r15d, 128(%rbx)
	cmpl	$0, 112(%r12)
	je	.LBB22_103
# %bb.90:                               #   in Loop: Header=BB22_83 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB22_104
.LBB22_91:                              # %land.rhs254.epil
                                        #   in Loop: Header=BB22_1 Depth=1
	movb	124(%r8,%rsi), %cl
.LBB22_92:                              # %land.end260.epil
                                        #   in Loop: Header=BB22_1 Depth=1
	andb	$1, %al
	orb	%cl, %al
	jmp	.LBB22_93
.LBB22_102:                             # %while.end316
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end22:
	.size	_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE, .Lfunc_end22-_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE
                                        # -- End function
	.section	.text.halide_mutex_unlock,"ax",@progbits
	.weak	halide_mutex_unlock             # -- Begin function halide_mutex_unlock
	.p2align	4, 0x90
	.type	halide_mutex_unlock,@function
halide_mutex_unlock:                    # @halide_mutex_unlock
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	xorl	%ecx, %ecx
	movl	$1, %eax
	lock		cmpxchgq	%rcx, (%rdi)
	je	.LBB23_3
# %bb.1:                                # %if.then.i
	movq	%rdi, %rsi
	xorl	%ecx, %ecx
	movl	$1, %eax
	lock		cmpxchgq	%rcx, (%rdi)
	je	.LBB23_3
# %bb.2:                                # %if.end.i.i
	movq	_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE@GOTPCREL(%rip), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	%rsi, -8(%rbp)
	leaq	-16(%rbp), %rdi
	callq	_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy@PLT
.LBB23_3:                               # %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end23:
	.size	halide_mutex_unlock, .Lfunc_end23-halide_mutex_unlock
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy # -- Begin function _ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy,@function
_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy: # @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	movq	%rsi, %r15
	movq	%rdi, -56(%rbp)                 # 8-byte Spill
	movq	%rsi, %rdi
	callq	_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy@PLT
	movq	%rax, %rbx
	movq	8(%rax), %r12
	movq	%rax, %r13
	addq	$8, %r13
	xorl	%eax, %eax
	movq	%rax, -64(%rbp)                 # 8-byte Spill
                                        # implicit-def: $rax
                                        # kill: killed $rax
	jmp	.LBB24_2
	.p2align	4, 0x90
.LBB24_1:                               #   in Loop: Header=BB24_2 Depth=1
	leaq	144(%r12), %r13
	movq	%r12, -64(%rbp)                 # 8-byte Spill
	movq	%rax, %r12
	cmpq	%r15, %r14
	je	.LBB24_22
.LBB24_2:                               # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_6 Depth 2
                                        #     Child Loop BB24_12 Depth 2
	testq	%r12, %r12
	je	.LBB24_17
# %bb.3:                                # %while.body
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	136(%r12), %r14
	movq	144(%r12), %rax
	cmpq	%r15, %r14
	jne	.LBB24_1
# %bb.4:                                # %if.then
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%rax, (%r13)
	cmpq	%r12, 16(%rbx)
	je	.LBB24_9
# %bb.5:                                # %while.cond7.preheader
                                        #   in Loop: Header=BB24_2 Depth=1
	testq	%rax, %rax
	je	.LBB24_10
	.p2align	4, 0x90
.LBB24_6:                               # %while.body9
                                        #   Parent Loop BB24_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	136(%rax), %rcx
	movq	144(%rax), %rax
	testq	%rax, %rax
	je	.LBB24_8
# %bb.7:                                # %while.body9
                                        #   in Loop: Header=BB24_6 Depth=2
	cmpq	%r15, %rcx
	jne	.LBB24_6
.LBB24_8:                               # %if.end.loopexit
                                        #   in Loop: Header=BB24_2 Depth=1
	cmpq	%r15, %rcx
	sete	%al
	jmp	.LBB24_11
.LBB24_9:                               # %if.then5
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	-64(%rbp), %rax                 # 8-byte Reload
	movq	%rax, 16(%rbx)
.LBB24_10:                              #   in Loop: Header=BB24_2 Depth=1
	xorl	%eax, %eax
.LBB24_11:                              # %if.end
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	-56(%rbp), %rdi                 # 8-byte Reload
	movq	(%rdi), %rcx
	movzbl	%al, %edx
	movl	$1, %esi
	movq	%rdx, -48(%rbp)                 # 8-byte Spill
                                        # kill: def $edx killed $edx killed $rdx
	callq	*16(%rcx)
	movq	%rax, 152(%r12)
	movq	%r12, %rdi
	callq	pthread_mutex_lock@PLT
	movq	(%rbx), %rax
	.p2align	4, 0x90
.LBB24_12:                              # %atomicrmw.start
                                        #   Parent Loop BB24_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rax, %rcx
	andq	$-2, %rcx
	lock		cmpxchgq	%rcx, (%rbx)
	jne	.LBB24_12
# %bb.13:                               # %atomicrmw.end
                                        #   in Loop: Header=BB24_2 Depth=1
	cmpq	$4, %rax
	jb	.LBB24_16
# %bb.14:                               # %atomicrmw.end
                                        #   in Loop: Header=BB24_2 Depth=1
	andl	$2, %eax
	testq	%rax, %rax
	jne	.LBB24_16
# %bb.15:                               # %if.then.i
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	%rbx, %rdi
	callq	_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv@PLT
.LBB24_16:                              # %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit
                                        #   in Loop: Header=BB24_2 Depth=1
	movb	$0, 128(%r12)
	leaq	64(%r12), %rdi
	callq	pthread_cond_signal@PLT
	movq	%r12, %rdi
	callq	pthread_mutex_unlock@PLT
	cmpq	%r15, %r14
	jne	.LBB24_2
	jmp	.LBB24_22
.LBB24_17:                              # %while.end22
	movq	-56(%rbp), %rdi                 # 8-byte Reload
	movq	(%rdi), %rax
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	*16(%rax)
	movq	(%rbx), %rax
	.p2align	4, 0x90
.LBB24_18:                              # %atomicrmw.start2
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	andq	$-2, %rcx
	lock		cmpxchgq	%rcx, (%rbx)
	jne	.LBB24_18
# %bb.19:                               # %atomicrmw.end1
	xorl	%ecx, %ecx
	movq	%rcx, -48(%rbp)                 # 8-byte Spill
	cmpq	$4, %rax
	jb	.LBB24_22
# %bb.20:                               # %atomicrmw.end1
	andl	$2, %eax
	testq	%rax, %rax
	jne	.LBB24_22
# %bb.21:                               # %if.then.i68
	movq	%rbx, %rdi
	callq	_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv@PLT
	xorl	%eax, %eax
	movq	%rax, -48(%rbp)                 # 8-byte Spill
.LBB24_22:                              # %cleanup27
	movq	-48(%rbp), %rax                 # 8-byte Reload
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end24:
	.size	_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy, .Lfunc_end24-_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy # -- Begin function _ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy,@function
_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy: # @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%rax
	movabsq	$-7046029254386353131, %rax     # imm = 0x9E3779B97F4A7C15
	imulq	%rdi, %rax
	shrq	$54, %rax
	leaq	(%rax,%rax,2), %rcx
	movq	_ZN6Halide7Runtime8Internal15Synchronization5tableE@GOTPCREL(%rip), %rdx
	leaq	(%rdx,%rcx,8), %rbx
	movl	$1, %esi
	xorl	%eax, %eax
	lock		cmpxchgq	%rsi, (%rdx,%rcx,8)
	je	.LBB25_2
# %bb.1:                                # %if.then.i
	movq	%rbx, %rdi
	callq	_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv@PLT
.LBB25_2:                               # %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end25:
	.size	_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy, .Lfunc_end25-_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv # -- Begin function _ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv,@function
_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv: # @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rdi, %r14
	movq	(%rdi), %rbx
	.p2align	4, 0x90
.LBB26_1:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$4, %rbx
	jb	.LBB26_18
# %bb.2:                                # %while.cond
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	%ebx, %eax
	andl	$2, %eax
	testq	%rax, %rax
	jne	.LBB26_18
# %bb.3:                                # %if.end
                                        #   in Loop: Header=BB26_1 Depth=1
	movq	%rbx, %rcx
	orq	$2, %rcx
	movq	%rbx, %rax
	lock		cmpxchgq	%rcx, (%r14)
	movq	%rax, %rbx
	jne	.LBB26_1
	jmp	.LBB26_4
	.p2align	4, 0x90
.LBB26_11:                              #   in Loop: Header=BB26_4 Depth=1
	movq	%rax, %rbx
	#MEMBARRIER
	jmp	.LBB26_4
	.p2align	4, 0x90
.LBB26_5:                               # %while.body17.preheader
                                        #   in Loop: Header=BB26_4 Depth=1
	movq	-48(%rbp), %r15                 # 8-byte Reload
	jmp	.LBB26_6
	.p2align	4, 0x90
.LBB26_8:                               # %do.end
                                        #   in Loop: Header=BB26_6 Depth=2
	movq	%r15, 144(%r13)
	movq	152(%r13), %r12
	movq	%r13, %r15
	testq	%r12, %r12
	jne	.LBB26_9
.LBB26_6:                               # %while.body17
                                        #   Parent Loop BB26_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	136(%r15), %r13
	testq	%r13, %r13
	jne	.LBB26_8
# %bb.7:                                # %if.then20
                                        #   in Loop: Header=BB26_6 Depth=2
	xorl	%edi, %edi
	leaq	.L.str.5(%rip), %rsi
	callq	halide_print@PLT
	callq	abort@PLT
	jmp	.LBB26_8
	.p2align	4, 0x90
.LBB26_4:                               # %while.cond11
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_6 Depth 2
                                        #     Child Loop BB26_13 Depth 2
	movq	%rbx, %rax
	andq	$-4, %rax
	movq	%rax, -48(%rbp)                 # 8-byte Spill
	movq	152(%rax), %r12
	testq	%r12, %r12
	je	.LBB26_5
.LBB26_9:                               # %while.end23
                                        #   in Loop: Header=BB26_4 Depth=1
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	%r12, 152(%rax)
	testb	$1, %bl
	jne	.LBB26_10
# %bb.12:                               # %if.end35
                                        #   in Loop: Header=BB26_4 Depth=1
	movq	144(%r12), %rax
	testq	%rax, %rax
	jne	.LBB26_16
	.p2align	4, 0x90
.LBB26_13:                              # %while.body41
                                        #   Parent Loop BB26_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	%ebx, %ecx
	andl	$1, %ecx
	movq	%rbx, %rax
	lock		cmpxchgq	%rcx, (%r14)
	je	.LBB26_17
# %bb.14:                               # %if.end47
                                        #   in Loop: Header=BB26_13 Depth=2
	movq	%rax, %rbx
	cmpq	$4, %rax
	jb	.LBB26_13
# %bb.15:                               # %cleanup70
                                        #   in Loop: Header=BB26_4 Depth=1
	#MEMBARRIER
	jmp	.LBB26_4
	.p2align	4, 0x90
.LBB26_10:                              # %if.then27
                                        #   in Loop: Header=BB26_4 Depth=1
	movq	%rbx, %rcx
	andq	$-3, %rcx
	movq	%rbx, %rax
	lock		cmpxchgq	%rcx, (%r14)
	jne	.LBB26_11
.LBB26_18:                              # %cleanup75
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB26_16:                              # %if.else62
	movq	-48(%rbp), %rcx                 # 8-byte Reload
	movq	%rax, 152(%rcx)
	lock		andq	$-3, (%r14)
.LBB26_17:                              # %if.end66
	movq	%r12, %rdi
	callq	pthread_mutex_lock@PLT
	movb	$0, 128(%r12)
	leaq	64(%r12), %rdi
	callq	pthread_cond_signal@PLT
	movq	%r12, %rdi
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	pthread_mutex_unlock@PLT        # TAILCALL
.Lfunc_end26:
	.size	_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv, .Lfunc_end26-_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4                               # -- Begin function _ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv
.LCPI27_0:
	.zero	16
	.section	.text._ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv,@function
_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv: # @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$168, %rsp
	movq	%rdi, %r12
	movq	(%rdi), %rbx
	movl	$40, %r13d
	leaq	-144(%rbp), %r14
	leaq	-208(%rbp), %r15
	jmp	.LBB27_1
.LBB27_17:                              # %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit
                                        #   in Loop: Header=BB27_1 Depth=1
	movq	%r15, %rdi
	callq	pthread_mutex_unlock@PLT
	movq	(%r12), %rbx
	movl	$40, %r13d
.LBB27_18:                              # %if.end22
                                        #   in Loop: Header=BB27_1 Depth=1
	movq	%r14, %rdi
	callq	pthread_cond_destroy@PLT
	movq	%r15, %rdi
	callq	pthread_mutex_destroy@PLT
	.p2align	4, 0x90
.LBB27_1:                               # %while.cond.outer
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_15 Depth 2
	testb	$1, %bl
	jne	.LBB27_4
# %bb.2:                                # %if.then
                                        #   in Loop: Header=BB27_1 Depth=1
	movq	%rbx, %rcx
	orq	$1, %rcx
	movq	%rbx, %rax
	lock		cmpxchgq	%rcx, (%r12)
	je	.LBB27_19
# %bb.3:                                # %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
                                        #   in Loop: Header=BB27_1 Depth=1
	movq	%rax, %rbx
	jmp	.LBB27_1
.LBB27_4:                               # %if.end4
                                        #   in Loop: Header=BB27_1 Depth=1
	cmpq	$4, %rbx
	jb	.LBB27_5
# %bb.8:                                # %if.end4
                                        #   in Loop: Header=BB27_1 Depth=1
	testl	%r13d, %r13d
	jle	.LBB27_5
# %bb.9:                                # %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -44(%rbp)                   # 4-byte Folded Spill
	cmpl	$2, %r13d
	jl	.LBB27_6
# %bb.10:                               # %if.then7
                                        #   in Loop: Header=BB27_1 Depth=1
	decl	%r13d
	callq	halide_thread_yield@PLT
	movq	(%r12), %rbx
	jmp	.LBB27_1
.LBB27_5:                               #   in Loop: Header=BB27_1 Depth=1
	movl	%r13d, -44(%rbp)                # 4-byte Spill
.LBB27_6:                               # %if.end9
                                        #   in Loop: Header=BB27_1 Depth=1
	movb	$0, -80(%rbp)
	movq	%r15, %rdi
	xorl	%esi, %esi
	callq	pthread_mutex_init@PLT
	movq	%r14, %rdi
	xorl	%esi, %esi
	callq	pthread_cond_init@PLT
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, -72(%rbp)
	movq	$0, -56(%rbp)
	movb	$1, -80(%rbp)
	movq	%rbx, %rax
	andq	$-4, %rax
	je	.LBB27_7
# %bb.11:                               # %if.else
                                        #   in Loop: Header=BB27_1 Depth=1
	movq	%rax, -72(%rbp)
	jmp	.LBB27_12
.LBB27_7:                               # %if.then12
                                        #   in Loop: Header=BB27_1 Depth=1
	movq	%r15, -56(%rbp)
.LBB27_12:                              # %if.end13
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	-44(%rbp), %r13d                # 4-byte Reload
	movl	%ebx, %ecx
	andl	$3, %ecx
	orq	%r15, %rcx
	movq	%rbx, %rax
	lock		cmpxchgq	%rcx, (%r12)
	jne	.LBB27_13
# %bb.14:                               # %if.then19
                                        #   in Loop: Header=BB27_1 Depth=1
	movq	%r15, %rdi
	callq	pthread_mutex_lock@PLT
	cmpb	$0, -80(%rbp)
	je	.LBB27_17
	.p2align	4, 0x90
.LBB27_15:                              # %while.body.i
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%r14, %rdi
	movq	%r15, %rsi
	callq	pthread_cond_wait@PLT
	cmpb	$0, -80(%rbp)
	jne	.LBB27_15
	jmp	.LBB27_17
.LBB27_13:                              # %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit
                                        #   in Loop: Header=BB27_1 Depth=1
	movq	%rax, %rbx
	jmp	.LBB27_18
.LBB27_19:                              # %cleanup23
	addq	$168, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end27:
	.size	_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv, .Lfunc_end27-_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE,"axG",@progbits,_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE,comdat
	.weak	_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE # -- Begin function _ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE,@function
_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE: # @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	8(%rdi), %rax
	movq	(%rax), %rax
	cmpq	$3, %rax
	sete	%al
	popq	%rbp
	retq
.Lfunc_end28:
	.size	_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE, .Lfunc_end28-_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv,"axG",@progbits,_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv,comdat
	.weak	_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv # -- Begin function _ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv,@function
_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv: # @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	popq	%rbp
	retq
.Lfunc_end29:
	.size	_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv, .Lfunc_end29-_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib,"axG",@progbits,_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib,comdat
	.weak	_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib # -- Begin function _ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib,@function
_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib: # @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edx, %eax
	addq	%rax, %rax
	movq	8(%rdi), %rcx
	movq	%rax, (%rcx)
	xorl	%eax, %eax
	popq	%rbp
	retq
.Lfunc_end30:
	.size	_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib, .Lfunc_end30-_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb,"axG",@progbits,_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb,comdat
	.weak	_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb # -- Begin function _ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb,@function
_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb: # @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	popq	%rbp
	retq
.Lfunc_end31:
	.size	_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb, .Lfunc_end31-_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb
                                        # -- End function
	.section	.text.halide_cond_broadcast,"ax",@progbits
	.weak	halide_cond_broadcast           # -- Begin function halide_cond_broadcast
	.p2align	4, 0x90
	.type	halide_cond_broadcast,@function
halide_cond_broadcast:                  # @halide_cond_broadcast
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	(%rdi), %rdx
	testq	%rdx, %rdx
	je	.LBB32_2
# %bb.1:                                # %if.end.i
	movq	%rdi, %rsi
	movq	_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE@GOTPCREL(%rip), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	%rdi, -16(%rbp)
	movq	%rdx, -8(%rbp)
	leaq	-24(%rbp), %rdi
	xorl	%ecx, %ecx
	callq	_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy@PLT
.LBB32_2:                               # %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end32:
	.size	halide_cond_broadcast, .Lfunc_end32-halide_cond_broadcast
                                        # -- End function
	.section	.text.halide_default_semaphore_try_acquire,"ax",@progbits
	.weak	halide_default_semaphore_try_acquire # -- Begin function halide_default_semaphore_try_acquire
	.p2align	4, 0x90
	.type	halide_default_semaphore_try_acquire,@function
halide_default_semaphore_try_acquire:   # @halide_default_semaphore_try_acquire
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	testl	%esi, %esi
	je	.LBB33_1
# %bb.2:                                # %if.end
	movl	(%rdi), %eax
	movl	%eax, %edx
	subl	%esi, %edx
	js	.LBB33_3
	.p2align	4, 0x90
.LBB33_4:                               # %land.rhs
                                        # =>This Inner Loop Header: Depth=1
	lock		cmpxchgl	%edx, (%rdi)
	sete	%cl
	je	.LBB33_6
# %bb.5:                                # %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit
                                        #   in Loop: Header=BB33_4 Depth=1
	movl	%eax, %edx
	subl	%esi, %edx
	jns	.LBB33_4
.LBB33_6:                               # %return
	movl	%ecx, %eax
	popq	%rbp
	retq
.LBB33_1:
	movb	$1, %cl
	movl	%ecx, %eax
	popq	%rbp
	retq
.LBB33_3:
	xorl	%ecx, %ecx
	movl	%ecx, %eax
	popq	%rbp
	retq
.Lfunc_end33:
	.size	halide_default_semaphore_try_acquire, .Lfunc_end33-halide_default_semaphore_try_acquire
                                        # -- End function
	.section	.text.halide_cond_wait,"ax",@progbits
	.weak	halide_cond_wait                # -- Begin function halide_cond_wait
	.p2align	4, 0x90
	.type	halide_cond_wait,@function
halide_cond_wait:                       # @halide_cond_wait
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$48, %rsp
	movq	%rsi, %rbx
	movq	%rdi, %rsi
	movq	_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE@GOTPCREL(%rip), %rax
	addq	$16, %rax
	movq	%rax, -72(%rbp)
	movq	%rdi, -64(%rbp)
	movq	%rbx, -56(%rbp)
	leaq	-72(%rbp), %rdi
	callq	_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy@PLT
	cmpq	%rbx, %rax
	jne	.LBB34_1
# %bb.14:                               # %if.else.i
	movq	(%rbx), %rax
	testb	$1, %al
	jne	.LBB34_16
# %bb.15:                               # %if.then2.i
	leaq	.L.str.5.6(%rip), %rsi
	xorl	%edi, %edi
	callq	halide_print@PLT
	callq	abort@PLT
	jmp	.LBB34_16
.LBB34_1:                               # %if.then.i
	movl	$1, %ecx
	xorl	%eax, %eax
	lock		cmpxchgq	%rcx, (%rbx)
	jne	.LBB34_2
.LBB34_16:                              # %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB34_2:                               # %if.then.i.i
	movq	(%rbx), %rax
	movl	$40, %r12d
	movq	_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE@GOTPCREL(%rip), %r15
	addq	$16, %r15
	leaq	-48(%rbp), %r14
	.p2align	4, 0x90
.LBB34_3:                               # %while.cond.outer.i.i.i
                                        # =>This Inner Loop Header: Depth=1
	testb	$1, %al
	jne	.LBB34_5
# %bb.4:                                # %if.then.i.i.i
                                        #   in Loop: Header=BB34_3 Depth=1
	movq	%rax, %rcx
	orq	$1, %rcx
	lock		cmpxchgq	%rcx, (%rbx)
	jne	.LBB34_3
	jmp	.LBB34_16
.LBB34_5:                               # %if.end4.i.i.i
                                        #   in Loop: Header=BB34_3 Depth=1
	testl	%r12d, %r12d
	jg	.LBB34_10
# %bb.6:                                #   in Loop: Header=BB34_3 Depth=1
	movl	%r12d, %ecx
.LBB34_7:                               # %if.end8.i.i.i
                                        #   in Loop: Header=BB34_3 Depth=1
	testb	$2, %al
	jne	.LBB34_12
# %bb.8:                                # %if.then10.i.i.i
                                        #   in Loop: Header=BB34_3 Depth=1
	movq	%rax, %rdx
	orq	$2, %rdx
	lock		cmpxchgq	%rdx, (%rbx)
	jne	.LBB34_9
.LBB34_12:                              # %if.end19.i.i.i
                                        #   in Loop: Header=BB34_3 Depth=1
	movq	%r15, -48(%rbp)
	movq	%rbx, -40(%rbp)
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy@PLT
	cmpq	%rbx, %rax
	je	.LBB34_16
# %bb.13:                               # %if.end24.i.i.i
                                        #   in Loop: Header=BB34_3 Depth=1
	movq	(%rbx), %rax
	movl	$40, %r12d
	jmp	.LBB34_3
.LBB34_10:                              # %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i
                                        #   in Loop: Header=BB34_3 Depth=1
	xorl	%ecx, %ecx
	cmpl	$1, %r12d
	je	.LBB34_7
# %bb.11:                               # %if.then6.i.i.i
                                        #   in Loop: Header=BB34_3 Depth=1
	decl	%r12d
	callq	halide_thread_yield@PLT
	movq	(%rbx), %rax
	jmp	.LBB34_3
.LBB34_9:                               # %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i
                                        #   in Loop: Header=BB34_3 Depth=1
	movl	%ecx, %r12d
	jmp	.LBB34_3
.Lfunc_end34:
	.size	halide_cond_wait, .Lfunc_end34-halide_cond_wait
                                        # -- End function
	.section	.text.halide_do_loop_task,"ax",@progbits
	.weak	halide_do_loop_task             # -- Begin function halide_do_loop_task
	.p2align	4, 0x90
	.type	halide_do_loop_task,@function
halide_do_loop_task:                    # @halide_do_loop_task
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal19custom_do_loop_taskE@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	popq	%rbp
	jmpq	*%rax                           # TAILCALL
.Lfunc_end35:
	.size	halide_do_loop_task, .Lfunc_end35-halide_do_loop_task
                                        # -- End function
	.section	.text.halide_do_task,"ax",@progbits
	.weak	halide_do_task                  # -- Begin function halide_do_task
	.p2align	4, 0x90
	.type	halide_do_task,@function
halide_do_task:                         # @halide_do_task
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal14custom_do_taskE@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	popq	%rbp
	jmpq	*%rax                           # TAILCALL
.Lfunc_end36:
	.size	halide_do_task, .Lfunc_end36-halide_do_task
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy # -- Begin function _ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy,@function
_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy: # @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$184, %rsp
	movq	%rsi, %r13
	movq	%rdi, %r14
	movb	$0, -88(%rbp)
	leaq	-216(%rbp), %r12
	movq	%r12, %rdi
	xorl	%esi, %esi
	callq	pthread_mutex_init@PLT
	leaq	-152(%rbp), %r15
	movq	%r15, %rdi
	xorl	%esi, %esi
	callq	pthread_cond_init@PLT
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, -80(%rbp)
	movq	$0, -64(%rbp)
	movq	%r13, %rdi
	callq	_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy@PLT
	movq	%rax, %rbx
	movb	$0, -56(%rbp)
	movq	$0, -48(%rbp)
	movq	(%r14), %rax
	leaq	-56(%rbp), %rsi
	movq	%r14, %rdi
	callq	*(%rax)
	testb	%al, %al
	je	.LBB37_1
# %bb.6:                                # %if.end
	movq	$0, -72(%rbp)
	movq	%r13, -80(%rbp)
	movb	$1, -88(%rbp)
	movq	%rbx, %rax
	addq	$8, %rax
	movl	$144, %ecx
	addq	16(%rbx), %rcx
	cmpq	$0, 8(%rbx)
	cmoveq	%rax, %rcx
	leaq	-64(%rbp), %r13
	movq	%r12, (%rcx)
	movq	%r12, 16(%rbx)
	movq	(%rbx), %rax
	.p2align	4, 0x90
.LBB37_7:                               # %atomicrmw.start2
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	andq	$-2, %rcx
	lock		cmpxchgq	%rcx, (%rbx)
	jne	.LBB37_7
# %bb.8:                                # %atomicrmw.end1
	cmpq	$4, %rax
	jb	.LBB37_11
# %bb.9:                                # %atomicrmw.end1
	andl	$2, %eax
	testq	%rax, %rax
	jne	.LBB37_11
# %bb.10:                               # %if.then.i27
	movq	%rbx, %rdi
	callq	_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv@PLT
.LBB37_11:                              # %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit28
	movq	(%r14), %rax
	movq	%r14, %rdi
	callq	*8(%rax)
	leaq	-216(%rbp), %rdi
	callq	pthread_mutex_lock@PLT
	cmpb	$0, -88(%rbp)
	je	.LBB37_14
# %bb.12:                               # %while.body.i.preheader
	leaq	-216(%rbp), %rbx
	.p2align	4, 0x90
.LBB37_13:                              # %while.body.i
                                        # =>This Inner Loop Header: Depth=1
	movq	%r15, %rdi
	movq	%rbx, %rsi
	callq	pthread_cond_wait@PLT
	cmpb	$0, -88(%rbp)
	jne	.LBB37_13
.LBB37_14:                              # %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit
	leaq	-216(%rbp), %rdi
	callq	pthread_mutex_unlock@PLT
	jmp	.LBB37_15
.LBB37_1:                               # %if.then
	leaq	-48(%rbp), %r13
	movq	(%rbx), %rax
	.p2align	4, 0x90
.LBB37_2:                               # %atomicrmw.start
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	andq	$-2, %rcx
	lock		cmpxchgq	%rcx, (%rbx)
	jne	.LBB37_2
# %bb.3:                                # %atomicrmw.end
	cmpq	$4, %rax
	jb	.LBB37_15
# %bb.4:                                # %atomicrmw.end
	andl	$2, %eax
	testq	%rax, %rax
	jne	.LBB37_15
# %bb.5:                                # %if.then.i
	movq	%rbx, %rdi
	callq	_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv@PLT
.LBB37_15:                              # %cleanup
	movq	(%r13), %rbx
	movq	%r15, %rdi
	callq	pthread_cond_destroy@PLT
	leaq	-216(%rbp), %rdi
	callq	pthread_mutex_destroy@PLT
	movq	%rbx, %rax
	addq	$184, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end37:
	.size	_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy, .Lfunc_end37-_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE,"axG",@progbits,_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE,comdat
	.weak	_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE # -- Begin function _ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE,@function
_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE: # @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	8(%rdi), %rax
	movq	(%rax), %rdx
	movq	16(%rdi), %rcx
	testq	%rdx, %rdx
	je	.LBB38_1
# %bb.2:                                # %if.else
	movb	$1, %al
	cmpq	%rcx, %rdx
	je	.LBB38_4
# %bb.3:                                # %if.then5
	movq	%rcx, 8(%rsi)
	xorl	%eax, %eax
.LBB38_4:                               # %cleanup
                                        # kill: def $al killed $al killed $eax
	popq	%rbp
	retq
.LBB38_1:                               # %if.then
	movq	%rcx, (%rax)
	movb	$1, %al
                                        # kill: def $al killed $al killed $eax
	popq	%rbp
	retq
.Lfunc_end38:
	.size	_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE, .Lfunc_end38-_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv,"axG",@progbits,_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv,comdat
	.weak	_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv # -- Begin function _ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv,@function
_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv: # @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movq	16(%rdi), %rsi
	xorl	%ecx, %ecx
	movl	$1, %eax
	lock		cmpxchgq	%rcx, (%rsi)
	je	.LBB39_3
# %bb.1:                                # %if.then.i
	xorl	%ecx, %ecx
	movl	$1, %eax
	lock		cmpxchgq	%rcx, (%rsi)
	je	.LBB39_3
# %bb.2:                                # %if.end.i.i
	movq	_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE@GOTPCREL(%rip), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	%rsi, -8(%rbp)
	leaq	-16(%rbp), %rdi
	callq	_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy@PLT
.LBB39_3:                               # %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end39:
	.size	_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv, .Lfunc_end39-_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib,"axG",@progbits,_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib,comdat
	.weak	_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib # -- Begin function _ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib,@function
_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib: # @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib
# %bb.0:                                # %entry
	testl	%edx, %edx
	jne	.LBB40_2
# %bb.1:                                # %if.then
	pushq	%rbp
	movq	%rsp, %rbp
	movq	8(%rdi), %rax
	movq	$0, (%rax)
	popq	%rbp
.LBB40_2:                               # %if.end
	xorl	%eax, %eax
	retq
.Lfunc_end40:
	.size	_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib, .Lfunc_end40-_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy # -- Begin function _ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy,@function
_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy: # @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	movq	%rcx, %r14
	movq	%rdx, %r12
	movq	%rsi, %rbx
	movq	%rdi, %r15
	leaq	-56(%rbp), %rdi
	callq	_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy@PLT
	movb	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movq	(%r15), %rax
	leaq	-72(%rbp), %rsi
	movq	%r15, %rdi
	callq	*(%rax)
	testb	%al, %al
	je	.LBB41_1
# %bb.2:                                # %if.end
	movq	-56(%rbp), %rdx
	movq	8(%rdx), %rcx
	testq	%rcx, %rcx
	je	.LBB41_3
# %bb.4:                                # %while.body.preheader
	addq	$8, %rdx
	xorl	%r13d, %r13d
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	xorl	%edi, %edi
	jmp	.LBB41_5
	.p2align	4, 0x90
.LBB41_6:                               #   in Loop: Header=BB41_5 Depth=1
	leaq	144(%rsi), %rdx
	movq	%rsi, %rdi
.LBB41_15:                              # %if.end22
                                        #   in Loop: Header=BB41_5 Depth=1
	testq	%rcx, %rcx
	je	.LBB41_16
.LBB41_5:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %rsi
	movq	136(%rcx), %rax
	movq	144(%rcx), %rcx
	cmpq	%rbx, %rax
	jne	.LBB41_6
# %bb.7:                                # %if.then4
                                        #   in Loop: Header=BB41_5 Depth=1
	movq	%rcx, (%rdx)
	movq	-56(%rbp), %rax
	cmpq	%rsi, 16(%rax)
	je	.LBB41_8
# %bb.9:                                # %if.end10
                                        #   in Loop: Header=BB41_5 Depth=1
	cmpb	$0, -72(%rbp)
	jne	.LBB41_10
	jmp	.LBB41_12
.LBB41_8:                               # %if.then7
                                        #   in Loop: Header=BB41_5 Depth=1
	movq	%rdi, 16(%rax)
	cmpb	$0, -72(%rbp)
	je	.LBB41_12
.LBB41_10:                              # %if.end10
                                        #   in Loop: Header=BB41_5 Depth=1
	testq	%r13, %r13
	jne	.LBB41_12
# %bb.11:                               #   in Loop: Header=BB41_5 Depth=1
	movq	%rsi, %r13
	jmp	.LBB41_15
	.p2align	4, 0x90
.LBB41_12:                              # %if.else
                                        #   in Loop: Header=BB41_5 Depth=1
	movq	%rsi, %rax
	testq	%r9, %r9
	je	.LBB41_14
# %bb.13:                               # %if.else15
                                        #   in Loop: Header=BB41_5 Depth=1
	movq	%rsi, 144(%r8)
	movq	%r9, %rax
.LBB41_14:                              # %if.end17
                                        #   in Loop: Header=BB41_5 Depth=1
	movq	%r12, 136(%rsi)
	movq	%rax, %r9
	movq	%rsi, %r8
	jmp	.LBB41_15
.LBB41_1:                               # %if.then
	leaq	-56(%rbp), %rdi
	callq	_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE@PLT
	xorl	%eax, %eax
	jmp	.LBB41_26
.LBB41_16:                              # %while.end
	testq	%r9, %r9
	je	.LBB41_17
# %bb.18:                               # %if.then24
	movq	$0, 144(%r8)
	movq	-48(%rbp), %rcx
	cmpq	$0, 8(%rcx)
	je	.LBB41_19
# %bb.20:                               # %if.else31
	movl	$144, %eax
	addq	16(%rcx), %rax
	jmp	.LBB41_21
.LBB41_3:
	xorl	%eax, %eax
	xorl	%r13d, %r13d
	jmp	.LBB41_22
.LBB41_17:
	xorl	%eax, %eax
	jmp	.LBB41_22
.LBB41_19:
	leaq	8(%rcx), %rax
.LBB41_21:                              # %if.end35
	movq	%r9, (%rax)
	movq	%r8, 16(%rcx)
	movb	$1, %al
.LBB41_22:                              # %if.end38
	xorl	%edx, %edx
	testq	%r13, %r13
	setne	%dl
	movq	(%r15), %rbx
	movzbl	%al, %ecx
	leaq	-72(%rbp), %rsi
	movq	%r15, %rdi
	callq	*24(%rbx)
	testq	%r13, %r13
	je	.LBB41_24
# %bb.23:                               # %if.then44
	movq	%r14, 152(%r13)
	movq	%r13, %rdi
	callq	pthread_mutex_lock@PLT
	leaq	-56(%rbp), %rdi
	callq	_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE@PLT
	movb	$0, 128(%r13)
	leaq	64(%r13), %rdi
	callq	pthread_cond_signal@PLT
	movq	%r13, %rdi
	callq	pthread_mutex_unlock@PLT
	jmp	.LBB41_25
.LBB41_24:                              # %if.else48
	leaq	-56(%rbp), %rdi
	callq	_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE@PLT
.LBB41_25:                              # %if.end49
	testq	%r13, %r13
	setne	%al
	andb	-72(%rbp), %al
	movzbl	%al, %eax
.LBB41_26:                              # %cleanup
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end41:
	.size	_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy, .Lfunc_end41-_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy # -- Begin function _ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy,@function
_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy: # @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rdx, %r13
	movq	%rsi, %rbx
	movq	%rdi, %r12
	movabsq	$-7046029254386353131, %rax     # imm = 0x9E3779B97F4A7C15
	imulq	%rax, %rbx
	shrq	$54, %rbx
	imulq	%rax, %r13
	shrq	$54, %r13
	cmpq	%r13, %rbx
	jne	.LBB42_2
# %bb.1:                                # %if.then
	leaq	(%rbx,%rbx,2), %rcx
	movq	_ZN6Halide7Runtime8Internal15Synchronization5tableE@GOTPCREL(%rip), %rdx
	leaq	(%rdx,%rcx,8), %r14
	movl	$1, %esi
	xorl	%eax, %eax
	lock		cmpxchgq	%rsi, (%rdx,%rcx,8)
	movq	%rbx, %r13
	movq	%r14, %r15
	je	.LBB42_10
.LBB42_9:                               # %cleanup.sink.split
	leaq	(,%r13,2), %rdi
	addq	%r13, %rdi
	shlq	$3, %rdi
	addq	_ZN6Halide7Runtime8Internal15Synchronization5tableE@GOTPCREL(%rip), %rdi
	callq	_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv@PLT
.LBB42_10:                              # %cleanup
	movq	%r14, (%r12)
	movq	%r15, 8(%r12)
	movq	%r12, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB42_2:                               # %if.else
	jae	.LBB42_6
# %bb.3:                                # %if.then3
	leaq	(%rbx,%rbx,2), %rcx
	movq	_ZN6Halide7Runtime8Internal15Synchronization5tableE@GOTPCREL(%rip), %rdx
	leaq	(%rdx,%rcx,8), %r14
	leaq	(,%r13,2), %rax
	addq	%r13, %rax
	leaq	(%rdx,%rax,8), %r15
	movl	$1, %ebx
	xorl	%eax, %eax
	lock		cmpxchgq	%rbx, (%rdx,%rcx,8)
	je	.LBB42_5
# %bb.4:                                # %if.then.i40
	movq	%r14, %rdi
	callq	_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv@PLT
.LBB42_5:                               # %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41
	xorl	%eax, %eax
	lock		cmpxchgq	%rbx, (%r15)
	jne	.LBB42_9
	jmp	.LBB42_10
.LBB42_6:                               # %if.else9
	leaq	(,%r13,2), %rcx
	addq	%r13, %rcx
	movq	_ZN6Halide7Runtime8Internal15Synchronization5tableE@GOTPCREL(%rip), %rdx
	leaq	(%rdx,%rcx,8), %r15
	leaq	(%rbx,%rbx,2), %rax
	leaq	(%rdx,%rax,8), %r14
	movl	$1, %r13d
	xorl	%eax, %eax
	lock		cmpxchgq	%r13, (%rdx,%rcx,8)
	je	.LBB42_8
# %bb.7:                                # %if.then.i48
	movq	%r15, %rdi
	callq	_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv@PLT
.LBB42_8:                               # %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit49
	xorl	%eax, %eax
	lock		cmpxchgq	%r13, (%r14)
	movq	%rbx, %r13
	jne	.LBB42_9
	jmp	.LBB42_10
.Lfunc_end42:
	.size	_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy, .Lfunc_end42-_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE # -- Begin function _ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE,@function
_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE: # @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%rax
	movq	%rdi, %rbx
	movq	(%rdi), %rdi
	movq	8(%rbx), %rcx
	cmpq	%rcx, %rdi
	je	.LBB43_1
# %bb.3:                                # %if.else
	jbe	.LBB43_11
# %bb.4:                                # %if.then5
	movq	(%rdi), %rax
	.p2align	4, 0x90
.LBB43_5:                               # %atomicrmw.start2
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	andq	$-2, %rcx
	lock		cmpxchgq	%rcx, (%rdi)
	jne	.LBB43_5
# %bb.6:                                # %atomicrmw.end1
	cmpq	$4, %rax
	jb	.LBB43_9
# %bb.7:                                # %atomicrmw.end1
	andl	$2, %eax
	testq	%rax, %rax
	jne	.LBB43_9
# %bb.8:                                # %if.then.i30
	callq	_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv@PLT
.LBB43_9:                               # %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31
	movq	8(%rbx), %rdi
	movq	(%rdi), %rax
	.p2align	4, 0x90
.LBB43_10:                              # %atomicrmw.start8
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	andq	$-2, %rcx
	lock		cmpxchgq	%rcx, (%rdi)
	jne	.LBB43_10
	jmp	.LBB43_18
.LBB43_1:                               # %if.then
	movq	(%rdi), %rax
	.p2align	4, 0x90
.LBB43_2:                               # %atomicrmw.start
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	andq	$-2, %rcx
	lock		cmpxchgq	%rcx, (%rdi)
	jne	.LBB43_2
	jmp	.LBB43_18
.LBB43_11:                              # %if.else10
	movq	(%rcx), %rax
	.p2align	4, 0x90
.LBB43_12:                              # %atomicrmw.start14
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rdx
	andq	$-2, %rdx
	lock		cmpxchgq	%rdx, (%rcx)
	jne	.LBB43_12
# %bb.13:                               # %atomicrmw.end13
	cmpq	$4, %rax
	jb	.LBB43_16
# %bb.14:                               # %atomicrmw.end13
	andl	$2, %eax
	testq	%rax, %rax
	jne	.LBB43_16
# %bb.15:                               # %if.then.i44
	movq	%rcx, %rdi
	callq	_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv@PLT
.LBB43_16:                              # %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45
	movq	(%rbx), %rdi
	movq	(%rdi), %rax
	.p2align	4, 0x90
.LBB43_17:                              # %atomicrmw.start20
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rcx
	andq	$-2, %rcx
	lock		cmpxchgq	%rcx, (%rdi)
	jne	.LBB43_17
.LBB43_18:                              # %atomicrmw.end19
	cmpq	$4, %rax
	jb	.LBB43_20
# %bb.19:                               # %atomicrmw.end19
	andl	$2, %eax
	testq	%rax, %rax
	jne	.LBB43_20
# %bb.21:                               # %if.end15.sink.split
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	jmp	_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv@PLT # TAILCALL
.LBB43_20:                              # %if.end15
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end43:
	.size	_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE, .Lfunc_end43-_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE,"axG",@progbits,_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE,comdat
	.weak	_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE # -- Begin function _ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE,@function
_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE: # @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	8(%rdi), %rax
	movq	(%rax), %r9
	movq	16(%rdi), %rdx
	cmpq	%rdx, %r9
	jne	.LBB44_6
# %bb.1:                                # %if.end
	movq	$0, (%rax)
	movq	16(%rdi), %rdi
	movq	(%rdi), %rax
	movb	$1, %r8b
	.p2align	4, 0x90
.LBB44_2:                               # %if.end
                                        # =>This Inner Loop Header: Depth=1
	testb	$1, %al
	je	.LBB44_5
# %bb.3:                                # %if.end.i
                                        #   in Loop: Header=BB44_2 Depth=1
	movq	%rax, %rcx
	orq	$2, %rcx
	lock		cmpxchgq	%rcx, (%rdi)
	jne	.LBB44_2
# %bb.4:
	xorl	%r8d, %r8d
.LBB44_5:                               # %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit
	movb	%r8b, (%rsi)
.LBB44_6:                               # %cleanup
	cmpq	%rdx, %r9
	sete	%al
	popq	%rbp
	retq
.Lfunc_end44:
	.size	_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE, .Lfunc_end44-_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib,"axG",@progbits,_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib,comdat
	.weak	_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib # -- Begin function _ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib,@function
_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib: # @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	xorl	%eax, %eax
	popq	%rbp
	retq
.Lfunc_end45:
	.size	_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib, .Lfunc_end45-_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb,"axG",@progbits,_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb,comdat
	.weak	_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb # -- Begin function _ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb,@function
_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb: # @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	cmpb	$0, (%rsi)
	je	.LBB46_3
# %bb.1:                                # %entry
	testb	%cl, %cl
	je	.LBB46_3
# %bb.2:                                # %if.then
	movq	16(%rdi), %rax
	lock		orq	$2, (%rax)
.LBB46_3:                               # %if.end
	popq	%rbp
	retq
.Lfunc_end46:
	.size	_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb, .Lfunc_end46-_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal27default_desired_num_threadsEv,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv # -- Begin function _ZN6Halide7Runtime8Internal27default_desired_num_threadsEv
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv,@function
_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv: # @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	leaq	.L.str.1(%rip), %rdi
	callq	getenv@PLT
	testq	%rax, %rax
	jne	.LBB47_2
# %bb.1:                                # %if.end
	leaq	.L.str.2(%rip), %rdi
	callq	getenv@PLT
	testq	%rax, %rax
	je	.LBB47_3
.LBB47_2:                               # %cond.true
	movq	%rax, %rdi
	popq	%rbp
	jmp	atoi@PLT                        # TAILCALL
.LBB47_3:                               # %cond.false
	popq	%rbp
	jmp	halide_host_cpu_count@PLT       # TAILCALL
.Lfunc_end47:
	.size	_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv, .Lfunc_end47-_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal13worker_threadEPv,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal13worker_threadEPv # -- Begin function _ZN6Halide7Runtime8Internal13worker_threadEPv
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal13worker_threadEPv,@function
_ZN6Halide7Runtime8Internal13worker_threadEPv: # @_ZN6Halide7Runtime8Internal13worker_threadEPv
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	%rdi, %rbx
	movq	_ZN6Halide7Runtime8Internal10work_queueE@GOTPCREL(%rip), %r14
	movq	%r14, %rdi
	callq	halide_mutex_lock@PLT
	movq	%rbx, %rdi
	callq	_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE@PLT
	movq	%r14, %rdi
	popq	%rbx
	popq	%r14
	popq	%rbp
	jmp	halide_mutex_unlock@PLT         # TAILCALL
.Lfunc_end48:
	.size	_ZN6Halide7Runtime8Internal13worker_threadEPv, .Lfunc_end48-_ZN6Halide7Runtime8Internal13worker_threadEPv
                                        # -- End function
	.section	.text.halide_spawn_thread,"ax",@progbits
	.weak	halide_spawn_thread             # -- Begin function halide_spawn_thread
	.p2align	4, 0x90
	.type	halide_spawn_thread,@function
halide_spawn_thread:                    # @halide_spawn_thread
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	movq	%rsi, %r14
	movq	%rdi, %r15
	movl	$24, %edi
	callq	malloc@PLT
	movq	%rax, %rbx
	movq	%r15, (%rax)
	movq	%r14, 8(%rax)
	leaq	16(%rax), %rdi
	movq	$0, 16(%rax)
	movq	_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv@GOTPCREL(%rip), %rdx
	xorl	%esi, %esi
	movq	%rax, %rcx
	callq	pthread_create@PLT
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end49:
	.size	halide_spawn_thread, .Lfunc_end49-halide_spawn_thread
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal19spawn_thread_helperEPv,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv # -- Begin function _ZN6Halide7Runtime8Internal19spawn_thread_helperEPv
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv,@function
_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv: # @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, %rax
	movq	8(%rdi), %rdi
	callq	*(%rax)
	xorl	%eax, %eax
	popq	%rbp
	retq
.Lfunc_end50:
	.size	_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv, .Lfunc_end50-_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv
                                        # -- End function
	.section	.text.halide_default_do_parallel_tasks,"ax",@progbits
	.weak	halide_default_do_parallel_tasks # -- Begin function halide_default_do_parallel_tasks
	.p2align	4, 0x90
	.type	halide_default_do_parallel_tasks,@function
halide_default_do_parallel_tasks:       # @halide_default_do_parallel_tasks
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	movq	%rcx, %r15
	movl	%esi, %r14d
	movslq	%esi, %rax
	movq	%rsp, %r12
	movq	%rax, %rcx
	shlq	$7, %rcx
	subq	%rcx, %r12
	movq	%r12, %rsp
	testl	%eax, %eax
	jle	.LBB51_4
# %bb.1:                                # %for.body.preheader
	leaq	124(%r12), %rax
	xorl	%ecx, %ecx
	jmp	.LBB51_2
	.p2align	4, 0x90
.LBB51_6:                               # %if.end
                                        #   in Loop: Header=BB51_2 Depth=1
	vmovups	(%rdx), %ymm0
	vmovups	24(%rdx), %ymm1
	addq	$56, %rdx
	vmovups	%ymm1, -100(%rax)
	vmovups	%ymm0, -124(%rax)
	movq	$0, -68(%rax)
	movq	%rdi, -20(%rax)
	movq	$0, -12(%rax)
	movl	$0, -4(%rax)
	movb	$0, (%rax)
	movq	%r15, -36(%rax)
.LBB51_7:                               # %for.inc
                                        #   in Loop: Header=BB51_2 Depth=1
	incq	%rcx
	movslq	%r14d, %rsi
	subq	$-128, %rax
	cmpq	%rsi, %rcx
	jge	.LBB51_4
.LBB51_2:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, 40(%rdx)
	jg	.LBB51_6
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB51_2 Depth=1
	decl	%r14d
	jmp	.LBB51_7
.LBB51_4:                               # %for.cond.cleanup
	testl	%r14d, %r14d
	je	.LBB51_5
# %bb.8:                                # %if.end19
	movq	_ZN6Halide7Runtime8Internal10work_queueE@GOTPCREL(%rip), %rdi
	vzeroupper
	callq	halide_mutex_lock@PLT
	movl	%r14d, %edi
	movq	%r12, %rsi
	movq	%r15, %rdx
	callq	_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_@PLT
	testl	%r14d, %r14d
	jle	.LBB51_9
# %bb.12:                               # %for.body25.preheader
	movl	%r14d, %ebx
	xorl	%r14d, %r14d
	.p2align	4, 0x90
.LBB51_13:                              # %for.body25
                                        # =>This Inner Loop Header: Depth=1
	movq	%r12, %rdi
	callq	_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE@PLT
	movl	116(%r12), %eax
	testl	%eax, %eax
	cmovnel	%eax, %r14d
	subq	$-128, %r12
	decq	%rbx
	jne	.LBB51_13
	jmp	.LBB51_10
.LBB51_5:
	xorl	%r14d, %r14d
	jmp	.LBB51_11
.LBB51_9:
	xorl	%r14d, %r14d
.LBB51_10:                              # %for.cond.cleanup24
	movq	_ZN6Halide7Runtime8Internal10work_queueE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_unlock@PLT
.LBB51_11:                              # %cleanup
	movl	%r14d, %eax
	leaq	-32(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	vzeroupper
	retq
.Lfunc_end51:
	.size	halide_default_do_parallel_tasks, .Lfunc_end51-halide_default_do_parallel_tasks
                                        # -- End function
	.section	.text.halide_default_semaphore_init,"ax",@progbits
	.weak	halide_default_semaphore_init   # -- Begin function halide_default_semaphore_init
	.p2align	4, 0x90
	.type	halide_default_semaphore_init,@function
halide_default_semaphore_init:          # @halide_default_semaphore_init
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%esi, %eax
	movl	%esi, (%rdi)
	popq	%rbp
	retq
.Lfunc_end52:
	.size	halide_default_semaphore_init, .Lfunc_end52-halide_default_semaphore_init
                                        # -- End function
	.section	.text.halide_default_semaphore_release,"ax",@progbits
	.weak	halide_default_semaphore_release # -- Begin function halide_default_semaphore_release
	.p2align	4, 0x90
	.type	halide_default_semaphore_release,@function
halide_default_semaphore_release:       # @halide_default_semaphore_release
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	movl	%esi, %r14d
	movl	%esi, %ebx
	lock		xaddl	%ebx, (%rdi)
	testl	%ebx, %ebx
	jne	.LBB53_3
# %bb.1:                                # %entry
	testl	%r14d, %r14d
	je	.LBB53_3
# %bb.2:                                # %if.then
	movq	_ZN6Halide7Runtime8Internal10work_queueE@GOTPCREL(%rip), %r15
	movq	%r15, %rdi
	callq	halide_mutex_lock@PLT
	leaq	40(%r15), %rdi
	callq	halide_cond_broadcast@PLT
	leaq	56(%r15), %rdi
	callq	halide_cond_broadcast@PLT
	movq	%r15, %rdi
	callq	halide_mutex_unlock@PLT
.LBB53_3:                               # %if.end
	addl	%r14d, %ebx
	movl	%ebx, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end53:
	.size	halide_default_semaphore_release, .Lfunc_end53-halide_default_semaphore_release
                                        # -- End function
	.section	.text.halide_thread_pool_cleanup,"ax",@progbits
	.weak	halide_thread_pool_cleanup      # -- Begin function halide_thread_pool_cleanup
	.p2align	4, 0x90
	.type	halide_thread_pool_cleanup,@function
halide_thread_pool_cleanup:             # @halide_thread_pool_cleanup
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	popq	%rbp
	jmp	halide_shutdown_thread_pool@PLT # TAILCALL
.Lfunc_end54:
	.size	halide_thread_pool_cleanup, .Lfunc_end54-halide_thread_pool_cleanup
                                        # -- End function
	.section	.text.halide_shutdown_thread_pool,"ax",@progbits
	.weak	halide_shutdown_thread_pool     # -- Begin function halide_shutdown_thread_pool
	.p2align	4, 0x90
	.type	halide_shutdown_thread_pool,@function
halide_shutdown_thread_pool:            # @halide_shutdown_thread_pool
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	_ZN6Halide7Runtime8Internal10work_queueE@GOTPCREL(%rip), %r14
	cmpb	$0, 2121(%r14)
	je	.LBB55_5
# %bb.1:                                # %if.then
	movq	%r14, %rdi
	callq	halide_mutex_lock@PLT
	movb	$1, 2120(%r14)
	leaq	56(%r14), %rdi
	callq	halide_cond_broadcast@PLT
	leaq	40(%r14), %rdi
	callq	halide_cond_broadcast@PLT
	leaq	48(%r14), %rdi
	callq	halide_cond_broadcast@PLT
	movq	%r14, %rdi
	callq	halide_mutex_unlock@PLT
	cmpl	$0, 24(%r14)
	jle	.LBB55_4
# %bb.2:                                # %for.body.preheader
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB55_3:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	72(%r14,%rbx,8), %rdi
	callq	halide_join_thread@PLT
	incq	%rbx
	movslq	24(%r14), %rax
	cmpq	%rax, %rbx
	jl	.LBB55_3
.LBB55_4:                               # %for.cond.cleanup
	addq	$12, %r14
	movl	$2116, %edx                     # imm = 0x844
	movq	%r14, %rdi
	xorl	%esi, %esi
	popq	%rbx
	popq	%r14
	popq	%rbp
	jmp	memset@PLT                      # TAILCALL
.LBB55_5:                               # %if.end
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end55:
	.size	halide_shutdown_thread_pool, .Lfunc_end55-halide_shutdown_thread_pool
                                        # -- End function
	.section	.text.halide_join_thread,"ax",@progbits
	.weak	halide_join_thread              # -- Begin function halide_join_thread
	.p2align	4, 0x90
	.type	halide_join_thread,@function
halide_join_thread:                     # @halide_join_thread
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%rax
	movq	%rdi, %rbx
	movq	$0, -16(%rbp)
	movq	16(%rdi), %rdi
	leaq	-16(%rbp), %rsi
	callq	pthread_join@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end56:
	.size	halide_join_thread, .Lfunc_end56-halide_join_thread
                                        # -- End function
	.section	.text.halide_cond_signal,"ax",@progbits
	.weak	halide_cond_signal              # -- Begin function halide_cond_signal
	.p2align	4, 0x90
	.type	halide_cond_signal,@function
halide_cond_signal:                     # @halide_cond_signal
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movq	(%rdi), %rax
	testq	%rax, %rax
	je	.LBB57_2
# %bb.1:                                # %if.end.i
	movq	%rdi, %rsi
	movq	_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE@GOTPCREL(%rip), %rcx
	addq	$16, %rcx
	movq	%rcx, -24(%rbp)
	movq	%rdi, -16(%rbp)
	movq	%rax, -8(%rbp)
	leaq	-24(%rbp), %rdi
	callq	_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy@PLT
.LBB57_2:                               # %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end57:
	.size	halide_cond_signal, .Lfunc_end57-halide_cond_signal
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE,"axG",@progbits,_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE,comdat
	.weak	_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE # -- Begin function _ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE,@function
_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE: # @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movb	$1, %al
	popq	%rbp
	retq
.Lfunc_end58:
	.size	_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE, .Lfunc_end58-_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib,"axG",@progbits,_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib,comdat
	.weak	_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib # -- Begin function _ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib,@function
_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib: # @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib
# %bb.0:                                # %entry
	testl	%edx, %edx
	jne	.LBB59_2
# %bb.1:                                # %if.then
	pushq	%rbp
	movq	%rsp, %rbp
	movq	8(%rdi), %rax
	movq	$0, (%rax)
	popq	%rbp
.LBB59_2:                               # %if.end
	xorl	%eax, %eax
	retq
.Lfunc_end59:
	.size	_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib, .Lfunc_end59-_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib
                                        # -- End function
	.section	.text.halide_mutex_array_create,"ax",@progbits
	.weak	halide_mutex_array_create       # -- Begin function halide_mutex_array_create
	.p2align	4, 0x90
	.type	halide_mutex_array_create,@function
halide_mutex_array_create:              # @halide_mutex_array_create
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	movl	%edi, %r15d
	xorl	%ebx, %ebx
	movl	$8, %esi
	xorl	%edi, %edi
	callq	halide_malloc@PLT
	testq	%rax, %rax
	je	.LBB60_4
# %bb.1:                                # %if.end
	movq	%rax, %r14
	movslq	%r15d, %rbx
	shlq	$3, %rbx
	xorl	%edi, %edi
	movq	%rbx, %rsi
	callq	halide_malloc@PLT
	movq	%rax, (%r14)
	testq	%rax, %rax
	je	.LBB60_2
# %bb.3:                                # %if.end6
	movq	%rax, %rdi
	xorl	%esi, %esi
	movq	%rbx, %rdx
	callq	memset@PLT
	movq	%r14, %rbx
	jmp	.LBB60_4
.LBB60_2:                               # %if.then5
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	movq	%r14, %rsi
	callq	halide_free@PLT
.LBB60_4:                               # %cleanup
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end60:
	.size	halide_mutex_array_create, .Lfunc_end60-halide_mutex_array_create
                                        # -- End function
	.section	.text.halide_mutex_array_destroy,"ax",@progbits
	.weak	halide_mutex_array_destroy      # -- Begin function halide_mutex_array_destroy
	.p2align	4, 0x90
	.type	halide_mutex_array_destroy,@function
halide_mutex_array_destroy:             # @halide_mutex_array_destroy
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	%rsi, %r14
	movq	%rdi, %rbx
	movq	(%rsi), %rsi
	callq	halide_free@PLT
	movq	%rbx, %rdi
	movq	%r14, %rsi
	popq	%rbx
	popq	%r14
	popq	%rbp
	jmp	halide_free@PLT                 # TAILCALL
.Lfunc_end61:
	.size	halide_mutex_array_destroy, .Lfunc_end61-halide_mutex_array_destroy
                                        # -- End function
	.section	.text.halide_mutex_array_lock,"ax",@progbits
	.weak	halide_mutex_array_lock         # -- Begin function halide_mutex_array_lock
	.p2align	4, 0x90
	.type	halide_mutex_array_lock,@function
halide_mutex_array_lock:                # @halide_mutex_array_lock
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movslq	%esi, %rax
	shlq	$3, %rax
	addq	(%rdi), %rax
	movq	%rax, %rdi
	callq	halide_mutex_lock@PLT
	xorl	%eax, %eax
	popq	%rbp
	retq
.Lfunc_end62:
	.size	halide_mutex_array_lock, .Lfunc_end62-halide_mutex_array_lock
                                        # -- End function
	.section	.text.halide_mutex_array_unlock,"ax",@progbits
	.weak	halide_mutex_array_unlock       # -- Begin function halide_mutex_array_unlock
	.p2align	4, 0x90
	.type	halide_mutex_array_unlock,@function
halide_mutex_array_unlock:              # @halide_mutex_array_unlock
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movslq	%esi, %rax
	shlq	$3, %rax
	addq	(%rdi), %rax
	movq	%rax, %rdi
	callq	halide_mutex_unlock@PLT
	xorl	%eax, %eax
	popq	%rbp
	retq
.Lfunc_end63:
	.size	halide_mutex_array_unlock, .Lfunc_end63-halide_mutex_array_unlock
                                        # -- End function
	.section	.text.halide_set_num_threads,"ax",@progbits
	.weak	halide_set_num_threads          # -- Begin function halide_set_num_threads
	.p2align	4, 0x90
	.type	halide_set_num_threads,@function
halide_set_num_threads:                 # @halide_set_num_threads
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movl	%edi, %ebx
	testl	%edi, %edi
	js	.LBB64_1
# %bb.2:                                # %if.end
	movq	_ZN6Halide7Runtime8Internal10work_queueE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_lock@PLT
	testl	%ebx, %ebx
	jne	.LBB64_4
# %bb.3:                                # %if.then2
	callq	_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv@PLT
	movl	%eax, %ebx
	jmp	.LBB64_4
.LBB64_1:                               # %if.end.thread
	leaq	.L.str.4(%rip), %rsi
	xorl	%edi, %edi
	callq	halide_error@PLT
	movq	_ZN6Halide7Runtime8Internal10work_queueE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_lock@PLT
.LBB64_4:                               # %if.end3
	movq	_ZN6Halide7Runtime8Internal10work_queueE@GOTPCREL(%rip), %rdi
	movl	8(%rdi), %r14d
	testl	%ebx, %ebx
	movl	$1, %eax
	cmovgl	%ebx, %eax
	cmpl	$256, %eax                      # imm = 0x100
	movl	$256, %ecx                      # imm = 0x100
	cmovll	%eax, %ecx
	movl	%ecx, 8(%rdi)
	callq	halide_mutex_unlock@PLT
	movl	%r14d, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end64:
	.size	halide_set_num_threads, .Lfunc_end64-halide_set_num_threads
                                        # -- End function
	.section	.text.halide_set_custom_do_task,"ax",@progbits
	.weak	halide_set_custom_do_task       # -- Begin function halide_set_custom_do_task
	.p2align	4, 0x90
	.type	halide_set_custom_do_task,@function
halide_set_custom_do_task:              # @halide_set_custom_do_task
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal14custom_do_taskE@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rax
	movq	%rdi, (%rcx)
	popq	%rbp
	retq
.Lfunc_end65:
	.size	halide_set_custom_do_task, .Lfunc_end65-halide_set_custom_do_task
                                        # -- End function
	.section	.text.halide_set_custom_do_loop_task,"ax",@progbits
	.weak	halide_set_custom_do_loop_task  # -- Begin function halide_set_custom_do_loop_task
	.p2align	4, 0x90
	.type	halide_set_custom_do_loop_task,@function
halide_set_custom_do_loop_task:         # @halide_set_custom_do_loop_task
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal19custom_do_loop_taskE@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rax
	movq	%rdi, (%rcx)
	popq	%rbp
	retq
.Lfunc_end66:
	.size	halide_set_custom_do_loop_task, .Lfunc_end66-halide_set_custom_do_loop_task
                                        # -- End function
	.section	.text.halide_set_custom_do_par_for,"ax",@progbits
	.weak	halide_set_custom_do_par_for    # -- Begin function halide_set_custom_do_par_for
	.p2align	4, 0x90
	.type	halide_set_custom_do_par_for,@function
halide_set_custom_do_par_for:           # @halide_set_custom_do_par_for
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal17custom_do_par_forE@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rax
	movq	%rdi, (%rcx)
	popq	%rbp
	retq
.Lfunc_end67:
	.size	halide_set_custom_do_par_for, .Lfunc_end67-halide_set_custom_do_par_for
                                        # -- End function
	.section	.text.halide_set_custom_parallel_runtime,"ax",@progbits
	.weak	halide_set_custom_parallel_runtime # -- Begin function halide_set_custom_parallel_runtime
	.p2align	4, 0x90
	.type	halide_set_custom_parallel_runtime,@function
halide_set_custom_parallel_runtime:     # @halide_set_custom_parallel_runtime
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	16(%rbp), %r10
	movq	_ZN6Halide7Runtime8Internal17custom_do_par_forE@GOTPCREL(%rip), %rax
	movq	%rdi, (%rax)
	movq	_ZN6Halide7Runtime8Internal14custom_do_taskE@GOTPCREL(%rip), %rax
	movq	%rsi, (%rax)
	movq	_ZN6Halide7Runtime8Internal19custom_do_loop_taskE@GOTPCREL(%rip), %rax
	movq	%rdx, (%rax)
	movq	_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE@GOTPCREL(%rip), %rax
	movq	%rcx, (%rax)
	movq	_ZN6Halide7Runtime8Internal21custom_semaphore_initE@GOTPCREL(%rip), %rax
	movq	%r8, (%rax)
	movq	_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE@GOTPCREL(%rip), %rax
	movq	%r9, (%rax)
	movq	_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE@GOTPCREL(%rip), %rax
	movq	%r10, (%rax)
	popq	%rbp
	retq
.Lfunc_end68:
	.size	halide_set_custom_parallel_runtime, .Lfunc_end68-halide_set_custom_parallel_runtime
                                        # -- End function
	.section	.text.halide_do_par_for,"ax",@progbits
	.weak	halide_do_par_for               # -- Begin function halide_do_par_for
	.p2align	4, 0x90
	.type	halide_do_par_for,@function
halide_do_par_for:                      # @halide_do_par_for
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal17custom_do_par_forE@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	popq	%rbp
	jmpq	*%rax                           # TAILCALL
.Lfunc_end69:
	.size	halide_do_par_for, .Lfunc_end69-halide_do_par_for
                                        # -- End function
	.section	.text.halide_do_parallel_tasks,"ax",@progbits
	.weak	halide_do_parallel_tasks        # -- Begin function halide_do_parallel_tasks
	.p2align	4, 0x90
	.type	halide_do_parallel_tasks,@function
halide_do_parallel_tasks:               # @halide_do_parallel_tasks
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	popq	%rbp
	jmpq	*%rax                           # TAILCALL
.Lfunc_end70:
	.size	halide_do_parallel_tasks, .Lfunc_end70-halide_do_parallel_tasks
                                        # -- End function
	.section	.text.halide_semaphore_init,"ax",@progbits
	.weak	halide_semaphore_init           # -- Begin function halide_semaphore_init
	.p2align	4, 0x90
	.type	halide_semaphore_init,@function
halide_semaphore_init:                  # @halide_semaphore_init
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal21custom_semaphore_initE@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	popq	%rbp
	jmpq	*%rax                           # TAILCALL
.Lfunc_end71:
	.size	halide_semaphore_init, .Lfunc_end71-halide_semaphore_init
                                        # -- End function
	.section	.text.halide_semaphore_release,"ax",@progbits
	.weak	halide_semaphore_release        # -- Begin function halide_semaphore_release
	.p2align	4, 0x90
	.type	halide_semaphore_release,@function
halide_semaphore_release:               # @halide_semaphore_release
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	popq	%rbp
	jmpq	*%rax                           # TAILCALL
.Lfunc_end72:
	.size	halide_semaphore_release, .Lfunc_end72-halide_semaphore_release
                                        # -- End function
	.section	.text.halide_semaphore_try_acquire,"ax",@progbits
	.weak	halide_semaphore_try_acquire    # -- Begin function halide_semaphore_try_acquire
	.p2align	4, 0x90
	.type	halide_semaphore_try_acquire,@function
halide_semaphore_try_acquire:           # @halide_semaphore_try_acquire
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	popq	%rbp
	jmpq	*%rax                           # TAILCALL
.Lfunc_end73:
	.size	halide_semaphore_try_acquire, .Lfunc_end73-halide_semaphore_try_acquire
                                        # -- End function
	.section	.text.halide_default_get_symbol,"ax",@progbits
	.weak	halide_default_get_symbol       # -- Begin function halide_default_get_symbol
	.p2align	4, 0x90
	.type	halide_default_get_symbol,@function
halide_default_get_symbol:              # @halide_default_get_symbol
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rdi, %rsi
	xorl	%edi, %edi
	popq	%rbp
	jmp	dlsym@PLT                       # TAILCALL
.Lfunc_end74:
	.size	halide_default_get_symbol, .Lfunc_end74-halide_default_get_symbol
                                        # -- End function
	.section	.text.halide_default_load_library,"ax",@progbits
	.weak	halide_default_load_library     # -- Begin function halide_default_load_library
	.p2align	4, 0x90
	.type	halide_default_load_library,@function
halide_default_load_library:            # @halide_default_load_library
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%rax
	movl	$1, %esi
	callq	dlopen@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	jne	.LBB75_2
# %bb.1:                                # %if.then
	callq	dlerror@PLT
.LBB75_2:                               # %if.end
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end75:
	.size	halide_default_load_library, .Lfunc_end75-halide_default_load_library
                                        # -- End function
	.section	.text.halide_default_get_library_symbol,"ax",@progbits
	.weak	halide_default_get_library_symbol # -- Begin function halide_default_get_library_symbol
	.p2align	4, 0x90
	.type	halide_default_get_library_symbol,@function
halide_default_get_library_symbol:      # @halide_default_get_library_symbol
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	popq	%rbp
	jmp	dlsym@PLT                       # TAILCALL
.Lfunc_end76:
	.size	halide_default_get_library_symbol, .Lfunc_end76-halide_default_get_library_symbol
                                        # -- End function
	.section	.text.halide_set_custom_get_symbol,"ax",@progbits
	.weak	halide_set_custom_get_symbol    # -- Begin function halide_set_custom_get_symbol
	.p2align	4, 0x90
	.type	halide_set_custom_get_symbol,@function
halide_set_custom_get_symbol:           # @halide_set_custom_get_symbol
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal17custom_get_symbolE@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rax
	movq	%rdi, (%rcx)
	popq	%rbp
	retq
.Lfunc_end77:
	.size	halide_set_custom_get_symbol, .Lfunc_end77-halide_set_custom_get_symbol
                                        # -- End function
	.section	.text.halide_set_custom_load_library,"ax",@progbits
	.weak	halide_set_custom_load_library  # -- Begin function halide_set_custom_load_library
	.p2align	4, 0x90
	.type	halide_set_custom_load_library,@function
halide_set_custom_load_library:         # @halide_set_custom_load_library
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal19custom_load_libraryE@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rax
	movq	%rdi, (%rcx)
	popq	%rbp
	retq
.Lfunc_end78:
	.size	halide_set_custom_load_library, .Lfunc_end78-halide_set_custom_load_library
                                        # -- End function
	.section	.text.halide_set_custom_get_library_symbol,"ax",@progbits
	.weak	halide_set_custom_get_library_symbol # -- Begin function halide_set_custom_get_library_symbol
	.p2align	4, 0x90
	.type	halide_set_custom_get_library_symbol,@function
halide_set_custom_get_library_symbol:   # @halide_set_custom_get_library_symbol
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal25custom_get_library_symbolE@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rax
	movq	%rdi, (%rcx)
	popq	%rbp
	retq
.Lfunc_end79:
	.size	halide_set_custom_get_library_symbol, .Lfunc_end79-halide_set_custom_get_library_symbol
                                        # -- End function
	.section	.text.halide_get_symbol,"ax",@progbits
	.weak	halide_get_symbol               # -- Begin function halide_get_symbol
	.p2align	4, 0x90
	.type	halide_get_symbol,@function
halide_get_symbol:                      # @halide_get_symbol
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal17custom_get_symbolE@GOTPCREL(%rip), %rax
	popq	%rbp
	jmpq	*(%rax)                         # TAILCALL
.Lfunc_end80:
	.size	halide_get_symbol, .Lfunc_end80-halide_get_symbol
                                        # -- End function
	.section	.text.halide_load_library,"ax",@progbits
	.weak	halide_load_library             # -- Begin function halide_load_library
	.p2align	4, 0x90
	.type	halide_load_library,@function
halide_load_library:                    # @halide_load_library
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal19custom_load_libraryE@GOTPCREL(%rip), %rax
	popq	%rbp
	jmpq	*(%rax)                         # TAILCALL
.Lfunc_end81:
	.size	halide_load_library, .Lfunc_end81-halide_load_library
                                        # -- End function
	.section	.text.halide_get_library_symbol,"ax",@progbits
	.weak	halide_get_library_symbol       # -- Begin function halide_get_library_symbol
	.p2align	4, 0x90
	.type	halide_get_library_symbol,@function
halide_get_library_symbol:              # @halide_get_library_symbol
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal25custom_get_library_symbolE@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	popq	%rbp
	jmpq	*%rax                           # TAILCALL
.Lfunc_end82:
	.size	halide_get_library_symbol, .Lfunc_end82-halide_get_library_symbol
                                        # -- End function
	.section	.text.halide_set_gpu_device,"ax",@progbits
	.weak	halide_set_gpu_device           # -- Begin function halide_set_gpu_device
	.p2align	4, 0x90
	.type	halide_set_gpu_device,@function
halide_set_gpu_device:                  # @halide_set_gpu_device
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal17halide_gpu_deviceE@GOTPCREL(%rip), %rax
	movl	%edi, (%rax)
	movq	_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE@GOTPCREL(%rip), %rax
	movb	$1, (%rax)
	popq	%rbp
	retq
.Lfunc_end83:
	.size	halide_set_gpu_device, .Lfunc_end83-halide_set_gpu_device
                                        # -- End function
	.section	.text.halide_get_gpu_device,"ax",@progbits
	.weak	halide_get_gpu_device           # -- Begin function halide_get_gpu_device
	.p2align	4, 0x90
	.type	halide_get_gpu_device,@function
halide_get_gpu_device:                  # @halide_get_gpu_device
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE@GOTPCREL(%rip), %rbx
	.p2align	4, 0x90
.LBB84_1:                               # %while.cond.i
                                        # =>This Inner Loop Header: Depth=1
	movb	$1, %al
	xchgb	%al, (%rbx)
	testb	%al, %al
	jne	.LBB84_1
# %bb.2:                                # %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
	movq	_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE@GOTPCREL(%rip), %r14
	cmpb	$0, (%r14)
	je	.LBB84_4
# %bb.3:                                # %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
	movq	_ZN6Halide7Runtime8Internal17halide_gpu_deviceE@GOTPCREL(%rip), %rax
	movl	(%rax), %eax
	jmp	.LBB84_8
.LBB84_4:                               # %if.then
	leaq	.L.str.8(%rip), %rdi
	callq	getenv@PLT
	testq	%rax, %rax
	je	.LBB84_5
# %bb.6:                                # %if.then2
	movq	%rax, %rdi
	callq	atoi@PLT
	jmp	.LBB84_7
.LBB84_5:
	movl	$-1, %eax
.LBB84_7:                               # %if.end
	movq	_ZN6Halide7Runtime8Internal17halide_gpu_deviceE@GOTPCREL(%rip), %rcx
	movl	%eax, (%rcx)
	movb	$1, (%r14)
.LBB84_8:                               # %if.end4
	movb	$0, (%rbx)
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end84:
	.size	halide_get_gpu_device, .Lfunc_end84-halide_get_gpu_device
                                        # -- End function
	.section	.text.halide_default_trace,"ax",@progbits
	.weak	halide_default_trace            # -- Begin function halide_default_trace
	.p2align	4, 0x90
	.type	halide_default_trace,@function
halide_default_trace:                   # @halide_default_trace
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$72, %rsp
	movq	%rsi, %r14
	movl	$1, %r15d
	movl	$1, %r12d
	lock		xaddl	%r12d, _ZZ20halide_default_traceE3ids(%rip)
	movq	%rdi, -56(%rbp)                 # 8-byte Spill
	callq	halide_get_trace_file@PLT
	movl	%eax, -48(%rbp)                 # 4-byte Spill
	testl	%eax, %eax
	movq	%r14, -64(%rbp)                 # 8-byte Spill
	movl	%r12d, -68(%rbp)                # 4-byte Spill
	jle	.LBB85_40
# %bb.1:                                # %if.then
	movzwl	34(%r14), %eax
	movzbl	33(%r14), %ebx
	addq	$7, %rbx
	shrq	$3, %rbx
	imulq	%rax, %rbx
	movl	48(%r14), %r12d
	shll	$2, %r12d
	movq	(%r14), %rdi
	callq	strlen@PLT
	movq	%rax, %r13
	incl	%r13d
	movq	24(%r14), %rdi
	testq	%rdi, %rdi
	je	.LBB85_3
# %bb.2:                                # %cond.true
	callq	strlen@PLT
	movq	%rax, %r15
	incl	%r15d
.LBB85_3:                               # %cond.end
	movq	%r12, -88(%rbp)                 # 8-byte Spill
	leal	(%r12,%rbx), %eax
	addl	%r13d, %eax
	leal	(%r15,%rax), %r12d
	addl	$31, %r12d
	andl	$-4, %r12d
	movq	_ZN6Halide7Runtime8Internal19halide_trace_bufferE@GOTPCREL(%rip), %rax
	movq	(%rax), %r14
	leaq	12(%r14), %rax
	movq	%rax, -80(%rbp)                 # 8-byte Spill
	cmpl	$1048577, %r12d                 # imm = 0x100001
	movq	%r15, -112(%rbp)                # 8-byte Spill
	movq	%r13, -104(%rbp)                # 8-byte Spill
	movq	%rbx, -96(%rbp)                 # 8-byte Spill
	jae	.LBB85_4
# %bb.12:                               # %while.body.i.i.us.i.preheader
	movl	$1073741823, %r13d              # imm = 0x3FFFFFFF
	movl	$-2147483648, %r15d             # imm = 0x80000000
	jmp	.LBB85_13
.LBB85_20:                              # %do.end.critedge.i.us.i
                                        #   in Loop: Header=BB85_13 Depth=1
	lock		andl	$2147483647, (%r14)     # imm = 0x7FFFFFFF
	.p2align	4, 0x90
.LBB85_13:                              # %while.body.i.i.us.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_16 Depth 2
	movl	(%r14), %eax
	andl	%r13d, %eax
	leal	1(%rax), %ecx
                                        # kill: def $eax killed $eax killed $rax
	lock		cmpxchgl	%ecx, (%r14)
	jne	.LBB85_13
# %bb.14:                               # %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock14acquire_sharedEv.exit.i.us.i
                                        #   in Loop: Header=BB85_13 Depth=1
	movl	%r12d, %eax
	lock		xaddl	%eax, 4(%r14)
	leal	(%rax,%r12), %ecx
	cmpl	$1048577, %ecx                  # imm = 0x100001
	jb	.LBB85_22
# %bb.15:                               # %while.body.us.i
                                        #   in Loop: Header=BB85_13 Depth=1
	lock		addl	%r12d, 8(%r14)
	lock		decl	(%r14)
	.p2align	4, 0x90
.LBB85_16:                              # %while.body.i.i5.us.i
                                        #   Parent Loop BB85_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lock		orl	$1073741824, (%r14)     # imm = 0x40000000
	movl	$1073741824, %eax               # imm = 0x40000000
	lock		cmpxchgl	%r15d, (%r14)
	jne	.LBB85_16
# %bb.17:                               # %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
                                        #   in Loop: Header=BB85_13 Depth=1
	movl	4(%r14), %ebx
	testl	%ebx, %ebx
	je	.LBB85_20
# %bb.18:                               # %if.then.i9.us.i
                                        #   in Loop: Header=BB85_13 Depth=1
	subl	8(%r14), %ebx
	movl	%ebx, 4(%r14)
	movl	-48(%rbp), %edi                 # 4-byte Reload
	movq	-80(%rbp), %rsi                 # 8-byte Reload
	movq	%rbx, %rdx
	callq	write@PLT
	movq	$0, 4(%r14)
	lock		andl	$2147483647, (%r14)     # imm = 0x7FFFFFFF
	cmpl	%eax, %ebx
	je	.LBB85_13
# %bb.19:                               # %if.then10.i.us.i
                                        #   in Loop: Header=BB85_13 Depth=1
	movq	-56(%rbp), %rdi                 # 8-byte Reload
	leaq	.L.str.32(%rip), %rsi
	callq	halide_print@PLT
	callq	abort@PLT
	jmp	.LBB85_13
.LBB85_40:                              # %if.else
	movl	$4096, %edi                     # imm = 0x1000
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB85_41
# %bb.42:                               # %if.then6.i439
	leaq	4095(%rbx), %r13
	movb	$0, 4095(%rbx)
	jmp	.LBB85_43
.LBB85_4:
	movl	$1073741823, %r15d              # imm = 0x3FFFFFFF
	movl	$-2147483648, %r13d             # imm = 0x80000000
	jmp	.LBB85_5
.LBB85_21:                              # %do.end.critedge.i.i
                                        #   in Loop: Header=BB85_5 Depth=1
	lock		andl	$2147483647, (%r14)     # imm = 0x7FFFFFFF
	.p2align	4, 0x90
.LBB85_5:                               # %while.body.i.i.i
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_8 Depth 2
	movl	(%r14), %eax
	andl	%r15d, %eax
	leal	1(%rax), %ecx
                                        # kill: def $eax killed $eax killed $rax
	lock		cmpxchgl	%ecx, (%r14)
	jne	.LBB85_5
# %bb.6:                                # %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock14acquire_sharedEv.exit.i.i
                                        #   in Loop: Header=BB85_5 Depth=1
	movq	-56(%rbp), %rdi                 # 8-byte Reload
	leaq	.L.str.31(%rip), %rsi
	callq	halide_print@PLT
	callq	abort@PLT
	movl	%r12d, %eax
	lock		xaddl	%eax, 4(%r14)
	leal	(%rax,%r12), %ecx
	cmpl	$1048577, %ecx                  # imm = 0x100001
	jb	.LBB85_22
# %bb.7:                                # %while.body.i
                                        #   in Loop: Header=BB85_5 Depth=1
	lock		addl	%r12d, 8(%r14)
	lock		decl	(%r14)
	.p2align	4, 0x90
.LBB85_8:                               # %while.body.i.i5.i
                                        #   Parent Loop BB85_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	lock		orl	$1073741824, (%r14)     # imm = 0x40000000
	movl	$1073741824, %eax               # imm = 0x40000000
	lock		cmpxchgl	%r13d, (%r14)
	jne	.LBB85_8
# %bb.9:                                # %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
                                        #   in Loop: Header=BB85_5 Depth=1
	movl	4(%r14), %ebx
	testl	%ebx, %ebx
	je	.LBB85_21
# %bb.10:                               # %if.then.i9.i
                                        #   in Loop: Header=BB85_5 Depth=1
	subl	8(%r14), %ebx
	movl	%ebx, 4(%r14)
	movl	-48(%rbp), %edi                 # 4-byte Reload
	movq	-80(%rbp), %rsi                 # 8-byte Reload
	movq	%rbx, %rdx
	callq	write@PLT
	movq	$0, 4(%r14)
	lock		andl	$2147483647, (%r14)     # imm = 0x7FFFFFFF
	cmpl	%eax, %ebx
	je	.LBB85_5
# %bb.11:                               # %if.then10.i.i
                                        #   in Loop: Header=BB85_5 Depth=1
	movq	-56(%rbp), %rdi                 # 8-byte Reload
	leaq	.L.str.32(%rip), %rsi
	callq	halide_print@PLT
	callq	abort@PLT
	jmp	.LBB85_5
.LBB85_22:                              # %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
	movl	%eax, %eax
	leaq	(%r14,%rax), %rbx
	addq	$12, %rbx
	cmpl	$4097, %r12d                    # imm = 0x1001
	movq	-96(%rbp), %r13                 # 8-byte Reload
	jb	.LBB85_27
# %bb.23:                               # %if.then17
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r14
	testq	%rax, %rax
	je	.LBB85_24
# %bb.25:                               # %if.else.i
	leaq	1023(%r14), %r15
	movb	$0, 1023(%r14)
	movl	%r12d, %edx
	movq	%r14, %rdi
	movq	%r15, %rsi
	movl	$1, %ecx
	callq	halide_uint64_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r15, %rsi
	callq	halide_string_to_string@PLT
	subq	%r14, %rax
	leaq	1(%rax), %rdx
	xorl	%edi, %edi
	movq	%r14, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	xorl	%edi, %edi
	movq	%r14, %rsi
	callq	halide_print@PLT
	jmp	.LBB85_26
.LBB85_41:
	xorl	%r13d, %r13d
.LBB85_43:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit
	movzbl	33(%r14), %eax
	movl	$8, %ecx
	.p2align	4, 0x90
.LBB85_44:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	%ecx, %r15d
	leal	(%r15,%r15), %ecx
	cmpl	%eax, %r15d
	jl	.LBB85_44
# %bb.45:                               # %do.body
	cmpl	$65, %r15d
	jl	.LBB85_47
# %bb.46:                               # %if.then63
	leaq	.L.str.2.11(%rip), %rsi
	movq	-56(%rbp), %rdi                 # 8-byte Reload
	callq	halide_print@PLT
	callq	abort@PLT
.LBB85_47:                              # %do.end
	movl	36(%r14), %ecx
	leaq	.Lreltable.halide_default_trace(%rip), %rax
	movq	%rcx, -48(%rbp)                 # 8-byte Spill
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	movq	%rbx, %rdi
	movq	%r13, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.72.209(%rip), %rdx
	movq	%rax, %rdi
	movq	%r13, %rsi
	callq	halide_string_to_string@PLT
	movq	(%r14), %rdx
	movq	%rax, %rdi
	movq	%r13, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.30.141(%rip), %rdx
	movq	%rax, %rdi
	movq	%r13, %rsi
	callq	halide_string_to_string@PLT
	movslq	44(%r14), %rdx
	movq	%rax, %rdi
	movq	%r13, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.22.179(%rip), %rdx
	movq	%rax, %rdi
	movq	%r13, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	cmpw	$2, 34(%r14)
	jb	.LBB85_49
# %bb.48:                               # %if.then80
	leaq	.L.str.17(%rip), %rdx
	movq	%r13, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
.LBB85_49:                              # %if.end82
	cmpl	$0, 48(%r14)
	movq	%rbx, -80(%rbp)                 # 8-byte Spill
	jle	.LBB85_56
# %bb.50:                               # %if.end100.peel
	movq	16(%r14), %rax
	movslq	(%rax), %rdx
	movq	%r13, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	movq	%rax, %rdi
	cmpl	$2, 48(%r14)
	jl	.LBB85_56
# %bb.51:                               # %if.then86.preheader
	movl	$1, %ebx
	leaq	.L.str.55(%rip), %r12
	jmp	.LBB85_52
	.p2align	4, 0x90
.LBB85_54:                              # %if.else97.split
                                        #   in Loop: Header=BB85_52 Depth=1
	movq	%r12, %rdx
.LBB85_55:                              # %if.end100
                                        #   in Loop: Header=BB85_52 Depth=1
	movq	%r13, %rsi
	callq	halide_string_to_string@PLT
	movq	-64(%rbp), %r14                 # 8-byte Reload
	movq	16(%r14), %rcx
	movslq	(%rcx,%rbx,4), %rdx
	movq	%rax, %rdi
	movq	%r13, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	movq	%rax, %rdi
	incq	%rbx
	movslq	48(%r14), %rax
	cmpq	%rax, %rbx
	jge	.LBB85_56
.LBB85_52:                              # %if.then86
                                        # =>This Inner Loop Header: Depth=1
	movzwl	34(%r14), %ecx
	cmpl	$2, %ecx
	jb	.LBB85_54
# %bb.53:                               # %land.lhs.true
                                        #   in Loop: Header=BB85_52 Depth=1
	movl	%ebx, %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, %eax
	leaq	.L.str.18(%rip), %rdx
	testl	%eax, %eax
	jne	.LBB85_54
	jmp	.LBB85_55
.LBB85_56:                              # %for.cond.cleanup
	cmpw	$2, 34(%r14)
	leaq	.L.str.20(%rip), %rax
	leaq	.L.str.8.119(%rip), %rdx
	cmovaeq	%rax, %rdx
	movq	%r13, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %r12
	cmpl	$2, -48(%rbp)                   # 4-byte Folded Reload
	jge	.LBB85_93
# %bb.57:                               # %if.then115
	cmpw	$2, 34(%r14)
	leaq	.L.str.22(%rip), %rax
	leaq	.L.str.23(%rip), %rdx
	cmovaeq	%rax, %rdx
	movq	%r12, %rdi
	movq	%r13, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %r12
	movzwl	34(%r14), %eax
	testw	%ax, %ax
	je	.LBB85_93
# %bb.58:                               # %if.end136.peel
	leaq	8(%r14), %rcx
	movq	%rcx, -48(%rbp)                 # 8-byte Spill
	movzbl	32(%r14), %ecx
	cmpq	$3, %rcx
	ja	.LBB85_87
# %bb.59:                               # %if.end136.peel
	leaq	.LJTI85_0(%rip), %rax
	movslq	(%rax,%rcx,4), %rcx
	addq	%rax, %rcx
	jmpq	*%rcx
.LBB85_78:                              # %if.then140.peel
	cmpl	$8, %r15d
	je	.LBB85_83
# %bb.79:                               # %if.then140.peel
	cmpl	$16, %r15d
	je	.LBB85_82
# %bb.80:                               # %if.then140.peel
	cmpl	$32, %r15d
	jne	.LBB85_84
# %bb.81:                               # %if.then158.peel
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	movslq	(%rax), %rdx
	jmp	.LBB85_85
.LBB85_24:                              # %if.then.i427
	movl	%r12d, %edx
	xorl	%edi, %edi
	xorl	%esi, %esi
	movl	$1, %ecx
	callq	halide_uint64_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
	xorl	%edi, %edi
	callq	halide_error@PLT
.LBB85_26:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	free@PLT
.LBB85_27:                              # %if.end
	movl	%r12d, (%rbx)
	movl	-68(%rbp), %r15d                # 4-byte Reload
	movl	%r15d, 4(%rbx)
	movq	-64(%rbp), %r14                 # 8-byte Reload
	movl	32(%r14), %eax
	movl	%eax, 8(%rbx)
	vmovups	36(%r14), %xmm0
	vmovups	%xmm0, 12(%rbx)
	movq	16(%r14), %rsi
	testq	%rsi, %rsi
	je	.LBB85_29
# %bb.28:                               # %if.then28
	leaq	28(%rbx), %rdi
	movl	-88(%rbp), %edx                 # 4-byte Reload
	callq	memcpy@PLT
.LBB85_29:                              # %if.end33
	movq	8(%r14), %rsi
	testq	%rsi, %rsi
	je	.LBB85_31
# %bb.30:                               # %if.then35
	movslq	24(%rbx), %rax
	leaq	(%rbx,%rax,4), %rdi
	addq	$28, %rdi
	movq	%r13, %rdx
	callq	memcpy@PLT
.LBB85_31:                              # %if.end40
	movslq	24(%rbx), %rax
	leaq	(%rbx,%rax,4), %rax
	addq	$28, %rax
	movzwl	10(%rbx), %ecx
	movzbl	9(%rbx), %edi
	addq	$7, %rdi
	shrq	$3, %rdi
	imulq	%rcx, %rdi
	addq	%rax, %rdi
	movq	(%r14), %rsi
	movl	-104(%rbp), %edx                # 4-byte Reload
	callq	memcpy@PLT
	movslq	24(%rbx), %rax
	leaq	(%rbx,%rax,4), %rax
	addq	$28, %rax
	movzwl	10(%rbx), %ecx
	movzbl	9(%rbx), %edi
	addq	$7, %rdi
	shrq	$3, %rdi
	imulq	%rcx, %rdi
	addq	%rax, %rdi
	.p2align	4, 0x90
.LBB85_32:                              # %while.cond.i409
                                        # =>This Inner Loop Header: Depth=1
	cmpb	$0, (%rdi)
	leaq	1(%rdi), %rdi
	jne	.LBB85_32
# %bb.33:                               # %_ZN21halide_trace_packet_t9trace_tagEv.exit
	movq	24(%r14), %rax
	testq	%rax, %rax
	leaq	.L.str.1.10(%rip), %rsi
	cmovneq	%rax, %rsi
	movl	-112(%rbp), %edx                # 4-byte Reload
	callq	memcpy@PLT
	movq	_ZN6Halide7Runtime8Internal19halide_trace_bufferE@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rax
	mfence
	lock		decl	(%rax)
	cmpl	$9, 36(%r14)
	jne	.LBB85_130
# %bb.34:                               # %if.then57
	movq	(%rcx), %rbx
	movl	$-2147483648, %ecx              # imm = 0x80000000
	.p2align	4, 0x90
.LBB85_35:                              # %while.body.i.i
                                        # =>This Inner Loop Header: Depth=1
	lock		orl	$1073741824, (%rbx)     # imm = 0x40000000
	movl	$1073741824, %eax               # imm = 0x40000000
	lock		cmpxchgl	%ecx, (%rbx)
	jne	.LBB85_35
# %bb.36:                               # %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
	movl	4(%rbx), %r14d
	testl	%r14d, %r14d
	je	.LBB85_39
# %bb.37:                               # %if.then.i
	subl	8(%rbx), %r14d
	movl	%r14d, 4(%rbx)
	leaq	12(%rbx), %rsi
	movl	-48(%rbp), %edi                 # 4-byte Reload
	movq	%r14, %rdx
	callq	write@PLT
	movq	$0, 4(%rbx)
	lock		andl	$2147483647, (%rbx)     # imm = 0x7FFFFFFF
	cmpl	%eax, %r14d
	je	.LBB85_130
# %bb.38:                               # %if.then10.i
	leaq	.L.str.32(%rip), %rsi
	movq	-56(%rbp), %rdi                 # 8-byte Reload
	callq	halide_print@PLT
	callq	abort@PLT
	jmp	.LBB85_130
.LBB85_39:                              # %do.end.critedge.i
	lock		andl	$2147483647, (%rbx)     # imm = 0x7FFFFFFF
	jmp	.LBB85_130
.LBB85_70:                              # %if.then176.peel
	cmpl	$8, %r15d
	je	.LBB85_76
# %bb.71:                               # %if.then176.peel
	cmpl	$16, %r15d
	je	.LBB85_75
# %bb.72:                               # %if.then176.peel
	cmpl	$32, %r15d
	jne	.LBB85_77
# %bb.73:                               # %if.then194.peel
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	movl	(%rax), %edx
	jmp	.LBB85_74
.LBB85_61:                              # %do.body213.peel
	cmpl	$15, %r15d
	jg	.LBB85_63
# %bb.62:                               # %if.then215.peel
	leaq	.L.str.24(%rip), %rsi
	movq	-56(%rbp), %rdi                 # 8-byte Reload
	callq	halide_print@PLT
	callq	abort@PLT
.LBB85_63:                              # %do.end218.peel
	cmpl	$32, %r15d
	je	.LBB85_66
# %bb.64:                               # %do.end218.peel
	cmpl	$16, %r15d
	jne	.LBB85_67
# %bb.65:                               # %if.then227.peel
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rax), %edi
	callq	halide_float16_bits_to_double@PLT
	jmp	.LBB85_68
.LBB85_60:                              # %if.then244.peel
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	movq	(%rax), %rdx
	movq	%r12, %rdi
	movq	%r13, %rsi
	callq	halide_pointer_to_string@PLT
	jmp	.LBB85_86
.LBB85_66:                              # %if.then220.peel
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	vmovss	(%rax), %xmm0                   # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	%r12, %rdi
	movq	%r13, %rsi
	xorl	%edx, %edx
	callq	halide_double_to_string@PLT
	jmp	.LBB85_86
.LBB85_67:                              # %if.else232.peel
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	vmovsd	(%rax), %xmm0                   # xmm0 = mem[0],zero
.LBB85_68:                              # %for.inc253.peelthread-pre-split
	movq	%r12, %rdi
	movq	%r13, %rsi
	movl	$1, %edx
	callq	halide_double_to_string@PLT
	jmp	.LBB85_86
.LBB85_83:                              # %if.then142.peel
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	movsbq	(%rax), %rdx
	jmp	.LBB85_85
.LBB85_82:                              # %if.then150.peel
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	movswq	(%rax), %rdx
	jmp	.LBB85_85
.LBB85_84:                              # %if.else163.peel
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	movq	(%rax), %rdx
	jmp	.LBB85_85
.LBB85_76:                              # %if.then178.peel
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	movzbl	(%rax), %edx
	jmp	.LBB85_85
.LBB85_75:                              # %if.then186.peel
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rax), %edx
.LBB85_85:                              # %for.inc253.peelthread-pre-split
	movq	%r12, %rdi
	movq	%r13, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	jmp	.LBB85_86
.LBB85_77:                              # %if.else199.peel
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	movq	(%rax), %rdx
.LBB85_74:                              # %for.inc253.peelthread-pre-split
	movq	%r12, %rdi
	movq	%r13, %rsi
	movl	$1, %ecx
	callq	halide_uint64_to_string@PLT
.LBB85_86:                              # %for.inc253.peelthread-pre-split
	movq	%rax, %r12
	movq	-64(%rbp), %rax                 # 8-byte Reload
	movzwl	34(%rax), %eax
.LBB85_87:                              # %for.inc253.peel
	cmpw	$2, %ax
	jb	.LBB85_93
# %bb.88:                               # %if.end136.preheader
	movl	$1, %r14d
	movq	-64(%rbp), %rbx                 # 8-byte Reload
	jmp	.LBB85_89
.LBB85_112:                             # %if.then186
                                        #   in Loop: Header=BB85_89 Depth=1
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rax,%r14,2), %edx
	.p2align	4, 0x90
.LBB85_104:                             # %for.inc253
                                        #   in Loop: Header=BB85_89 Depth=1
	movq	%r12, %rdi
	movq	%r13, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
.LBB85_126:                             # %for.inc253
                                        #   in Loop: Header=BB85_89 Depth=1
	movq	%rax, %r12
.LBB85_127:                             # %for.inc253
                                        #   in Loop: Header=BB85_89 Depth=1
	incq	%r14
	movq	-64(%rbp), %rbx                 # 8-byte Reload
	movzwl	34(%rbx), %eax
	cmpq	%rax, %r14
	jae	.LBB85_91
.LBB85_89:                              # %if.end136
                                        # =>This Inner Loop Header: Depth=1
	movq	%r12, %rdi
	movq	%r13, %rsi
	leaq	.L.str.55(%rip), %rdx
	callq	halide_string_to_string@PLT
	movq	%rax, %r12
	movzbl	32(%rbx), %eax
	cmpq	$3, %rax
	ja	.LBB85_127
# %bb.90:                               # %if.end136
                                        #   in Loop: Header=BB85_89 Depth=1
	leaq	.LJTI85_1(%rip), %rcx
	movslq	(%rcx,%rax,4), %rax
	addq	%rcx, %rax
	jmpq	*%rax
.LBB85_100:                             # %if.then140
                                        #   in Loop: Header=BB85_89 Depth=1
	cmpl	$32, %r15d
	je	.LBB85_106
# %bb.101:                              # %if.then140
                                        #   in Loop: Header=BB85_89 Depth=1
	cmpl	$16, %r15d
	je	.LBB85_105
# %bb.102:                              # %if.then140
                                        #   in Loop: Header=BB85_89 Depth=1
	cmpl	$8, %r15d
	jne	.LBB85_107
# %bb.103:                              # %if.then142
                                        #   in Loop: Header=BB85_89 Depth=1
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	movsbq	(%rax,%r14), %rdx
	jmp	.LBB85_104
	.p2align	4, 0x90
.LBB85_108:                             # %if.then176
                                        #   in Loop: Header=BB85_89 Depth=1
	cmpl	$32, %r15d
	je	.LBB85_113
# %bb.109:                              # %if.then176
                                        #   in Loop: Header=BB85_89 Depth=1
	cmpl	$16, %r15d
	je	.LBB85_112
# %bb.110:                              # %if.then176
                                        #   in Loop: Header=BB85_89 Depth=1
	cmpl	$8, %r15d
	jne	.LBB85_115
# %bb.111:                              # %if.then178
                                        #   in Loop: Header=BB85_89 Depth=1
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	movzbl	(%rax,%r14), %edx
	jmp	.LBB85_104
	.p2align	4, 0x90
.LBB85_116:                             # %do.body213
                                        #   in Loop: Header=BB85_89 Depth=1
	cmpl	$15, %r15d
	jg	.LBB85_118
# %bb.117:                              # %if.then215
                                        #   in Loop: Header=BB85_89 Depth=1
	movq	-56(%rbp), %rdi                 # 8-byte Reload
	leaq	.L.str.24(%rip), %rsi
	callq	halide_print@PLT
	callq	abort@PLT
.LBB85_118:                             # %do.end218
                                        #   in Loop: Header=BB85_89 Depth=1
	cmpl	$16, %r15d
	je	.LBB85_121
# %bb.119:                              # %do.end218
                                        #   in Loop: Header=BB85_89 Depth=1
	cmpl	$32, %r15d
	jne	.LBB85_122
# %bb.120:                              # %if.then220
                                        #   in Loop: Header=BB85_89 Depth=1
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	vmovss	(%rax,%r14,4), %xmm0            # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	%r12, %rdi
	movq	%r13, %rsi
	xorl	%edx, %edx
	callq	halide_double_to_string@PLT
	jmp	.LBB85_126
	.p2align	4, 0x90
.LBB85_125:                             # %if.then244
                                        #   in Loop: Header=BB85_89 Depth=1
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	movq	(%rax,%r14,8), %rdx
	movq	%r12, %rdi
	movq	%r13, %rsi
	callq	halide_pointer_to_string@PLT
	jmp	.LBB85_126
.LBB85_121:                             # %if.then227
                                        #   in Loop: Header=BB85_89 Depth=1
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	movzwl	(%rax,%r14,2), %edi
	callq	halide_float16_bits_to_double@PLT
	jmp	.LBB85_123
.LBB85_122:                             # %if.else232
                                        #   in Loop: Header=BB85_89 Depth=1
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	vmovsd	(%rax,%r14,8), %xmm0            # xmm0 = mem[0],zero
.LBB85_123:                             # %for.inc253
                                        #   in Loop: Header=BB85_89 Depth=1
	movq	%r12, %rdi
	movq	%r13, %rsi
	movl	$1, %edx
	callq	halide_double_to_string@PLT
	jmp	.LBB85_126
.LBB85_106:                             # %if.then158
                                        #   in Loop: Header=BB85_89 Depth=1
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	movslq	(%rax,%r14,4), %rdx
	jmp	.LBB85_104
.LBB85_105:                             # %if.then150
                                        #   in Loop: Header=BB85_89 Depth=1
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	movswq	(%rax,%r14,2), %rdx
	jmp	.LBB85_104
.LBB85_113:                             # %if.then194
                                        #   in Loop: Header=BB85_89 Depth=1
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	movl	(%rax,%r14,4), %edx
	jmp	.LBB85_114
.LBB85_107:                             # %if.else163
                                        #   in Loop: Header=BB85_89 Depth=1
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	movq	(%rax,%r14,8), %rdx
	jmp	.LBB85_104
.LBB85_115:                             # %if.else199
                                        #   in Loop: Header=BB85_89 Depth=1
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	movq	(%rax,%r14,8), %rdx
.LBB85_114:                             # %for.inc253
                                        #   in Loop: Header=BB85_89 Depth=1
	movq	%r12, %rdi
	movq	%r13, %rsi
	movl	$1, %ecx
	callq	halide_uint64_to_string@PLT
	jmp	.LBB85_126
.LBB85_91:                              # %for.cond.cleanup131
	cmpw	$1, %ax
	jbe	.LBB85_93
# %bb.92:                               # %if.then260
	leaq	.L.str.25(%rip), %rdx
	movq	%r12, %rdi
	movq	%r13, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %r12
.LBB85_93:                              # %if.end263
	movq	-64(%rbp), %rax                 # 8-byte Reload
	movq	24(%rax), %rax
	testq	%rax, %rax
	je	.LBB85_96
# %bb.94:                               # %land.lhs.true266
	cmpb	$0, (%rax)
	je	.LBB85_96
# %bb.95:                               # %if.then269
	leaq	.L.str.26(%rip), %rdx
	movq	%r12, %rdi
	movq	%r13, %rsi
	callq	halide_string_to_string@PLT
	movq	-64(%rbp), %rcx                 # 8-byte Reload
	movq	24(%rcx), %rdx
	movq	%rax, %rdi
	movq	%r13, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.27(%rip), %rdx
	movq	%rax, %rdi
	movq	%r13, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %r12
.LBB85_96:                              # %if.end274
	leaq	.L.str.4.215(%rip), %rdx
	movq	%r12, %rdi
	movq	%r13, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %r14
	movq	_ZN6Halide7Runtime8Internal22halide_trace_file_lockE@GOTPCREL(%rip), %rbx
	.p2align	4, 0x90
.LBB85_97:                              # %while.cond.i414
                                        # =>This Inner Loop Header: Depth=1
	movb	$1, %al
	xchgb	%al, (%rbx)
	testb	%al, %al
	jne	.LBB85_97
# %bb.98:                               # %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
	movq	-80(%rbp), %r12                 # 8-byte Reload
	testq	%r12, %r12
	je	.LBB85_99
# %bb.128:                              # %if.else.i564
	subq	%r12, %r14
	incq	%r14
	movq	-56(%rbp), %r15                 # 8-byte Reload
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r15, %rdi
	movq	%r12, %rsi
	callq	halide_print@PLT
	movb	$0, (%rbx)
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	jmp	.LBB85_129
.LBB85_99:                              # %if.then.i558
	leaq	.L.str.274(%rip), %r14
	movq	-56(%rbp), %r15                 # 8-byte Reload
	movq	%r15, %rdi
	movq	%r14, %rsi
	callq	halide_print@PLT
	movb	$0, (%rbx)
	movq	%r15, %rdi
	movq	%r14, %rsi
	callq	halide_error@PLT
.LBB85_129:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit
	movq	%r12, %rdi
	callq	free@PLT
	movl	-68(%rbp), %r15d                # 4-byte Reload
.LBB85_130:                             # %if.end277
	movl	%r15d, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end85:
	.size	halide_default_trace, .Lfunc_end85-halide_default_trace
	.section	.rodata.halide_default_trace,"a",@progbits
	.p2align	2
.LJTI85_0:
	.long	.LBB85_78-.LJTI85_0
	.long	.LBB85_70-.LJTI85_0
	.long	.LBB85_61-.LJTI85_0
	.long	.LBB85_60-.LJTI85_0
.LJTI85_1:
	.long	.LBB85_100-.LJTI85_1
	.long	.LBB85_108-.LJTI85_1
	.long	.LBB85_116-.LJTI85_1
	.long	.LBB85_125-.LJTI85_1
                                        # -- End function
	.section	.text.halide_get_trace_file,"ax",@progbits
	.weak	halide_get_trace_file           # -- Begin function halide_get_trace_file
	.p2align	4, 0x90
	.type	halide_get_trace_file,@function
halide_get_trace_file:                  # @halide_get_trace_file
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	movq	%rdi, %r14
	movq	_ZN6Halide7Runtime8Internal22halide_trace_file_lockE@GOTPCREL(%rip), %rbx
	.p2align	4, 0x90
.LBB86_1:                               # %while.cond.i
                                        # =>This Inner Loop Header: Depth=1
	movb	$1, %al
	xchgb	%al, (%rbx)
	testb	%al, %al
	jne	.LBB86_1
# %bb.2:                                # %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
	movq	_ZN6Halide7Runtime8Internal17halide_trace_fileE@GOTPCREL(%rip), %r12
	cmpl	$0, (%r12)
	js	.LBB86_3
.LBB86_9:                               # %if.end11
	movl	(%r12), %eax
	movb	$0, (%rbx)
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB86_3:                               # %if.then
	leaq	.L.str.28(%rip), %rdi
	callq	getenv@PLT
	testq	%rax, %rax
	je	.LBB86_8
# %bb.4:                                # %if.then1
	leaq	.L.str.29(%rip), %rsi
	movq	%rax, %rdi
	callq	fopen@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB86_6
# %bb.5:                                # %if.then4
	leaq	.L.str.30(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
.LBB86_6:                               # %do.end
	movq	%r15, %rdi
	callq	fileno@PLT
	movl	%eax, %edi
	callq	halide_set_trace_file@PLT
	movq	_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	movq	_ZN6Halide7Runtime8Internal19halide_trace_bufferE@GOTPCREL(%rip), %r14
	cmpq	$0, (%r14)
	jne	.LBB86_9
# %bb.7:                                # %if.then7
	movl	$1048588, %edi                  # imm = 0x10000C
	callq	malloc@PLT
	movq	%rax, (%r14)
	movq	$0, 4(%rax)
	movl	$0, (%rax)
	jmp	.LBB86_9
.LBB86_8:                               # %if.else
	xorl	%edi, %edi
	callq	halide_set_trace_file@PLT
	jmp	.LBB86_9
.Lfunc_end86:
	.size	halide_get_trace_file, .Lfunc_end86-halide_get_trace_file
                                        # -- End function
	.section	.text.halide_set_trace_file,"ax",@progbits
	.weak	halide_set_trace_file           # -- Begin function halide_set_trace_file
	.p2align	4, 0x90
	.type	halide_set_trace_file,@function
halide_set_trace_file:                  # @halide_set_trace_file
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal17halide_trace_fileE@GOTPCREL(%rip), %rax
	movl	%edi, (%rax)
	popq	%rbp
	retq
.Lfunc_end87:
	.size	halide_set_trace_file, .Lfunc_end87-halide_set_trace_file
                                        # -- End function
	.section	.text.halide_trace_cleanup,"ax",@progbits
	.weak	halide_trace_cleanup            # -- Begin function halide_trace_cleanup
	.p2align	4, 0x90
	.type	halide_trace_cleanup,@function
halide_trace_cleanup:                   # @halide_trace_cleanup
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	popq	%rbp
	jmp	halide_shutdown_trace@PLT       # TAILCALL
.Lfunc_end88:
	.size	halide_trace_cleanup, .Lfunc_end88-halide_trace_cleanup
                                        # -- End function
	.section	.text.halide_shutdown_trace,"ax",@progbits
	.weak	halide_shutdown_trace           # -- Begin function halide_shutdown_trace
	.p2align	4, 0x90
	.type	halide_shutdown_trace,@function
halide_shutdown_trace:                  # @halide_shutdown_trace
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE@GOTPCREL(%rip), %r14
	movq	(%r14), %rdi
	testq	%rdi, %rdi
	je	.LBB89_1
# %bb.2:                                # %if.then
	callq	fclose@PLT
	movl	%eax, %ebx
	movq	_ZN6Halide7Runtime8Internal17halide_trace_fileE@GOTPCREL(%rip), %rax
	movl	$0, (%rax)
	movq	_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE@GOTPCREL(%rip), %rax
	movb	$0, (%rax)
	movq	$0, (%r14)
	movq	_ZN6Halide7Runtime8Internal19halide_trace_bufferE@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
	testq	%rdi, %rdi
	je	.LBB89_4
# %bb.3:                                # %if.then2
	callq	free@PLT
	jmp	.LBB89_4
.LBB89_1:
	xorl	%ebx, %ebx
.LBB89_4:                               # %return
	movl	%ebx, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end89:
	.size	halide_shutdown_trace, .Lfunc_end89-halide_shutdown_trace
                                        # -- End function
	.section	.text.halide_set_custom_trace,"ax",@progbits
	.weak	halide_set_custom_trace         # -- Begin function halide_set_custom_trace
	.p2align	4, 0x90
	.type	halide_set_custom_trace,@function
halide_set_custom_trace:                # @halide_set_custom_trace
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal19halide_custom_traceE@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rax
	movq	%rdi, (%rcx)
	popq	%rbp
	retq
.Lfunc_end90:
	.size	halide_set_custom_trace, .Lfunc_end90-halide_set_custom_trace
                                        # -- End function
	.section	.text.halide_trace,"ax",@progbits
	.weak	halide_trace                    # -- Begin function halide_trace
	.p2align	4, 0x90
	.type	halide_trace,@function
halide_trace:                           # @halide_trace
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal19halide_custom_traceE@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	popq	%rbp
	jmpq	*%rax                           # TAILCALL
.Lfunc_end91:
	.size	halide_trace, .Lfunc_end91-halide_trace
                                        # -- End function
	.section	.text.halide_trace_helper,"ax",@progbits
	.weak	halide_trace_helper             # -- Begin function halide_trace_helper
	.p2align	4, 0x90
	.type	halide_trace_helper,@function
halide_trace_helper:                    # @halide_trace_helper
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$56, %rsp
	movl	%r9d, %r13d
	movq	%rcx, %r14
	movq	%rdx, %r12
	movq	%rdi, %r15
	movslq	48(%rbp), %rbx
	movl	40(%rbp), %r9d
	movl	32(%rbp), %ecx
	movl	24(%rbp), %edx
	movl	16(%rbp), %eax
	movq	56(%rbp), %rdi
	movq	%rsi, -96(%rbp)
	movq	%r12, -88(%rbp)
	movq	%r14, -80(%rbp)
	movq	%rdi, -72(%rbp)
	movb	%r8b, -64(%rbp)
	movb	%r13b, -63(%rbp)
	movw	%ax, -62(%rbp)
	movl	%edx, -60(%rbp)
	movl	%ecx, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	%ebx, -48(%rbp)
	leaq	-96(%rbp), %rsi
	movl	$56, %edx
	movq	%r15, %rdi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movl	%r13d, %eax
	addl	$7, %eax
	cmovnsl	%r13d, %eax
	addl	$7, %eax
	sarl	$3, %eax
	imull	16(%rbp), %eax
	movslq	%eax, %rdx
	movq	%r15, %rdi
	movq	%r12, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	shlq	$2, %rbx
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r15, %rdi
	leaq	-96(%rbp), %rsi
	callq	halide_trace@PLT
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end92:
	.size	halide_trace_helper, .Lfunc_end92-halide_trace_helper
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal9ends_withEPKcS3_,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal9ends_withEPKcS3_ # -- Begin function _ZN6Halide7Runtime8Internal9ends_withEPKcS3_
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal9ends_withEPKcS3_,@function
_ZN6Halide7Runtime8Internal9ends_withEPKcS3_: # @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	$-2, %rax
	.p2align	4, 0x90
.LBB93_1:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpb	$0, 2(%rdi,%rax)
	leaq	1(%rax), %rax
	jne	.LBB93_1
# %bb.2:                                # %while.cond1.preheader
	movq	$-2, %rcx
	.p2align	4, 0x90
.LBB93_3:                               # %while.cond1
                                        # =>This Inner Loop Header: Depth=1
	cmpb	$0, 2(%rsi,%rcx)
	leaq	1(%rcx), %rcx
	jne	.LBB93_3
# %bb.4:                                # %while.cond6.preheader
	xorl	%r8d, %r8d
	cmpq	$-1, %rcx
	je	.LBB93_5
# %bb.7:                                # %while.cond6.preheader
	movl	$0, %edx
	cmpq	$-1, %rax
	je	.LBB93_6
	.p2align	4, 0x90
.LBB93_8:                               # %if.end
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rdi,%rax), %edx
	movzbl	(%rsi,%rcx), %r8d
	testq	%rcx, %rcx
	je	.LBB93_6
# %bb.9:                                # %if.end
                                        #   in Loop: Header=BB93_8 Depth=1
	testq	%rax, %rax
	je	.LBB93_6
# %bb.10:                               # %if.end.while.body8_crit_edge
                                        #   in Loop: Header=BB93_8 Depth=1
	decq	%rax
	decq	%rcx
	cmpb	%r8b, %dl
	je	.LBB93_8
# %bb.11:
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	popq	%rbp
	retq
.LBB93_5:
	xorl	%edx, %edx
.LBB93_6:                               # %while.end13
	cmpb	%r8b, %dl
	sete	%al
                                        # kill: def $al killed $al killed $eax
	popq	%rbp
	retq
.Lfunc_end93:
	.size	_ZN6Halide7Runtime8Internal9ends_withEPKcS3_, .Lfunc_end93-_ZN6Halide7Runtime8Internal9ends_withEPKcS3_
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5                               # -- Begin function halide_debug_to_file
.LCPI94_0:
	.long	327962                          # 0x5011a
	.long	1                               # 0x1
	.long	194                             # 0xc2
	.long	327963                          # 0x5011b
	.long	1                               # 0x1
	.long	202                             # 0xca
	.long	196892                          # 0x3011c
	.long	1                               # 0x1
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI94_1:
	.long	0                               # 0x0
	.long	1                               # 0x1
	.long	1                               # 0x1
	.long	1                               # 0x1
	.section	.text.halide_debug_to_file,"ax",@progbits
	.weak	halide_debug_to_file
	.p2align	4, 0x90
	.type	halide_debug_to_file,@function
halide_debug_to_file:                   # @halide_debug_to_file
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$4424, %rsp                     # imm = 0x1148
	movq	%rcx, %rbx
	movl	%edx, %r15d
	movq	%rsi, %r14
	movq	%rdi, %r13
	cmpq	$0, 16(%rcx)
	jne	.LBB94_4
# %bb.1:                                # %entry
	cmpq	$0, (%rbx)
	jne	.LBB94_4
# %bb.2:                                # %if.then
	leaq	.L.str.34(%rip), %rsi
	jmp	.LBB94_3
.LBB94_4:                               # %if.end
	cmpl	$5, 36(%rbx)
	jl	.LBB94_6
# %bb.5:                                # %if.then1
	leaq	.L.str.1.35(%rip), %rsi
.LBB94_3:                               # %return
	movq	%r13, %rdi
	callq	halide_error@PLT
	movl	$-1, %r12d
.LBB94_173:                             # %return
	movl	%r12d, %eax
	addq	$4424, %rsp                     # imm = 0x1148
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB94_6:                               # %if.end2
	movq	%r13, %rdi
	movq	%rbx, %rsi
	callq	halide_copy_to_host@PLT
	movl	%eax, %r12d
	testl	%eax, %eax
	jne	.LBB94_173
# %bb.7:                                # %if.end6
	leaq	.L.str.2.36(%rip), %rsi
	movq	%r14, %rdi
	callq	fopen@PLT
	testq	%rax, %rax
	je	.LBB94_8
# %bb.9:                                # %if.end9
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%ymm0, -144(%rbp)
	vmovups	%ymm0, -112(%rbp)
	movslq	36(%rbx), %r8
	testq	%r8, %r8
	movq	%rbx, -64(%rbp)                 # 8-byte Spill
	jle	.LBB94_10
# %bb.11:                               # %for.body.lr.ph
	movq	40(%rbx), %rcx
	leal	-1(%r8), %esi
	cmpl	$3, %esi
	movl	$3, %edx
	cmovbl	%esi, %edx
	vmovups	(%rcx), %xmm0
	vmovaps	%xmm0, -144(%rbp)
	movl	-140(%rbp), %r12d
	testl	%edx, %edx
	je	.LBB94_12
# %bb.174:                              # %for.body.1
	vmovups	16(%rcx), %xmm0
	vmovaps	%xmm0, -128(%rbp)
	incl	%edx
	movl	-124(%rbp), %esi
	imulq	%rsi, %r12
	cmpl	$2, %edx
	je	.LBB94_12
# %bb.175:                              # %for.body.2
	vmovups	32(%rcx), %xmm0
	vmovaps	%xmm0, -112(%rbp)
	movl	-108(%rbp), %esi
	imulq	%rsi, %r12
	cmpl	$3, %edx
	je	.LBB94_12
# %bb.176:                              # %for.body.3
	vmovups	48(%rcx), %xmm0
	vmovaps	%xmm0, -96(%rbp)
	movl	-92(%rbp), %ecx
	imulq	%rcx, %r12
.LBB94_12:                              # %for.cond19.preheader
	cmpl	$3, %r8d
	jle	.LBB94_13
	jmp	.LBB94_20
.LBB94_8:
	movl	$-2, %r12d
	jmp	.LBB94_173
.LBB94_10:
	movl	$1, %r12d
.LBB94_13:                              # %for.body22.preheader
	movl	$3, %edx
	subl	%r8d, %edx
	movl	%r8d, %esi
	negl	%esi
	movabsq	$4294967296, %rcx               # imm = 0x100000000
	andl	$3, %esi
	je	.LBB94_17
# %bb.14:                               # %for.body22.prol.preheader
	movq	%r8, %rdi
	shlq	$4, %rdi
	addq	%rbp, %rdi
	addq	$-136, %rdi
	negl	%esi
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB94_15:                              # %for.body22.prol
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, -8(%rdi)
	movl	$0, (%rdi)
	decq	%rbx
	addq	$16, %rdi
	cmpl	%ebx, %esi
	jne	.LBB94_15
# %bb.16:                               # %for.body22.prol.loopexit.loopexit
	subq	%rbx, %r8
	movq	-64(%rbp), %rbx                 # 8-byte Reload
.LBB94_17:                              # %for.body22.prol.loopexit
	cmpl	$3, %edx
	jb	.LBB94_20
# %bb.18:                               # %for.body22.preheader3
	leal	-4(%r8), %edx
	shlq	$4, %r8
	leaq	-144(%rbp), %rsi
	addq	%r8, %rsi
	addq	$56, %rsi
	.p2align	4, 0x90
.LBB94_19:                              # %for.body22
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, -56(%rsi)
	movl	$0, -48(%rsi)
	movq	%rcx, -40(%rsi)
	movl	$0, -32(%rsi)
	movq	%rcx, -24(%rsi)
	movl	$0, -16(%rsi)
	movq	%rcx, -8(%rsi)
	movl	$0, (%rsi)
	addq	$64, %rsi
	addl	$4, %edx
	jne	.LBB94_19
.LBB94_20:                              # %for.cond.cleanup21
	movl	%r15d, -56(%rbp)                # 4-byte Spill
	movq	%rax, -80(%rbp)                 # 8-byte Spill
	movzbl	33(%rbx), %r15d
	addq	$7, %r15
	movq	%r15, %rax
	shrq	$3, %rax
	movq	%rax, -48(%rbp)                 # 8-byte Spill
	leaq	.L.str.3.37(%rip), %rsi
	movq	%r14, %rdi
	vzeroupper
	callq	_ZN6Halide7Runtime8Internal9ends_withEPKcS3_@PLT
	testb	%al, %al
	jne	.LBB94_22
# %bb.21:                               # %lor.lhs.false
	leaq	.L.str.4.38(%rip), %rsi
	movq	%r14, %rdi
	callq	_ZN6Halide7Runtime8Internal9ends_withEPKcS3_@PLT
	testb	%al, %al
	je	.LBB94_35
.LBB94_22:                              # %if.then36
	movl	-140(%rbp), %ecx
	movl	-124(%rbp), %eax
	movl	-92(%rbp), %r13d
	cmpl	$2, %r13d
	setb	%dl
	movl	-108(%rbp), %esi
	cmpl	$5, %esi
	setl	%bl
	testb	%bl, %dl
	movq	%r12, %rdi
	movl	$1, %r12d
	cmovel	%esi, %r12d
	cmovnel	%esi, %r13d
	movabsq	$34362509641, %rdx              # imm = 0x8002A4949
	movq	%rdx, -4464(%rbp)
	movl	$16777231, -4456(%rbp)          # imm = 0x100000F
	movw	$4, -4452(%rbp)
	movl	$1, -4450(%rbp)
	movl	%ecx, -4446(%rbp)
	movabsq	$4295229697, %rcx               # imm = 0x100040101
	movq	%rcx, -4442(%rbp)
	movl	%eax, -4434(%rbp)
	andl	$-8, %r15d
	movabsq	$4295164162, %rcx               # imm = 0x100030102
	movq	%rcx, -4430(%rbp)
	movw	%r15w, -4422(%rbp)
	movabsq	$4295164163, %rcx               # imm = 0x100030103
	movq	%rcx, -4418(%rbp)
	movw	$1, -4410(%rbp)
	xorl	%ecx, %ecx
	cmpl	$3, %r13d
	setge	%cl
	incl	%ecx
	movabsq	$4295164166, %rdx               # imm = 0x100030106
	movq	%rdx, -4406(%rbp)
	movw	%cx, -4398(%rbp)
	movl	$262417, -4394(%rbp)            # imm = 0x40111
	movl	%r13d, -4390(%rbp)
	movabsq	$845614636073170, %rcx          # imm = 0x30115000000D2
	movq	%rcx, -4386(%rbp)
	movl	$1, -4378(%rbp)
	movw	%r13w, -4374(%rbp)
	movabsq	$4295229718, %rcx               # imm = 0x100040116
	movq	%rcx, -4370(%rbp)
	movq	-48(%rbp), %r14                 # 8-byte Reload
	imull	%r14d, %edi
	cmpl	$1, %r13d
	leal	210(,%r13,4), %ecx
	cmovel	%edi, %ecx
	movl	%eax, -4362(%rbp)
	movl	$262423, -4358(%rbp)            # imm = 0x40117
	movl	%r13d, -4354(%rbp)
	movl	%ecx, -4350(%rbp)
	vmovaps	.LCPI94_0(%rip), %ymm0          # ymm0 = [327962,1,194,327963,1,202,196892,1]
	vmovups	%ymm0, -4346(%rbp)
	movw	$2, -4314(%rbp)
	movabsq	$4295164200, %rax               # imm = 0x100030128
	movq	%rax, -4310(%rbp)
	movw	$1, -4302(%rbp)
	movslq	-56(%rbp), %rax                 # 4-byte Folded Reload
	movq	_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE@GOTPCREL(%rip), %rcx
	movzwl	(%rcx,%rax,2), %eax
	movabsq	$4295164243, %rcx               # imm = 0x100030153
	movq	%rcx, -4298(%rbp)
	movw	%ax, -4290(%rbp)
	movabsq	$4295262437, %rax               # imm = 0x1000480E5
	movq	%rax, -4286(%rbp)
	movl	%r12d, -4278(%rbp)
	vmovaps	.LCPI94_1(%rip), %xmm0          # xmm0 = [0,1,1,1]
	vmovups	%xmm0, -4274(%rbp)
	movl	$1, -4258(%rbp)
	leaq	-4464(%rbp), %rdi
	movl	$210, %esi
	movl	$1, %edx
	movq	-80(%rbp), %r15                 # 8-byte Reload
	movq	%r15, %rcx
	vzeroupper
	callq	fwrite@PLT
	testq	%rax, %rax
	je	.LBB94_23
# %bb.24:                               # %if.end103
	cmpl	$2, %r13d
	jl	.LBB94_34
# %bb.25:                               # %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit672.preheader
	leal	210(,%r13,8), %eax
	movl	%eax, -368(%rbp)
	imull	%r14d, %r12d
	leaq	-368(%rbp), %r14
	movl	%r13d, %ebx
	.p2align	4, 0x90
.LBB94_26:                              # %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit672
                                        # =>This Inner Loop Header: Depth=1
	movl	$4, %esi
	movl	$1, %edx
	movq	%r14, %rdi
	movq	%r15, %rcx
	callq	fwrite@PLT
	testq	%rax, %rax
	je	.LBB94_27
# %bb.28:                               # %if.end118
                                        #   in Loop: Header=BB94_26 Depth=1
	movl	-140(%rbp), %eax
	imull	%r12d, %eax
	imull	-124(%rbp), %eax
	addl	%eax, -368(%rbp)
	decl	%ebx
	jne	.LBB94_26
# %bb.29:                               # %for.end129
	movl	%eax, -212(%rbp)
	leaq	-212(%rbp), %r14
.LBB94_31:                              # %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit679
                                        # =>This Inner Loop Header: Depth=1
	movl	$4, %esi
	movl	$1, %edx
	movq	%r14, %rdi
	movq	%r15, %rcx
	callq	fwrite@PLT
	testq	%rax, %rax
	je	.LBB94_32
# %bb.30:                               # %for.cond138
                                        #   in Loop: Header=BB94_31 Depth=1
	decl	%r13d
	jne	.LBB94_31
# %bb.33:                               # %cleanup151
	movq	-48(%rbp), %r14                 # 8-byte Reload
.LBB94_34:                              # %cleanup154.thread
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rbx                 # 8-byte Reload
	jmp	.LBB94_133
.LBB94_23:
	movl	$-3, %r12d
	jmp	.LBB94_172
.LBB94_35:                              # %if.else164
	leaq	.L.str.5.39(%rip), %rsi
	movq	%r14, %rdi
	callq	_ZN6Halide7Runtime8Internal9ends_withEPKcS3_@PLT
	testb	%al, %al
	je	.LBB94_143
# %bb.36:                               # %while.cond.preheader
	xorl	%eax, %eax
	movq	-80(%rbp), %r15                 # 8-byte Reload
	.p2align	4, 0x90
.LBB94_37:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpb	$0, (%r14,%rax)
	leaq	1(%rax), %rax
	jne	.LBB94_37
	.p2align	4, 0x90
.LBB94_38:                              # %while.body171
                                        # =>This Inner Loop Header: Depth=1
	cmpb	$46, -2(%r14,%rax)
	leaq	-1(%rax), %rax
	jne	.LBB94_38
# %bb.39:                               # %while.cond174.preheader
	movq	%rax, %rcx
	negq	%rcx
	movl	$1, %edx
	subq	%rax, %rdx
	xorl	%r12d, %r12d
.LBB94_40:                              # %while.cond174
                                        # =>This Inner Loop Header: Depth=1
	testq	%rdx, %rdx
	je	.LBB94_41
# %bb.42:                               # %land.rhs176
                                        #   in Loop: Header=BB94_40 Depth=1
	leaq	(%r14,%r12), %rsi
	decq	%r12
	incq	%rdx
	cmpb	$47, -2(%rax,%rsi)
	jne	.LBB94_40
	jmp	.LBB94_43
.LBB94_143:                             # %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit728
	movl	-140(%rbp), %eax
	movl	-124(%rbp), %ecx
	movl	%eax, -4464(%rbp)
	movl	%ecx, -4460(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -4456(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -4452(%rbp)
	movl	-56(%rbp), %eax                 # 4-byte Reload
	movl	%eax, -4448(%rbp)
	leaq	-4464(%rbp), %rdi
	movl	$20, %esi
	movl	$1, %edx
	movq	-80(%rbp), %r15                 # 8-byte Reload
	movq	%r15, %rcx
	callq	fwrite@PLT
	xorl	%ecx, %ecx
	testq	%rax, %rax
	movq	-48(%rbp), %r14                 # 8-byte Reload
	jne	.LBB94_133
# %bb.144:
	movl	$-12, %r12d
	jmp	.LBB94_172
.LBB94_27:
	movl	$-4, %r12d
	jmp	.LBB94_172
.LBB94_41:
	movq	%rcx, %r12
.LBB94_43:                              # %while.end183
	cmpq	$-1, %r12
	je	.LBB94_44
# %bb.45:                               # %while.body187.preheader
	cmpq	$-129, %r12
	jbe	.LBB94_47
# %bb.46:
	leaq	-4464(%rbp), %rcx
	movq	%r12, %rdx
	jmp	.LBB94_58
.LBB94_32:                              # %select.unfold
	movl	$-5, %r12d
	jmp	.LBB94_172
.LBB94_44:
	leaq	-4464(%rbp), %rcx
	jmp	.LBB94_63
.LBB94_47:                              # %vector.memcheck
	movq	%r12, %r8
	notq	%r8
	leaq	-4464(%rbp), %rcx
	leaq	(%r14,%r12), %r9
	leaq	(%r14,%rax), %rdx
	decq	%rdx
	cmpq	%rdx, %rcx
	jae	.LBB94_49
# %bb.48:                               # %vector.memcheck
	leaq	(%r8,%rbp), %rsi
	addq	$-4464, %rsi                    # imm = 0xEE90
	leaq	(%r9,%rax), %rbx
	movq	%r12, %rdx
	cmpq	%rsi, %rbx
	jb	.LBB94_58
.LBB94_49:                              # %vector.ph
	movq	%r8, %rdx
	andq	$-128, %rdx
	leaq	-128(%rdx), %rsi
	movq	%rsi, %rcx
	shrq	$7, %rcx
	incq	%rcx
	movl	%ecx, %r10d
	andl	$3, %r10d
	cmpq	$384, %rsi                      # imm = 0x180
	jae	.LBB94_51
# %bb.50:
	xorl	%esi, %esi
	jmp	.LBB94_53
.LBB94_51:                              # %vector.ph.new
	andq	$-4, %rcx
	negq	%rcx
	xorl	%esi, %esi
.LBB94_52:                              # %vector.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	(%r9,%rsi), %rdi
	vmovups	(%rax,%rdi), %ymm0
	vmovups	32(%rax,%rdi), %ymm1
	vmovups	64(%rax,%rdi), %ymm2
	vmovups	96(%rax,%rdi), %ymm3
	vmovups	%ymm0, -4464(%rbp,%rsi)
	vmovups	%ymm1, -4432(%rbp,%rsi)
	vmovups	%ymm2, -4400(%rbp,%rsi)
	vmovups	%ymm3, -4368(%rbp,%rsi)
	vmovups	128(%rax,%rdi), %ymm0
	vmovups	160(%rax,%rdi), %ymm1
	vmovups	192(%rax,%rdi), %ymm2
	vmovups	224(%rax,%rdi), %ymm3
	vmovups	%ymm0, -4336(%rbp,%rsi)
	vmovups	%ymm1, -4304(%rbp,%rsi)
	vmovups	%ymm2, -4272(%rbp,%rsi)
	vmovups	%ymm3, -4240(%rbp,%rsi)
	vmovups	256(%rax,%rdi), %ymm0
	vmovups	288(%rax,%rdi), %ymm1
	vmovups	320(%rax,%rdi), %ymm2
	vmovups	352(%rax,%rdi), %ymm3
	vmovups	%ymm0, -4208(%rbp,%rsi)
	vmovups	%ymm1, -4176(%rbp,%rsi)
	vmovups	%ymm2, -4144(%rbp,%rsi)
	vmovups	%ymm3, -4112(%rbp,%rsi)
	vmovups	384(%rax,%rdi), %ymm0
	vmovups	416(%rax,%rdi), %ymm1
	vmovups	448(%rax,%rdi), %ymm2
	vmovups	480(%rax,%rdi), %ymm3
	vmovups	%ymm0, -4080(%rbp,%rsi)
	vmovups	%ymm1, -4048(%rbp,%rsi)
	vmovups	%ymm2, -4016(%rbp,%rsi)
	vmovups	%ymm3, -3984(%rbp,%rsi)
	addq	$512, %rsi                      # imm = 0x200
	addq	$4, %rcx
	jne	.LBB94_52
.LBB94_53:                              # %middle.block.unr-lcssa
	testq	%r10, %r10
	je	.LBB94_56
# %bb.54:                               # %vector.body.epil.preheader
	leaq	(%r12,%rsi), %rdi
	leaq	-4464(%rbp), %rcx
	addq	%rsi, %rcx
	addq	$96, %rcx
	shlq	$7, %r10
	leaq	(%r14,%rdi), %rsi
	addq	$96, %rsi
	xorl	%edi, %edi
.LBB94_55:                              # %vector.body.epil
                                        # =>This Inner Loop Header: Depth=1
	leaq	(%rsi,%rdi), %rbx
	vmovups	-96(%rax,%rbx), %ymm0
	vmovups	-64(%rax,%rbx), %ymm1
	vmovups	-32(%rax,%rbx), %ymm2
	vmovups	(%rax,%rbx), %ymm3
	vmovups	%ymm0, -96(%rcx,%rdi)
	vmovups	%ymm1, -64(%rcx,%rdi)
	vmovups	%ymm2, -32(%rcx,%rdi)
	vmovups	%ymm3, (%rcx,%rdi)
	subq	$-128, %rdi
	cmpq	%rdi, %r10
	jne	.LBB94_55
.LBB94_56:                              # %middle.block
	leaq	(%rdx,%rbp), %rcx
	addq	$-4464, %rcx                    # imm = 0xEE90
	cmpq	%r8, %rdx
	je	.LBB94_62
# %bb.57:
	addq	%r12, %rdx
.LBB94_58:                              # %while.body187.preheader91
	movq	$-2, %rsi
	subq	%rdx, %rsi
	movl	%edx, %edi
	andl	$7, %edi
	cmpq	$7, %rdi
	je	.LBB94_61
# %bb.59:                               # %while.body187.prol.preheader
	xorq	$7, %rdi
.LBB94_60:                              # %while.body187.prol
                                        # =>This Inner Loop Header: Depth=1
	leaq	(%r14,%rdx), %rbx
	incq	%rdx
	movzbl	(%rax,%rbx), %ebx
	movb	%bl, (%rcx)
	incq	%rcx
	decq	%rdi
	jne	.LBB94_60
.LBB94_61:                              # %while.body187.prol.loopexit
	cmpq	$7, %rsi
	jb	.LBB94_62
.LBB94_83:                              # %while.body187
                                        # =>This Inner Loop Header: Depth=1
	leaq	(%r14,%rdx), %rsi
	movzbl	(%rax,%rsi), %ebx
	movb	%bl, (%rcx)
	movzbl	1(%rax,%rsi), %ebx
	movb	%bl, 1(%rcx)
	movzbl	2(%rax,%rsi), %ebx
	movb	%bl, 2(%rcx)
	movzbl	3(%rax,%rsi), %ebx
	movb	%bl, 3(%rcx)
	movzbl	4(%rax,%rsi), %ebx
	movb	%bl, 4(%rcx)
	movzbl	5(%rax,%rsi), %ebx
	movb	%bl, 5(%rcx)
	movzbl	6(%rax,%rsi), %ebx
	movb	%bl, 6(%rcx)
	addq	$8, %rdx
	movzbl	7(%rax,%rsi), %ebx
	movb	%bl, 7(%rcx)
	addq	$8, %rcx
	cmpq	$-1, %rdx
	jne	.LBB94_83
.LBB94_62:                              # %while.cond191.preheader
	leaq	-4208(%rbp), %rax
	cmpq	%rax, %rcx
	movq	-64(%rbp), %rbx                 # 8-byte Reload
	jae	.LBB94_71
.LBB94_63:                              # %iter.check
	leaq	-4208(%rbp), %rax
	movq	%rax, %r8
	subq	%rcx, %r8
	cmpq	$16, %r8
	jae	.LBB94_65
# %bb.64:
	movq	%rcx, %rdx
	jmp	.LBB94_70
.LBB94_65:                              # %vector.main.loop.iter.check
	cmpq	$128, %r8
	jae	.LBB94_73
# %bb.66:
	xorl	%esi, %esi
	jmp	.LBB94_67
.LBB94_73:                              # %vector.ph67
	movq	%r8, %rsi
	andq	$-128, %rsi
	leaq	-128(%rsi), %rdx
	movq	%rdx, %rdi
	shrq	$7, %rdi
	incq	%rdi
	movl	%edi, %r9d
	andl	$7, %r9d
	cmpq	$896, %rdx                      # imm = 0x380
	jae	.LBB94_75
# %bb.74:
	xorl	%edx, %edx
	jmp	.LBB94_77
.LBB94_75:                              # %vector.ph67.new
	leaq	992(%rcx), %rbx
	andq	$-8, %rdi
	negq	%rdi
	xorl	%edx, %edx
	vxorps	%xmm0, %xmm0, %xmm0
.LBB94_76:                              # %vector.body63
                                        # =>This Inner Loop Header: Depth=1
	vmovups	%ymm0, -992(%rbx,%rdx)
	vmovups	%ymm0, -960(%rbx,%rdx)
	vmovups	%ymm0, -928(%rbx,%rdx)
	vmovups	%ymm0, -896(%rbx,%rdx)
	vmovups	%ymm0, -864(%rbx,%rdx)
	vmovups	%ymm0, -832(%rbx,%rdx)
	vmovups	%ymm0, -800(%rbx,%rdx)
	vmovups	%ymm0, -768(%rbx,%rdx)
	vmovups	%ymm0, -736(%rbx,%rdx)
	vmovups	%ymm0, -704(%rbx,%rdx)
	vmovups	%ymm0, -672(%rbx,%rdx)
	vmovups	%ymm0, -640(%rbx,%rdx)
	vmovups	%ymm0, -608(%rbx,%rdx)
	vmovups	%ymm0, -576(%rbx,%rdx)
	vmovups	%ymm0, -544(%rbx,%rdx)
	vmovups	%ymm0, -512(%rbx,%rdx)
	vmovups	%ymm0, -480(%rbx,%rdx)
	vmovups	%ymm0, -448(%rbx,%rdx)
	vmovups	%ymm0, -416(%rbx,%rdx)
	vmovups	%ymm0, -384(%rbx,%rdx)
	vmovups	%ymm0, -352(%rbx,%rdx)
	vmovups	%ymm0, -320(%rbx,%rdx)
	vmovups	%ymm0, -288(%rbx,%rdx)
	vmovups	%ymm0, -256(%rbx,%rdx)
	vmovups	%ymm0, -224(%rbx,%rdx)
	vmovups	%ymm0, -192(%rbx,%rdx)
	vmovups	%ymm0, -160(%rbx,%rdx)
	vmovups	%ymm0, -128(%rbx,%rdx)
	vmovups	%ymm0, -96(%rbx,%rdx)
	vmovups	%ymm0, -64(%rbx,%rdx)
	vmovups	%ymm0, -32(%rbx,%rdx)
	vmovups	%ymm0, (%rbx,%rdx)
	addq	$1024, %rdx                     # imm = 0x400
	addq	$8, %rdi
	jne	.LBB94_76
.LBB94_77:                              # %middle.block61.unr-lcssa
	testq	%r9, %r9
	je	.LBB94_80
# %bb.78:                               # %vector.body63.epil.preheader
	addq	%rcx, %rdx
	addq	$96, %rdx
	shlq	$7, %r9
	xorl	%edi, %edi
	vxorps	%xmm0, %xmm0, %xmm0
.LBB94_79:                              # %vector.body63.epil
                                        # =>This Inner Loop Header: Depth=1
	vmovups	%ymm0, -96(%rdx,%rdi)
	vmovups	%ymm0, -64(%rdx,%rdi)
	vmovups	%ymm0, -32(%rdx,%rdi)
	vmovups	%ymm0, (%rdx,%rdi)
	subq	$-128, %rdi
	cmpq	%rdi, %r9
	jne	.LBB94_79
.LBB94_80:                              # %middle.block61
	cmpq	%rsi, %r8
	movq	-64(%rbp), %rbx                 # 8-byte Reload
	je	.LBB94_71
# %bb.81:                               # %vec.epilog.iter.check
	testb	$112, %r8b
	je	.LBB94_82
.LBB94_67:                              # %vec.epilog.ph
	movq	%r8, %rdi
	andq	$-16, %rdi
	leaq	(%rcx,%rdi), %rdx
	vxorps	%xmm0, %xmm0, %xmm0
.LBB94_68:                              # %vec.epilog.vector.body
                                        # =>This Inner Loop Header: Depth=1
	vmovups	%xmm0, (%rcx,%rsi)
	addq	$16, %rsi
	cmpq	%rsi, %rdi
	jne	.LBB94_68
# %bb.69:                               # %vec.epilog.middle.block
	cmpq	%rdi, %r8
	jne	.LBB94_70
	jmp	.LBB94_71
.LBB94_82:
	addq	%rsi, %rcx
	movq	%rcx, %rdx
.LBB94_70:                              # %while.body194
                                        # =>This Inner Loop Header: Depth=1
	movb	$0, (%rdx)
	incq	%rdx
	cmpq	%rax, %rdx
	jne	.LBB94_70
.LBB94_71:                              # %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit686
	vmovups	.L__const.halide_debug_to_file.header+96(%rip), %ymm0
	vmovups	%ymm0, -272(%rbp)
	vmovups	.L__const.halide_debug_to_file.header+64(%rip), %ymm0
	vmovups	%ymm0, -304(%rbp)
	vmovups	.L__const.halide_debug_to_file.header+32(%rip), %ymm0
	vmovups	%ymm0, -336(%rbp)
	vmovups	.L__const.halide_debug_to_file.header(%rip), %ymm0
	vmovups	%ymm0, -368(%rbp)
	movb	$0, -240(%rbp)
	leaq	-368(%rbp), %rdi
	movl	$1, %r14d
	movl	$128, %esi
	movl	$1, %edx
	movq	%r15, %rcx
	vzeroupper
	callq	fwrite@PLT
	movl	36(%rbx), %r10d
	testl	%r10d, %r10d
	jle	.LBB94_72
# %bb.84:                               # %for.body.preheader.i.i
	movq	40(%rbx), %r8
	leaq	-1(%r10), %r9
	movl	%r10d, %esi
	andl	$3, %esi
	cmpq	$3, %r9
	jae	.LBB94_101
# %bb.85:
	xorl	%edi, %edi
	xorl	%r14d, %r14d
.LBB94_86:                              # %for.body.i12.i.preheader.unr-lcssa
	testq	%rsi, %rsi
	je	.LBB94_91
# %bb.87:                               # %for.body.i.i.epil.preheader
	shlq	$4, %rdi
	leaq	(%r8,%rdi), %rax
	addq	$8, %rax
	shlq	$4, %rsi
	xorl	%edi, %edi
	jmp	.LBB94_88
.LBB94_90:                              # %if.end.i.i.epil
                                        #   in Loop: Header=BB94_88 Depth=1
	addq	$16, %rdi
	cmpq	%rdi, %rsi
	je	.LBB94_91
.LBB94_88:                              # %for.body.i.i.epil
                                        # =>This Inner Loop Header: Depth=1
	movl	(%rax,%rdi), %edx
	testl	%edx, %edx
	jle	.LBB94_90
# %bb.89:                               # %if.then.i.i.epil
                                        #   in Loop: Header=BB94_88 Depth=1
	movslq	-4(%rax,%rdi), %rcx
	decq	%rcx
	imulq	%rdx, %rcx
	addq	%rcx, %r14
	jmp	.LBB94_90
.LBB94_91:                              # %for.body.i12.i.preheader
	movl	%r10d, %r11d
	andl	$3, %r11d
	cmpq	$3, %r9
	jae	.LBB94_111
# %bb.92:
	xorl	%edi, %edi
	xorl	%edx, %edx
.LBB94_93:                              # %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa
	testq	%r11, %r11
	movq	-64(%rbp), %rbx                 # 8-byte Reload
	je	.LBB94_98
# %bb.94:                               # %for.body.i12.i.epil.preheader
	shlq	$4, %rdi
	leaq	(%r8,%rdi), %rax
	addq	$8, %rax
	shlq	$4, %r11
	xorl	%edi, %edi
	jmp	.LBB94_95
.LBB94_97:                              # %if.end.i22.i.epil
                                        #   in Loop: Header=BB94_95 Depth=1
	addq	$16, %rdi
	cmpq	%rdi, %r11
	je	.LBB94_98
.LBB94_95:                              # %for.body.i12.i.epil
                                        # =>This Inner Loop Header: Depth=1
	movslq	(%rax,%rdi), %rcx
	testq	%rcx, %rcx
	jns	.LBB94_97
# %bb.96:                               # %if.then.i18.i.epil
                                        #   in Loop: Header=BB94_95 Depth=1
	movslq	-4(%rax,%rdi), %rsi
	decq	%rsi
	imulq	%rcx, %rsi
	addq	%rsi, %rdx
	jmp	.LBB94_97
.LBB94_98:                              # %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
	incq	%r14
	jmp	.LBB94_99
.LBB94_72:
	xorl	%edx, %edx
.LBB94_99:                              # %_ZNK15halide_buffer_t13size_in_bytesEv.exit
	subq	%rdx, %r14
	movzbl	33(%rbx), %ebx
	addq	$7, %rbx
	shrq	$3, %rbx
	imulq	%r14, %rbx
	movl	%ebx, %edx
	negl	%edx
	andl	$7, %edx
	leaq	(%rdx,%rbx), %rax
	shrq	$32, %rax
	jne	.LBB94_100
# %bb.121:                              # %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit693
	movl	$6, %r14d
	subl	%r12d, %r14d
	andl	$-8, %r14d
	cmpl	$3, %r10d
	movl	$2, %eax
	cmovgel	%r10d, %eax
	movl	$14, -212(%rbp)
	leal	4(,%rax,4), %r13d
                                        # kill: def $eax killed $eax killed $rax
	shll	$2, %eax
	andl	$-8, %r13d
	leal	(%r14,%r13), %ecx
	addl	%ebx, %ecx
	movq	%rdx, -72(%rbp)                 # 8-byte Spill
	addl	%edx, %ecx
	addl	$40, %ecx
	movl	%ecx, -208(%rbp)
	movabsq	$34359738374, %rcx              # imm = 0x800000006
	movq	%rcx, -204(%rbp)
	movslq	-56(%rbp), %rdx                 # 4-byte Folded Reload
	movq	_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE@GOTPCREL(%rip), %rcx
	movq	%rdx, -56(%rbp)                 # 8-byte Spill
	movzbl	(%rcx,%rdx), %ecx
	movl	%ecx, -196(%rbp)
	movabsq	$21474836481, %rcx              # imm = 0x500000001
	movq	%rcx, -192(%rbp)
	movl	%eax, -184(%rbp)
	leaq	-212(%rbp), %rdi
	movl	$32, %esi
	movl	$1, %edx
	movq	%r15, %rcx
	callq	fwrite@PLT
	testq	%rax, %rax
	je	.LBB94_122
# %bb.124:                              # %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit700
	movl	-140(%rbp), %eax
	movl	-124(%rbp), %ecx
	movl	%eax, -180(%rbp)
	movl	%ecx, -176(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -168(%rbp)
	movslq	%r13d, %rsi
	leaq	-180(%rbp), %rdi
	movl	$1, %edx
	movq	%r15, %rcx
	callq	fwrite@PLT
	testq	%rax, %rax
	je	.LBB94_125
# %bb.126:                              # %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit707
	notl	%r12d
	movl	$1, -164(%rbp)
	movl	%r12d, -160(%rbp)
	leaq	-164(%rbp), %rdi
	movl	$8, %esi
	movl	$1, %edx
	movq	%r15, %rcx
	callq	fwrite@PLT
	movl	$1, %r13d
	testq	%rax, %rax
	je	.LBB94_127
# %bb.128:                              # %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit714
	movl	%r14d, %esi
	leaq	-4464(%rbp), %rdi
	movl	$1, %edx
	movq	%r15, %rcx
	callq	fwrite@PLT
	testq	%rax, %rax
	je	.LBB94_129
# %bb.130:                              # %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit721
	movq	_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE@GOTPCREL(%rip), %rax
	movq	-56(%rbp), %rcx                 # 8-byte Reload
	movzbl	(%rax,%rcx), %eax
	movl	%eax, -156(%rbp)
	movl	%ebx, -152(%rbp)
	leaq	-156(%rbp), %rdi
	movl	$8, %esi
	movl	$1, %edx
	movq	%r15, %rcx
	callq	fwrite@PLT
	xorl	%r13d, %r13d
	testq	%rax, %rax
	sete	%r13b
	movl	$-11, %r12d
	jmp	.LBB94_131
.LBB94_100:                             # %cleanup278.thread
	leaq	.L.str.6.40(%rip), %rsi
	movq	%r13, %rdi
	callq	halide_error@PLT
	movl	$-6, %r12d
	jmp	.LBB94_172
.LBB94_101:                             # %for.body.preheader.i.i.new
	movl	%r10d, %eax
	andl	$-4, %eax
	leaq	56(%r8), %rbx
	xorl	%edi, %edi
	xorl	%r14d, %r14d
	jmp	.LBB94_102
.LBB94_110:                             # %if.end.i.i.3
                                        #   in Loop: Header=BB94_102 Depth=1
	addq	$4, %rdi
	addq	$64, %rbx
	cmpq	%rdi, %rax
	je	.LBB94_86
.LBB94_102:                             # %for.body.i.i
                                        # =>This Inner Loop Header: Depth=1
	movl	-48(%rbx), %edx
	testl	%edx, %edx
	jle	.LBB94_104
# %bb.103:                              # %if.then.i.i
                                        #   in Loop: Header=BB94_102 Depth=1
	movslq	-52(%rbx), %rcx
	decq	%rcx
	imulq	%rdx, %rcx
	addq	%rcx, %r14
.LBB94_104:                             # %if.end.i.i
                                        #   in Loop: Header=BB94_102 Depth=1
	movl	-32(%rbx), %edx
	testl	%edx, %edx
	jle	.LBB94_106
# %bb.105:                              # %if.then.i.i.1
                                        #   in Loop: Header=BB94_102 Depth=1
	movslq	-36(%rbx), %rcx
	decq	%rcx
	imulq	%rdx, %rcx
	addq	%rcx, %r14
.LBB94_106:                             # %if.end.i.i.1
                                        #   in Loop: Header=BB94_102 Depth=1
	movl	-16(%rbx), %edx
	testl	%edx, %edx
	jle	.LBB94_108
# %bb.107:                              # %if.then.i.i.2
                                        #   in Loop: Header=BB94_102 Depth=1
	movslq	-20(%rbx), %rcx
	decq	%rcx
	imulq	%rdx, %rcx
	addq	%rcx, %r14
.LBB94_108:                             # %if.end.i.i.2
                                        #   in Loop: Header=BB94_102 Depth=1
	movl	(%rbx), %edx
	testl	%edx, %edx
	jle	.LBB94_110
# %bb.109:                              # %if.then.i.i.3
                                        #   in Loop: Header=BB94_102 Depth=1
	movslq	-4(%rbx), %rcx
	decq	%rcx
	imulq	%rdx, %rcx
	addq	%rcx, %r14
	jmp	.LBB94_110
.LBB94_111:                             # %for.body.i12.i.preheader.new
	movl	%r10d, %eax
	andl	$-4, %eax
	leaq	56(%r8), %rbx
	xorl	%edi, %edi
	xorl	%edx, %edx
	jmp	.LBB94_112
.LBB94_120:                             # %if.end.i22.i.3
                                        #   in Loop: Header=BB94_112 Depth=1
	addq	$4, %rdi
	addq	$64, %rbx
	cmpq	%rdi, %rax
	je	.LBB94_93
.LBB94_112:                             # %for.body.i12.i
                                        # =>This Inner Loop Header: Depth=1
	movslq	-48(%rbx), %rcx
	testq	%rcx, %rcx
	js	.LBB94_113
# %bb.114:                              # %if.end.i22.i
                                        #   in Loop: Header=BB94_112 Depth=1
	movslq	-32(%rbx), %rcx
	testq	%rcx, %rcx
	js	.LBB94_115
.LBB94_116:                             # %if.end.i22.i.1
                                        #   in Loop: Header=BB94_112 Depth=1
	movslq	-16(%rbx), %rcx
	testq	%rcx, %rcx
	js	.LBB94_117
.LBB94_118:                             # %if.end.i22.i.2
                                        #   in Loop: Header=BB94_112 Depth=1
	movslq	(%rbx), %rcx
	testq	%rcx, %rcx
	jns	.LBB94_120
	jmp	.LBB94_119
.LBB94_113:                             # %if.then.i18.i
                                        #   in Loop: Header=BB94_112 Depth=1
	movslq	-52(%rbx), %rsi
	decq	%rsi
	imulq	%rcx, %rsi
	addq	%rsi, %rdx
	movslq	-32(%rbx), %rcx
	testq	%rcx, %rcx
	jns	.LBB94_116
.LBB94_115:                             # %if.then.i18.i.1
                                        #   in Loop: Header=BB94_112 Depth=1
	movslq	-36(%rbx), %rsi
	decq	%rsi
	imulq	%rcx, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbx), %rcx
	testq	%rcx, %rcx
	jns	.LBB94_118
.LBB94_117:                             # %if.then.i18.i.2
                                        #   in Loop: Header=BB94_112 Depth=1
	movslq	-20(%rbx), %rsi
	decq	%rsi
	imulq	%rcx, %rsi
	addq	%rsi, %rdx
	movslq	(%rbx), %rcx
	testq	%rcx, %rcx
	jns	.LBB94_120
.LBB94_119:                             # %if.then.i18.i.3
                                        #   in Loop: Header=BB94_112 Depth=1
	movslq	-4(%rbx), %rsi
	decq	%rsi
	imulq	%rcx, %rsi
	addq	%rsi, %rdx
	jmp	.LBB94_120
.LBB94_122:
	movl	$-7, %r12d
	jmp	.LBB94_123
.LBB94_125:
	movl	$-8, %r12d
.LBB94_123:                             # %cleanup278
	movl	$1, %r13d
	movq	-64(%rbp), %rbx                 # 8-byte Reload
	movq	-48(%rbp), %r14                 # 8-byte Reload
	movq	-72(%rbp), %rcx                 # 8-byte Reload
	jmp	.LBB94_132
.LBB94_127:
	movl	$-9, %r12d
	jmp	.LBB94_131
.LBB94_129:
	movl	$-10, %r12d
.LBB94_131:                             # %cleanup273
	movq	-48(%rbp), %r14                 # 8-byte Reload
	movq	-72(%rbp), %rcx                 # 8-byte Reload
	movq	-64(%rbp), %rbx                 # 8-byte Reload
.LBB94_132:                             # %cleanup278
	testl	%r13d, %r13d
	jne	.LBB94_172
.LBB94_133:                             # %if.end311
	movl	$4096, %eax                     # imm = 0x1000
	xorl	%edx, %edx
	divl	%r14d
	xorl	%r8d, %r8d
	movl	-92(%rbp), %esi
	testl	%esi, %esi
	jle	.LBB94_167
# %bb.134:                              # %for.body322.preheader
	movq	%rcx, -72(%rbp)                 # 8-byte Spill
	movl	-96(%rbp), %edi
	movl	%eax, -148(%rbp)                # 4-byte Spill
                                        # kill: def $eax killed $eax def $rax
	imull	%r14d, %eax
	movq	%rax, -224(%rbp)                # 8-byte Spill
	movl	-112(%rbp), %r9d
	movl	-108(%rbp), %edx
	movl	%r9d, %r12d
	movl	%edi, %eax
	movl	%edi, -56(%rbp)                 # 4-byte Spill
.LBB94_135:                             # %for.body322
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_137 Depth 2
                                        #       Child Loop BB94_139 Depth 3
                                        #         Child Loop BB94_141 Depth 4
                                        #           Child Loop BB94_150 Depth 5
                                        #           Child Loop BB94_153 Depth 5
	testl	%edx, %edx
	jle	.LBB94_163
# %bb.136:                              # %for.body333.preheader
                                        #   in Loop: Header=BB94_135 Depth=1
	movl	-128(%rbp), %esi
	movl	-124(%rbp), %edi
	movl	%esi, %r15d
	jmp	.LBB94_137
.LBB94_159:                             # %for.inc394.loopexit.loopexit
                                        #   in Loop: Header=BB94_137 Depth=2
	movl	-112(%rbp), %r9d
	movl	-108(%rbp), %edx
.LBB94_160:                             # %for.inc394
                                        #   in Loop: Header=BB94_137 Depth=2
	movl	%esi, %r15d
.LBB94_161:                             # %for.inc394
                                        #   in Loop: Header=BB94_137 Depth=2
	incl	%r12d
	leal	(%rdx,%r9), %eax
	cmpl	%eax, %r12d
	jge	.LBB94_162
.LBB94_137:                             # %for.body333
                                        #   Parent Loop BB94_135 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB94_139 Depth 3
                                        #         Child Loop BB94_141 Depth 4
                                        #           Child Loop BB94_150 Depth 5
                                        #           Child Loop BB94_153 Depth 5
	testl	%edi, %edi
	jle	.LBB94_161
# %bb.138:                              # %for.body344.preheader
                                        #   in Loop: Header=BB94_137 Depth=2
	movl	-140(%rbp), %eax
	testl	%eax, %eax
	jg	.LBB94_139
	jmp	.LBB94_160
.LBB94_157:                             # %for.inc389.loopexit
                                        #   in Loop: Header=BB94_139 Depth=3
	movl	-128(%rbp), %esi
	movl	-124(%rbp), %edi
	movl	%r13d, %r8d
	movq	-48(%rbp), %r14                 # 8-byte Reload
.LBB94_158:                             # %for.inc389
                                        #   in Loop: Header=BB94_139 Depth=3
	incl	%r15d
	leal	(%rsi,%rdi), %ecx
	cmpl	%ecx, %r15d
	jge	.LBB94_159
.LBB94_139:                             # %for.body344
                                        #   Parent Loop BB94_135 Depth=1
                                        #     Parent Loop BB94_137 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB94_141 Depth 4
                                        #           Child Loop BB94_150 Depth 5
                                        #           Child Loop BB94_153 Depth 5
	testl	%eax, %eax
	jle	.LBB94_158
# %bb.140:                              # %for.body355.preheader
                                        #   in Loop: Header=BB94_139 Depth=3
	movl	-144(%rbp), %r14d
	jmp	.LBB94_141
	.p2align	4, 0x90
.LBB94_156:                             # %for.inc384
                                        #   in Loop: Header=BB94_141 Depth=4
	incl	%r14d
	movl	-140(%rbp), %eax
	movl	-144(%rbp), %ecx
	addl	%eax, %ecx
	movl	%r13d, %r8d
	cmpl	%ecx, %r14d
	jge	.LBB94_157
.LBB94_141:                             # %for.body355
                                        #   Parent Loop BB94_135 Depth=1
                                        #     Parent Loop BB94_137 Depth=2
                                        #       Parent Loop BB94_139 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB94_150 Depth 5
                                        #           Child Loop BB94_153 Depth 5
	leal	1(%r8), %r13d
	movl	%r14d, -368(%rbp)
	movl	%r15d, -364(%rbp)
	movl	%r12d, -360(%rbp)
	movl	-56(%rbp), %eax                 # 4-byte Reload
	movl	%eax, -356(%rbp)
	movl	36(%rbx), %eax
	testl	%eax, %eax
	jle	.LBB94_142
# %bb.145:                              # %for.body.preheader.i
                                        #   in Loop: Header=BB94_141 Depth=4
	movq	40(%rbx), %r9
	movslq	8(%r9), %rcx
	movslq	(%r9), %rdi
	movslq	%r14d, %rsi
	subq	%rdi, %rsi
	imulq	%rcx, %rsi
	cmpl	$1, %eax
	jne	.LBB94_147
# %bb.146:                              #   in Loop: Header=BB94_141 Depth=4
	movq	%rsi, %rcx
	jmp	.LBB94_154
	.p2align	4, 0x90
.LBB94_142:                             #   in Loop: Header=BB94_141 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB94_154
	.p2align	4, 0x90
.LBB94_147:                             # %for.body.i.for.body.i_crit_edge.preheader
                                        #   in Loop: Header=BB94_141 Depth=4
	movslq	24(%r9), %rdi
	movslq	16(%r9), %rbx
	movslq	%r15d, %rcx
	subq	%rbx, %rcx
	imulq	%rdi, %rcx
	addq	%rsi, %rcx
	cmpl	$2, %eax
	je	.LBB94_154
# %bb.148:                              # %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader
                                        #   in Loop: Header=BB94_141 Depth=4
	leaq	-2(%rax), %r11
	addq	$-3, %rax
	movl	%r11d, %r10d
	andl	$3, %r10d
	movl	$2, %edi
	cmpq	$3, %rax
	jb	.LBB94_151
# %bb.149:                              # %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader.new
                                        #   in Loop: Header=BB94_141 Depth=4
	leaq	88(%r9), %rax
	andq	$-4, %r11
	negq	%r11
	movl	$2, %edi
	.p2align	4, 0x90
.LBB94_150:                             # %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge
                                        #   Parent Loop BB94_135 Depth=1
                                        #     Parent Loop BB94_137 Depth=2
                                        #       Parent Loop BB94_139 Depth=3
                                        #         Parent Loop BB94_141 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movslq	-368(%rbp,%rdi,4), %rdx
	movslq	-48(%rax), %rbx
	movslq	-56(%rax), %rsi
	subq	%rsi, %rdx
	imulq	%rbx, %rdx
	addq	%rcx, %rdx
	movslq	-364(%rbp,%rdi,4), %rcx
	movslq	-32(%rax), %rsi
	movslq	-40(%rax), %rbx
	subq	%rbx, %rcx
	imulq	%rsi, %rcx
	addq	%rdx, %rcx
	movslq	-360(%rbp,%rdi,4), %rdx
	movslq	-16(%rax), %rsi
	movslq	-24(%rax), %rbx
	subq	%rbx, %rdx
	imulq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-356(%rbp,%rdi,4), %rcx
	movslq	(%rax), %rsi
	movslq	-8(%rax), %rbx
	subq	%rbx, %rcx
	imulq	%rsi, %rcx
	addq	%rdx, %rcx
	addq	$64, %rax
	leaq	(%r11,%rdi), %rdx
	addq	$4, %rdx
	addq	$4, %rdi
	cmpq	$2, %rdx
	jne	.LBB94_150
.LBB94_151:                             # %_ZNK15halide_buffer_t10address_ofEPKi.exit.loopexit.unr-lcssa
                                        #   in Loop: Header=BB94_141 Depth=4
	testq	%r10, %r10
	je	.LBB94_154
# %bb.152:                              # %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.epil.preheader
                                        #   in Loop: Header=BB94_141 Depth=4
	leaq	-368(,%rdi,4), %r11
	addq	%rbp, %r11
	shlq	$4, %rdi
	leaq	(%r9,%rdi), %rdx
	addq	$8, %rdx
	shlq	$2, %r10
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB94_153:                             # %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.epil
                                        #   Parent Loop BB94_135 Depth=1
                                        #     Parent Loop BB94_137 Depth=2
                                        #       Parent Loop BB94_139 Depth=3
                                        #         Parent Loop BB94_141 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movslq	(%r11,%rsi), %rdi
	movslq	(%rdx,%rsi,4), %rbx
	movslq	-8(%rdx,%rsi,4), %rax
	subq	%rax, %rdi
	imulq	%rbx, %rdi
	addq	%rdi, %rcx
	addq	$4, %rsi
	cmpq	%rsi, %r10
	jne	.LBB94_153
	.p2align	4, 0x90
.LBB94_154:                             # %_ZNK15halide_buffer_t10address_ofEPKi.exit
                                        #   in Loop: Header=BB94_141 Depth=4
	movq	-64(%rbp), %rbx                 # 8-byte Reload
	movzbl	33(%rbx), %esi
	addq	$7, %rsi
	shrq	$3, %rsi
	imulq	%rcx, %rsi
	addq	16(%rbx), %rsi
	movq	-48(%rbp), %rdx                 # 8-byte Reload
	imull	%edx, %r8d
	movslq	%r8d, %rax
	leaq	(%rax,%rbp), %rdi
	addq	$-4464, %rdi                    # imm = 0xEE90
	callq	memcpy@PLT
	cmpl	-148(%rbp), %r13d               # 4-byte Folded Reload
	jne	.LBB94_156
# %bb.155:                              # %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit746
                                        #   in Loop: Header=BB94_141 Depth=4
	movl	$1, %edx
	leaq	-4464(%rbp), %rdi
	movq	-224(%rbp), %rsi                # 8-byte Reload
	movq	-80(%rbp), %rcx                 # 8-byte Reload
	callq	fwrite@PLT
	xorl	%r13d, %r13d
	testq	%rax, %rax
	jne	.LBB94_156
	jmp	.LBB94_171
.LBB94_162:                             # %for.inc399.loopexit
                                        #   in Loop: Header=BB94_135 Depth=1
	movl	-96(%rbp), %edi
	movl	-92(%rbp), %esi
	movl	%r9d, %r12d
	movq	-80(%rbp), %r15                 # 8-byte Reload
.LBB94_163:                             # %for.inc399
                                        #   in Loop: Header=BB94_135 Depth=1
	movl	-56(%rbp), %ecx                 # 4-byte Reload
	incl	%ecx
	leal	(%rsi,%rdi), %eax
	movl	%ecx, -56(%rbp)                 # 4-byte Spill
	cmpl	%eax, %ecx
	jl	.LBB94_135
# %bb.164:                              # %for.end403
	testl	%r8d, %r8d
	movq	-72(%rbp), %rcx                 # 8-byte Reload
	jle	.LBB94_167
# %bb.165:                              # %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit753
	imull	%r14d, %r8d
	movslq	%r8d, %rsi
	leaq	-4464(%rbp), %rdi
	movl	$1, %edx
	movq	%r15, %rcx
	callq	fwrite@PLT
	movq	-72(%rbp), %rcx                 # 8-byte Reload
	testq	%rax, %rax
	je	.LBB94_166
.LBB94_167:                             # %if.end412
	movq	$0, -368(%rbp)
	testl	%ecx, %ecx
	je	.LBB94_170
# %bb.168:                              # %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit760
	movl	%ecx, %esi
	leaq	-368(%rbp), %rdi
	movl	$1, %edx
	movq	%r15, %rcx
	callq	fwrite@PLT
	testq	%rax, %rax
	je	.LBB94_169
.LBB94_170:                             # %if.end423
	xorl	%r12d, %r12d
	jmp	.LBB94_172
.LBB94_171:                             # %cleanup425.loopexit
	movl	$-13, %r12d
	movq	-80(%rbp), %r15                 # 8-byte Reload
.LBB94_172:                             # %cleanup433
	movq	%r15, %rdi
	callq	fclose@PLT
	jmp	.LBB94_173
.LBB94_169:
	movl	$-16, %r12d
	jmp	.LBB94_172
.LBB94_166:
	movl	$-14, %r12d
	jmp	.LBB94_172
.Lfunc_end94:
	.size	halide_debug_to_file, .Lfunc_end94-halide_debug_to_file
                                        # -- End function
	.section	.text.halide_cache_cleanup,"ax",@progbits
	.weak	halide_cache_cleanup            # -- Begin function halide_cache_cleanup
	.p2align	4, 0x90
	.type	halide_cache_cleanup,@function
halide_cache_cleanup:                   # @halide_cache_cleanup
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	popq	%rbp
	jmp	halide_memoization_cache_cleanup@PLT # TAILCALL
.Lfunc_end95:
	.size	halide_cache_cleanup, .Lfunc_end95-halide_cache_cleanup
                                        # -- End function
	.section	.text.halide_memoization_cache_cleanup,"ax",@progbits
	.weak	halide_memoization_cache_cleanup # -- Begin function halide_memoization_cache_cleanup
	.p2align	4, 0x90
	.type	halide_memoization_cache_cleanup,@function
halide_memoization_cache_cleanup:       # @halide_memoization_cache_cleanup
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	movq	_ZN6Halide7Runtime8Internal13cache_entriesE@GOTPCREL(%rip), %r14
	movl	$2048, %r15d                    # imm = 0x800
	addq	_ZN6Halide7Runtime8Internal13cache_entriesE@GOTPCREL(%rip), %r15
	jmp	.LBB96_1
	.p2align	4, 0x90
.LBB96_3:                               # %while.end
                                        #   in Loop: Header=BB96_1 Depth=1
	addq	$8, %r14
	cmpq	%r15, %r14
	je	.LBB96_4
.LBB96_1:                               # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_2 Depth 2
	movq	(%r14), %rbx
	movq	$0, (%r14)
	testq	%rbx, %rbx
	je	.LBB96_3
	.p2align	4, 0x90
.LBB96_2:                               # %while.body
                                        #   Parent Loop BB96_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%rbx), %r12
	movq	%rbx, %rdi
	callq	_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv@PLT
	xorl	%edi, %edi
	movq	%rbx, %rsi
	callq	halide_free@PLT
	movq	%r12, %rbx
	testq	%r12, %r12
	jne	.LBB96_2
	jmp	.LBB96_3
.LBB96_4:                               # %for.cond.cleanup
	movq	_ZN6Halide7Runtime8Internal18current_cache_sizeE@GOTPCREL(%rip), %rax
	movq	$0, (%rax)
	movq	_ZN6Halide7Runtime8Internal18most_recently_usedE@GOTPCREL(%rip), %rax
	movq	$0, (%rax)
	movq	_ZN6Halide7Runtime8Internal19least_recently_usedE@GOTPCREL(%rip), %rax
	movq	$0, (%rax)
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end96:
	.size	halide_memoization_cache_cleanup, .Lfunc_end96-halide_memoization_cache_cleanup
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal10CacheEntry7destroyEv,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv # -- Begin function _ZN6Halide7Runtime8Internal10CacheEntry7destroyEv
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv,@function
_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv: # @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	movq	%rdi, %r14
	cmpl	$0, 56(%rdi)
	je	.LBB97_3
# %bb.1:                                # %for.body.preheader
	xorl	%ebx, %ebx
	xorl	%r15d, %r15d
	.p2align	4, 0x90
.LBB97_2:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	72(%r14), %rsi
	addq	%rbx, %rsi
	xorl	%edi, %edi
	callq	halide_device_free@PLT
	movq	72(%r14), %rax
	movq	16(%rax,%rbx), %rdi
	callq	_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh@PLT
	xorl	%edi, %edi
	movq	%rax, %rsi
	callq	halide_free@PLT
	incq	%r15
	movl	56(%r14), %eax
	addq	$56, %rbx
	cmpq	%rax, %r15
	jb	.LBB97_2
.LBB97_3:                               # %for.cond.cleanup
	movq	24(%r14), %rsi
	xorl	%edi, %edi
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	halide_free@PLT                 # TAILCALL
.Lfunc_end97:
	.size	_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv, .Lfunc_end97-_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh # -- Begin function _ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh,@function
_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh: # @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	leaq	-64(%rdi), %rax
	popq	%rbp
	retq
.Lfunc_end98:
	.size	_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh, .Lfunc_end98-_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx # -- Begin function _ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx,@function
_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx: # @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rcx, %r12
	movq	%rdx, %rbx
	movl	%esi, %r15d
	movq	%rdi, %r14
	testl	%esi, %esi
	js	.LBB99_4
	.p2align	4, 0x90
.LBB99_1:                               # %land.rhs
                                        # =>This Inner Loop Header: Depth=1
	movl	%r15d, %eax
	cmpq	$1, 24(%r14,%rax,8)
	jne	.LBB99_5
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB99_1 Depth=1
	leal	-1(%r15), %eax
	testl	%r15d, %r15d
	movl	%eax, %r15d
	jg	.LBB99_1
	jmp	.LBB99_3
.LBB99_4:                               # %while.end
	cmpl	$-1, %r15d
	je	.LBB99_3
.LBB99_5:                               # %for.cond.preheader
	movslq	%r15d, %rax
	cmpq	$0, 24(%r14,%rax,8)
	je	.LBB99_8
# %bb.6:                                # %for.body.preheader
	decl	%r15d
	xorl	%r13d, %r13d
	movq	%rax, -48(%rbp)                 # 8-byte Spill
	.p2align	4, 0x90
.LBB99_7:                               # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	%r14, %rdi
	movl	%r15d, %esi
	movq	%rbx, %rdx
	movq	%r12, %rcx
	callq	_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx@PLT
	movq	-48(%rbp), %rax                 # 8-byte Reload
	addq	152(%r14,%rax,8), %rbx
	addq	280(%r14,%rax,8), %r12
	incq	%r13
	cmpq	24(%r14,%rax,8), %r13
	jb	.LBB99_7
.LBB99_8:                               # %if.end
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB99_3:                               # %if.then
	addq	(%r14), %rbx
	addq	8(%r14), %r12
	movq	408(%r14), %rdx
	movq	%r12, %rdi
	movq	%rbx, %rsi
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	memcpy@PLT                      # TAILCALL
.Lfunc_end99:
	.size	_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx, .Lfunc_end99-_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv # -- Begin function _ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv,@function
_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv: # @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	(%rdi), %rax
	cmpq	8(%rdi), %rax
	jne	.LBB100_2
# %bb.1:                                # %if.end
	popq	%rbp
	retq
.LBB100_2:                              # %if.then
	movq	16(%rdi), %rdx
	movl	$15, %esi
	xorl	%ecx, %ecx
	popq	%rbp
	jmp	_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx@PLT # TAILCALL
.Lfunc_end100:
	.size	_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv, .Lfunc_end100-_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3                               # -- Begin function _ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b
.LCPI101_0:
	.quad	1                               # 0x1
	.section	.text._ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b,@function
_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b: # @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$456, %rsp                      # imm = 0x1C8
	testl	%edx, %edx
	je	.LBB101_2
# %bb.1:                                # %cond.true
	movq	16(%rsi), %rax
	movq	%rax, -488(%rbp)
	testb	%r8b, %r8b
	movq	%rdi, -56(%rbp)                 # 8-byte Spill
	jne	.LBB101_4
.LBB101_5:                              # %cond.false6
	movq	(%rcx), %rax
	jmp	.LBB101_6
.LBB101_2:                              # %cond.false
	movq	(%rsi), %rax
	movq	%rax, -488(%rbp)
	testb	%r8b, %r8b
	movq	%rdi, -56(%rbp)                 # 8-byte Spill
	je	.LBB101_5
.LBB101_4:                              # %cond.true4
	movq	16(%rcx), %rax
.LBB101_6:                              # %cond.end8
	movq	%rax, -480(%rbp)
	movzbl	33(%rsi), %eax
	movq	%rax, -48(%rbp)                 # 8-byte Spill
	leaq	7(%rax), %r10
	shrq	$3, %r10
	movq	%r10, -80(%rbp)
	vbroadcastsd	.LCPI101_0(%rip), %ymm0 # ymm0 = [1,1,1,1]
	vmovups	%ymm0, -464(%rbp)
	vxorps	%xmm1, %xmm1, %xmm1
	vmovups	%ymm1, -336(%rbp)
	vmovups	%ymm1, -208(%rbp)
	vmovups	%ymm0, -432(%rbp)
	vmovups	%ymm1, -304(%rbp)
	vmovups	%ymm1, -176(%rbp)
	vmovups	%ymm0, -400(%rbp)
	vmovups	%ymm1, -272(%rbp)
	vmovups	%ymm1, -144(%rbp)
	vmovups	%ymm0, -368(%rbp)
	vmovups	%ymm1, -240(%rbp)
	vmovups	%ymm1, -112(%rbp)
	movl	36(%rsi), %r15d
	testl	%r15d, %r15d
	movq	%r15, -64(%rbp)                 # 8-byte Spill
	jle	.LBB101_7
# %bb.8:                                # %for.body19.lr.ph
	movq	40(%rsi), %r13
	movq	40(%rcx), %r12
	leaq	-1(%r15), %rax
	movl	%r15d, %r11d
	andl	$3, %r11d
	cmpq	$3, %rax
	jae	.LBB101_17
# %bb.9:
	xorl	%r14d, %r14d
	xorl	%edi, %edi
	jmp	.LBB101_10
.LBB101_7:
	xorl	%edi, %edi
	jmp	.LBB101_13
.LBB101_17:                             # %for.body19.lr.ph.new
                                        # kill: def $r15d killed $r15d killed $r15 def $r15
	andl	$-4, %r15d
	movl	$48, %eax
	xorl	%r14d, %r14d
	xorl	%edi, %edi
	.p2align	4, 0x90
.LBB101_18:                             # %for.body19
                                        # =>This Inner Loop Header: Depth=1
	movslq	-40(%r13,%rax), %r9
	movslq	-48(%r12,%rax), %rbx
	movslq	-48(%r13,%rax), %r8
	subq	%r8, %rbx
	imulq	%r9, %rbx
	addq	%rdi, %rbx
	movslq	-24(%r13,%rax), %r8
	movslq	-32(%r12,%rax), %rdi
	movslq	-32(%r13,%rax), %rdx
	subq	%rdx, %rdi
	imulq	%r8, %rdi
	addq	%rbx, %rdi
	movslq	-8(%r13,%rax), %r8
	movslq	-16(%r12,%rax), %rbx
	movslq	-16(%r13,%rax), %rdx
	subq	%rdx, %rbx
	imulq	%r8, %rbx
	addq	%rdi, %rbx
	movslq	8(%r13,%rax), %r8
	movslq	(%r12,%rax), %rdi
	movslq	(%r13,%rax), %rdx
	subq	%rdx, %rdi
	imulq	%r8, %rdi
	addq	%rbx, %rdi
	addq	$4, %r14
	addq	$64, %rax
	cmpq	%r14, %r15
	jne	.LBB101_18
.LBB101_10:                             # %for.cond.cleanup18.loopexit.unr-lcssa
	testq	%r11, %r11
	je	.LBB101_13
# %bb.11:                               # %for.body19.epil.preheader
	shlq	$4, %r14
	leaq	(%r14,%r13), %r9
	addq	$8, %r9
	addq	%r14, %r12
	shlq	$4, %r11
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB101_12:                             # %for.body19.epil
                                        # =>This Inner Loop Header: Depth=1
	movslq	(%r9,%rdx), %r15
	movslq	(%r12,%rdx), %rax
	movslq	-8(%r9,%rdx), %rbx
	subq	%rbx, %rax
	imulq	%r15, %rax
	addq	%rax, %rdi
	addq	$16, %rdx
	cmpq	%rdx, %r11
	jne	.LBB101_12
.LBB101_13:                             # %for.cond.cleanup18
	imulq	%r10, %rdi
	movq	%rdi, -472(%rbp)
	movq	-64(%rbp), %r9                  # 8-byte Reload
	cmpl	36(%rcx), %r9d
	jne	.LBB101_16
# %bb.14:                               # %lor.lhs.false
	movzbl	33(%rcx), %eax
	addl	$7, %eax
	shrl	$3, %eax
	cmpl	%eax, %r10d
	jne	.LBB101_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$17, %r9d
	jge	.LBB101_16
# %bb.19:                               # %if.end
	cmpb	$0, -48(%rbp)                   # 1-byte Folded Reload
	je	.LBB101_16
# %bb.20:                               # %for.cond54.preheader
	testl	%r9d, %r9d
	jle	.LBB101_32
# %bb.21:                               # %for.body58.lr.ph
	movq	40(%rcx), %r11
	movq	40(%rsi), %r8
	leaq	-208(%rbp), %rdi
	xorl	%r12d, %r12d
	xorl	%eax, %eax
	movq	%r10, -72(%rbp)                 # 8-byte Spill
	movq	%r11, -48(%rbp)                 # 8-byte Spill
	jmp	.LBB101_22
	.p2align	4, 0x90
.LBB101_41:                             # %for.cond.cleanup94
                                        #   in Loop: Header=BB101_22 Depth=1
	movslq	4(%r11,%r13), %rcx
	movq	%rcx, -464(%rbp,%r14,8)
	movq	%rbx, -208(%rbp,%r14,8)
	movq	%r15, -336(%rbp,%r14,8)
	incq	%rax
	addq	$8, %rdi
	decq	%r12
	cmpq	%r9, %rax
	je	.LBB101_28
.LBB101_22:                             # %for.body58
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_25 Depth 2
                                        #     Child Loop BB101_38 Depth 2
                                        #     Child Loop BB101_42 Depth 2
	movq	%rax, %r13
	shlq	$4, %r13
	movslq	8(%r11,%r13), %rbx
	imulq	%r10, %rbx
	movl	$0, %ecx
	testq	%rax, %rax
	je	.LBB101_35
# %bb.23:                               # %for.body81.lr.ph
                                        #   in Loop: Header=BB101_22 Depth=1
	testq	%rbx, %rbx
	je	.LBB101_34
# %bb.24:                               # %for.body81.preheader
                                        #   in Loop: Header=BB101_22 Depth=1
	xorl	%ecx, %ecx
	.p2align	4, 0x90
.LBB101_25:                             # %for.body81
                                        #   Parent Loop BB101_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	-208(%rbp,%rcx,8), %rbx
	jb	.LBB101_35
# %bb.26:                               # %for.inc89
                                        #   in Loop: Header=BB101_25 Depth=2
	incq	%rcx
	cmpq	%rcx, %rax
	jne	.LBB101_25
# %bb.27:                               #   in Loop: Header=BB101_22 Depth=1
	movq	%rax, %rcx
	jmp	.LBB101_35
	.p2align	4, 0x90
.LBB101_34:                             # %for.body81.us.preheader
                                        #   in Loop: Header=BB101_22 Depth=1
	movl	%eax, %ecx
.LBB101_35:                             # %for.end91
                                        #   in Loop: Header=BB101_22 Depth=1
	movslq	8(%r8,%r13), %r15
	imulq	%r10, %r15
	movl	%ecx, %r14d
	cmpq	%r14, %rax
	jbe	.LBB101_41
# %bb.36:                               # %for.body95.preheader
                                        #   in Loop: Header=BB101_22 Depth=1
	movq	%r8, %r11
	movslq	%r14d, %rsi
	movl	%eax, %ecx
	subl	%esi, %ecx
	movq	%rsi, %r8
	notq	%r8
	addq	%rax, %r8
	movq	%rax, %rdx
	testb	$3, %cl
	je	.LBB101_40
# %bb.37:                               # %for.body95.prol.preheader
                                        #   in Loop: Header=BB101_22 Depth=1
	movl	%eax, %ecx
	subb	%r14b, %cl
	movzbl	%cl, %r9d
	andl	$3, %r9d
	negq	%r9
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB101_38:                             # %for.body95.prol
                                        #   Parent Loop BB101_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-264(%rdi,%rdx,8), %rcx
	movq	-136(%rdi,%rdx,8), %r10
	movq	%rcx, -256(%rdi,%rdx,8)
	movq	-8(%rdi,%rdx,8), %rcx
	movq	%rcx, (%rdi,%rdx,8)
	movq	%r10, -128(%rdi,%rdx,8)
	decq	%rdx
	cmpq	%rdx, %r9
	jne	.LBB101_38
# %bb.39:                               # %for.body95.prol.loopexit.loopexit
                                        #   in Loop: Header=BB101_22 Depth=1
	subq	%r12, %rdx
	movq	-72(%rbp), %r10                 # 8-byte Reload
	movq	-64(%rbp), %r9                  # 8-byte Reload
.LBB101_40:                             # %for.body95.prol.loopexit
                                        #   in Loop: Header=BB101_22 Depth=1
	cmpq	$3, %r8
	movq	%r11, %r8
	movq	-48(%rbp), %r11                 # 8-byte Reload
	jb	.LBB101_41
	.p2align	4, 0x90
.LBB101_42:                             # %for.body95
                                        #   Parent Loop BB101_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-216(%rbp,%rdx,8), %rcx
	movq	%rcx, -208(%rbp,%rdx,8)
	movq	-344(%rbp,%rdx,8), %rcx
	movq	%rcx, -336(%rbp,%rdx,8)
	movq	-224(%rbp,%rdx,8), %rcx
	movq	%rcx, -216(%rbp,%rdx,8)
	movq	-352(%rbp,%rdx,8), %rcx
	movq	%rcx, -344(%rbp,%rdx,8)
	vmovups	-496(%rbp,%rdx,8), %ymm0
	vmovups	%ymm0, -488(%rbp,%rdx,8)
	vmovups	-240(%rbp,%rdx,8), %xmm0
	vmovups	%xmm0, -232(%rbp,%rdx,8)
	vmovups	-368(%rbp,%rdx,8), %xmm0
	vmovups	%xmm0, -360(%rbp,%rdx,8)
	leaq	-4(%rdx), %rcx
	movq	%rcx, %rdx
	cmpq	%rsi, %rcx
	jg	.LBB101_42
	jmp	.LBB101_41
.LBB101_16:                             # %if.then
	vxorps	%xmm0, %xmm0, %xmm0
	movq	-56(%rbp), %rax                 # 8-byte Reload
	vmovups	%ymm0, 384(%rax)
	vmovups	%ymm0, 352(%rax)
	vmovups	%ymm0, 320(%rax)
	vmovups	%ymm0, 288(%rax)
	vmovups	%ymm0, 256(%rax)
	vmovups	%ymm0, 224(%rax)
	vmovups	%ymm0, 192(%rax)
	vmovups	%ymm0, 160(%rax)
	vmovups	%ymm0, 128(%rax)
	vmovups	%ymm0, 96(%rax)
	vmovups	%ymm0, 64(%rax)
	vmovups	%ymm0, 32(%rax)
	vmovups	%ymm0, (%rax)
.LBB101_33:                             # %while.end
	addq	$456, %rsp                      # imm = 0x1C8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	vzeroupper
	retq
.LBB101_28:                             # %while.cond.preheader
	movq	-80(%rbp), %rax
	cmpq	-336(%rbp), %rax
	jne	.LBB101_32
# %bb.29:                               # %land.rhs.preheader
	movq	-208(%rbp), %rcx
	.p2align	4, 0x90
.LBB101_30:                             # %land.rhs
                                        # =>This Inner Loop Header: Depth=1
	cmpq	%rcx, %rax
	jne	.LBB101_32
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB101_30 Depth=1
	movq	%rcx, %rax
	imulq	-464(%rbp), %rax
	movq	%rax, -80(%rbp)
	vmovups	-456(%rbp), %ymm0
	vmovups	-424(%rbp), %ymm1
	vmovups	-392(%rbp), %ymm2
	vmovups	-328(%rbp), %ymm3
	vmovups	%ymm0, -464(%rbp)
	cmpq	-328(%rbp), %rax
	vmovups	%ymm3, -336(%rbp)
	vmovups	-200(%rbp), %ymm0
	movq	-200(%rbp), %rcx
	vmovups	%ymm0, -208(%rbp)
	vmovups	%ymm1, -432(%rbp)
	vmovups	-296(%rbp), %ymm0
	vmovups	%ymm0, -304(%rbp)
	vmovups	-168(%rbp), %ymm0
	vmovups	%ymm0, -176(%rbp)
	vmovups	%ymm2, -400(%rbp)
	vmovups	-264(%rbp), %ymm0
	vmovups	%ymm0, -272(%rbp)
	vmovups	-136(%rbp), %ymm0
	vmovups	%ymm0, -144(%rbp)
	vmovups	-360(%rbp), %xmm0
	vmovups	%xmm0, -368(%rbp)
	vmovups	-232(%rbp), %xmm0
	vmovups	%xmm0, -240(%rbp)
	vmovups	-104(%rbp), %xmm0
	vmovups	%xmm0, -112(%rbp)
	movq	-344(%rbp), %rdx
	movq	%rdx, -352(%rbp)
	movq	-216(%rbp), %rdx
	movq	%rdx, -224(%rbp)
	movq	-88(%rbp), %rdx
	movq	%rdx, -96(%rbp)
	movq	$1, -344(%rbp)
	movq	$0, -216(%rbp)
	movq	$0, -88(%rbp)
	je	.LBB101_30
.LBB101_32:                             # %while.end
	leaq	-488(%rbp), %rsi
	movl	$416, %edx                      # imm = 0x1A0
	movq	-56(%rbp), %rbx                 # 8-byte Reload
	movq	%rbx, %rdi
	vzeroupper
	callq	memcpy@PLT
	movq	%rbx, %rax
	jmp	.LBB101_33
.Lfunc_end101:
	.size	_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b, .Lfunc_end101-_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m # -- Begin function _ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m,@function
_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m: # @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	callq	memcmp@PLT
	testl	%eax, %eax
	sete	%al
	popq	%rbp
	retq
.Lfunc_end102:
	.size	_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m, .Lfunc_end102-_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t # -- Begin function _ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t,@function
_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t: # @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movl	36(%rdi), %r8d
	testl	%r8d, %r8d
	jle	.LBB103_1
# %bb.2:                                # %for.body.lr.ph
	movq	40(%rdi), %r9
	movl	(%r9), %ecx
	movb	$1, %al
	cmpl	(%rsi), %ecx
	jne	.LBB103_11
# %bb.3:                                # %land.lhs.true.i.i.preheader
	movl	4(%r9), %ecx
	cmpl	4(%rsi), %ecx
	jne	.LBB103_11
# %bb.4:                                # %land.lhs.true5.i.i.preheader
	movl	8(%r9), %ecx
	cmpl	8(%rsi), %ecx
	jne	.LBB103_11
# %bb.5:                                # %_ZNK18halide_dimension_tneERKS_.exit.preheader
	movb	$1, %al
	movl	$1, %edi
	movl	$24, %ecx
	.p2align	4, 0x90
.LBB103_10:                             # %_ZNK18halide_dimension_tneERKS_.exit
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%r9,%rcx), %edx
	cmpl	-12(%rsi,%rcx), %edx
	jne	.LBB103_11
# %bb.6:                                # %for.cond
                                        #   in Loop: Header=BB103_10 Depth=1
	cmpq	%r8, %rdi
	setb	%al
	cmpq	%rdi, %r8
	je	.LBB103_11
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB103_10 Depth=1
	movl	-8(%r9,%rcx), %edx
	cmpl	-8(%rsi,%rcx), %edx
	jne	.LBB103_11
# %bb.8:                                # %land.lhs.true.i.i
                                        #   in Loop: Header=BB103_10 Depth=1
	movl	-4(%r9,%rcx), %edx
	cmpl	-4(%rsi,%rcx), %edx
	jne	.LBB103_11
# %bb.9:                                # %land.lhs.true5.i.i
                                        #   in Loop: Header=BB103_10 Depth=1
	movl	(%r9,%rcx), %r10d
	incq	%rdi
	leaq	16(%rcx), %rdx
	cmpl	(%rsi,%rcx), %r10d
	movq	%rdx, %rcx
	je	.LBB103_10
	jmp	.LBB103_11
.LBB103_1:
	xorl	%eax, %eax
.LBB103_11:                             # %return
	notb	%al
	andb	$1, %al
                                        # kill: def $al killed $al killed $eax
	popq	%rbp
	retq
.Lfunc_end103:
	.size	_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t, .Lfunc_end103-_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by # -- Begin function _ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by,@function
_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by: # @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movl	%r9d, %r12d
	movq	%r8, %r14
	movq	%rsi, %rbx
	movq	%rdi, %r15
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, (%rdi)
	movq	$0, 16(%rdi)
	movq	%rdx, 32(%rdi)
	movl	%ecx, 48(%rdi)
	movl	$0, 52(%rdi)
	movl	%r9d, 56(%rdi)
	movslq	36(%r8), %rax
	movl	%eax, 60(%rdi)
	movl	%r9d, %ecx
	imulq	$56, %rcx, %r13
	incl	%r12d
	imulq	%rax, %r12
	shlq	$4, %r12
	addq	%r13, %r12
	leaq	(%rdx,%r12), %rsi
	xorl	%edi, %edi
	callq	halide_malloc@PLT
	movq	%rax, 24(%r15)
	testq	%rax, %rax
	je	.LBB104_14
# %bb.1:                                # %if.end
	movq	%rax, 72(%r15)
	addq	%rax, %r13
	movq	%r13, 64(%r15)
	addq	%rax, %r12
	movq	%r12, 40(%r15)
	movq	32(%r15), %rcx
	testq	%rcx, %rcx
	je	.LBB104_6
# %bb.2:                                # %for.body.preheader
	movb	(%rbx), %dl
	movb	%dl, (%r12)
	cmpq	$1, %rcx
	je	.LBB104_6
# %bb.3:                                # %for.body.for.body_crit_edge.preheader
	movb	1(%rbx), %cl
	movb	%cl, 1(%r12)
	cmpq	$3, 32(%r15)
	jb	.LBB104_6
# %bb.4:                                # %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge.preheader
	movl	$2, %ecx
	.p2align	4, 0x90
.LBB104_5:                              # %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge
                                        # =>This Inner Loop Header: Depth=1
	movq	40(%r15), %rsi
	movzbl	(%rbx,%rcx), %edx
	movb	%dl, (%rsi,%rcx)
	incq	%rcx
	cmpq	32(%r15), %rcx
	jb	.LBB104_5
.LBB104_6:                              # %for.cond23.preheader
	cmpl	$0, 60(%r15)
	jle	.LBB104_9
# %bb.7:                                # %for.body27.preheader
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB104_8:                              # %for.body27
                                        # =>This Inner Loop Header: Depth=1
	movq	40(%r14), %rsi
	movq	64(%r15), %rdi
	vmovups	(%rsi,%rcx), %xmm0
	vmovups	%xmm0, (%rdi,%rcx)
	incq	%rdx
	movslq	60(%r15), %rsi
	addq	$16, %rcx
	cmpq	%rsi, %rdx
	jl	.LBB104_8
.LBB104_9:                              # %for.cond36.preheader
	movq	32(%rbp), %r8
	movb	24(%rbp), %r9b
	cmpl	$0, 56(%r15)
	je	.LBB104_13
# %bb.10:                               # %for.body40.preheader
	movq	16(%rbp), %r11
	xorl	%r10d, %r10d
	jmp	.LBB104_11
	.p2align	4, 0x90
.LBB104_12:                             # %for.cond36.loopexit
                                        #   in Loop: Header=BB104_11 Depth=1
	movl	56(%r15), %ecx
	cmpq	%rcx, %r10
	jae	.LBB104_13
.LBB104_11:                             # %for.body40
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_17 Depth 2
	movq	%r10, %rdi
	movq	(%r11,%r10,8), %rcx
	movq	72(%r15), %rsi
	imulq	$56, %r10, %r12
	vmovups	(%rcx), %ymm0
	vmovups	24(%rcx), %ymm1
	vmovups	%ymm1, 24(%rsi,%r12)
	vmovups	%ymm0, (%rsi,%r12)
	incq	%r10
	movl	60(%r15), %r14d
	movl	%r10d, %ecx
	imull	%r14d, %ecx
	shlq	$4, %rcx
	addq	64(%r15), %rcx
	movq	72(%r15), %rsi
	movq	%rcx, 40(%rsi,%r12)
	testl	%r14d, %r14d
	jle	.LBB104_12
# %bb.15:                               # %for.body59.preheader
                                        #   in Loop: Header=BB104_11 Depth=1
	movq	(%r11,%rdi,8), %rsi
	movq	40(%rsi), %rsi
	vmovups	(%rsi), %xmm0
	vmovups	%xmm0, (%rcx)
	cmpl	$2, 60(%r15)
	jl	.LBB104_12
# %bb.16:                               # %for.body59.for.body59_crit_edge.preheader
                                        #   in Loop: Header=BB104_11 Depth=1
	movl	$1, %ecx
	movl	$16, %esi
	.p2align	4, 0x90
.LBB104_17:                             # %for.body59.for.body59_crit_edge
                                        #   Parent Loop BB104_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	72(%r15), %rbx
	movq	40(%rbx,%r12), %rbx
	movq	(%r11,%rdi,8), %rdx
	movq	40(%rdx), %rdx
	vmovups	(%rdx,%rsi), %xmm0
	vmovups	%xmm0, (%rbx,%rsi)
	incq	%rcx
	movslq	60(%r15), %rdx
	addq	$16, %rsi
	cmpq	%rdx, %rcx
	jl	.LBB104_17
	jmp	.LBB104_12
.LBB104_13:                             # %for.cond.cleanup39
	movb	%r9b, 88(%r15)
	movq	%r8, 80(%r15)
.LBB104_14:                             # %cleanup
	testq	%rax, %rax
	setne	%al
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	vzeroupper
	retq
.Lfunc_end104:
	.size	_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by, .Lfunc_end104-_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal8djb_hashEPKhm,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal8djb_hashEPKhm # -- Begin function _ZN6Halide7Runtime8Internal8djb_hashEPKhm
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal8djb_hashEPKhm,@function
_ZN6Halide7Runtime8Internal8djb_hashEPKhm: # @_ZN6Halide7Runtime8Internal8djb_hashEPKhm
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	testq	%rsi, %rsi
	je	.LBB105_1
# %bb.2:                                # %for.body.preheader
	leaq	-1(%rsi), %rax
	movl	%esi, %r8d
	andl	$7, %r8d
	cmpq	$7, %rax
	jae	.LBB105_8
# %bb.3:
	movl	$5381, %eax                     # imm = 0x1505
	xorl	%edx, %edx
	jmp	.LBB105_4
.LBB105_1:
	movl	$5381, %eax                     # imm = 0x1505
	popq	%rbp
	retq
.LBB105_8:                              # %for.body.preheader.new
	andq	$-8, %rsi
	movl	$5381, %eax                     # imm = 0x1505
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB105_9:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movl	%eax, %ecx
	shll	$5, %ecx
	addl	%eax, %ecx
	movzbl	(%rdi,%rdx), %eax
	addl	%ecx, %eax
	movl	%eax, %ecx
	shll	$5, %ecx
	addl	%eax, %ecx
	movzbl	1(%rdi,%rdx), %eax
	addl	%ecx, %eax
	movl	%eax, %ecx
	shll	$5, %ecx
	addl	%eax, %ecx
	movzbl	2(%rdi,%rdx), %eax
	addl	%ecx, %eax
	movl	%eax, %ecx
	shll	$5, %ecx
	addl	%eax, %ecx
	movzbl	3(%rdi,%rdx), %eax
	addl	%ecx, %eax
	movl	%eax, %ecx
	shll	$5, %ecx
	addl	%eax, %ecx
	movzbl	4(%rdi,%rdx), %eax
	addl	%ecx, %eax
	movl	%eax, %ecx
	shll	$5, %ecx
	addl	%eax, %ecx
	movzbl	5(%rdi,%rdx), %eax
	addl	%ecx, %eax
	movl	%eax, %ecx
	shll	$5, %ecx
	addl	%eax, %ecx
	movzbl	6(%rdi,%rdx), %eax
	addl	%ecx, %eax
	movl	%eax, %ecx
	shll	$5, %ecx
	addl	%eax, %ecx
	movzbl	7(%rdi,%rdx), %eax
	addl	%ecx, %eax
	addq	$8, %rdx
	cmpq	%rdx, %rsi
	jne	.LBB105_9
.LBB105_4:                              # %for.cond.cleanup.loopexit.unr-lcssa
	testq	%r8, %r8
	je	.LBB105_7
# %bb.5:                                # %for.body.epil.preheader
	addq	%rdx, %rdi
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB105_6:                              # %for.body.epil
                                        # =>This Inner Loop Header: Depth=1
	movl	%eax, %esi
	shll	$5, %esi
	addl	%eax, %esi
	movzbl	(%rdi,%rdx), %eax
	addl	%esi, %eax
	incq	%rdx
	cmpq	%rdx, %r8
	jne	.LBB105_6
.LBB105_7:                              # %for.cond.cleanup
	popq	%rbp
	retq
.Lfunc_end105:
	.size	_ZN6Halide7Runtime8Internal8djb_hashEPKhm, .Lfunc_end105-_ZN6Halide7Runtime8Internal8djb_hashEPKhm
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal11prune_cacheEv,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal11prune_cacheEv # -- Begin function _ZN6Halide7Runtime8Internal11prune_cacheEv
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal11prune_cacheEv,@function
_ZN6Halide7Runtime8Internal11prune_cacheEv: # @_ZN6Halide7Runtime8Internal11prune_cacheEv
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	movq	_ZN6Halide7Runtime8Internal18current_cache_sizeE@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	_ZN6Halide7Runtime8Internal14max_cache_sizeE@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	%rcx, %rax
	jle	.LBB106_40
# %bb.1:                                # %entry
	movq	_ZN6Halide7Runtime8Internal19least_recently_usedE@GOTPCREL(%rip), %rdx
	movq	(%rdx), %r14
	testq	%r14, %r14
	je	.LBB106_40
	.p2align	4, 0x90
.LBB106_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_5 Depth 2
                                        #     Child Loop BB106_19 Depth 2
                                        #       Child Loop BB106_42 Depth 3
                                        #       Child Loop BB106_25 Depth 3
                                        #       Child Loop BB106_52 Depth 3
                                        #       Child Loop BB106_32 Depth 3
	movq	8(%r14), %r15
	cmpl	$0, 52(%r14)
	jne	.LBB106_38
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB106_2 Depth=1
	movzbl	48(%r14), %ecx
	movq	_ZN6Halide7Runtime8Internal13cache_entriesE@GOTPCREL(%rip), %rax
	movq	(%rax,%rcx,8), %rax
	cmpq	%r14, %rax
	je	.LBB106_4
	.p2align	4, 0x90
.LBB106_5:                              # %while.cond9
                                        #   Parent Loop BB106_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB106_7
# %bb.6:                                # %land.rhs11
                                        #   in Loop: Header=BB106_5 Depth=2
	movq	(%rbx), %rax
	cmpq	%r14, %rax
	jne	.LBB106_5
	jmp	.LBB106_8
.LBB106_4:                              # %if.then6
                                        #   in Loop: Header=BB106_2 Depth=1
	movq	(%r14), %rax
	movq	_ZN6Halide7Runtime8Internal13cache_entriesE@GOTPCREL(%rip), %rdx
	movq	%rax, (%rdx,%rcx,8)
	movq	_ZN6Halide7Runtime8Internal19least_recently_usedE@GOTPCREL(%rip), %rax
	cmpq	%r14, (%rax)
	jne	.LBB106_11
	jmp	.LBB106_10
.LBB106_7:                              # %if.then18
                                        #   in Loop: Header=BB106_2 Depth=1
	xorl	%edi, %edi
	leaq	.L.str.2.42(%rip), %rsi
	callq	halide_print@PLT
	callq	abort@PLT
.LBB106_8:                              # %do.end
                                        #   in Loop: Header=BB106_2 Depth=1
	movq	(%r14), %rax
	movq	%rax, (%rbx)
	movq	_ZN6Halide7Runtime8Internal19least_recently_usedE@GOTPCREL(%rip), %rax
	cmpq	%r14, (%rax)
	jne	.LBB106_11
.LBB106_10:                             # %if.then23
                                        #   in Loop: Header=BB106_2 Depth=1
	movq	_ZN6Halide7Runtime8Internal19least_recently_usedE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
.LBB106_11:                             # %if.end24
                                        #   in Loop: Header=BB106_2 Depth=1
	testq	%r15, %r15
	je	.LBB106_13
# %bb.12:                               # %if.then26
                                        #   in Loop: Header=BB106_2 Depth=1
	movq	16(%r14), %rax
	movq	%rax, 16(%r15)
.LBB106_13:                             # %if.end28
                                        #   in Loop: Header=BB106_2 Depth=1
	movq	16(%r14), %rax
	movq	_ZN6Halide7Runtime8Internal18most_recently_usedE@GOTPCREL(%rip), %rcx
	cmpq	%r14, (%rcx)
	je	.LBB106_14
# %bb.15:                               # %if.end32
                                        #   in Loop: Header=BB106_2 Depth=1
	testq	%rax, %rax
	je	.LBB106_17
.LBB106_16:                             # %if.then35
                                        #   in Loop: Header=BB106_2 Depth=1
	movq	%r15, 16(%r14)
.LBB106_17:                             # %if.end37
                                        #   in Loop: Header=BB106_2 Depth=1
	movq	%r15, -56(%rbp)                 # 8-byte Spill
	movq	%r14, -48(%rbp)                 # 8-byte Spill
	movl	56(%r14), %eax
	movq	%rax, -64(%rbp)                 # 8-byte Spill
	testq	%rax, %rax
	je	.LBB106_37
# %bb.18:                               # %for.body.lr.ph
                                        #   in Loop: Header=BB106_2 Depth=1
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	72(%rax), %r10
	xorl	%r8d, %r8d
	jmp	.LBB106_19
	.p2align	4, 0x90
.LBB106_35:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
                                        #   in Loop: Header=BB106_19 Depth=2
	notq	%rdi
.LBB106_36:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit
                                        #   in Loop: Header=BB106_19 Depth=2
	addq	%rcx, %rdi
	movzbl	33(%r10,%r13), %eax
	addq	$7, %rax
	shrq	$3, %rax
	imulq	%rdi, %rax
	movq	_ZN6Halide7Runtime8Internal18current_cache_sizeE@GOTPCREL(%rip), %rcx
	addq	%rax, (%rcx)
	incq	%r8
	cmpq	-64(%rbp), %r8                  # 8-byte Folded Reload
	je	.LBB106_37
.LBB106_19:                             # %for.body
                                        #   Parent Loop BB106_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB106_42 Depth 3
                                        #       Child Loop BB106_25 Depth 3
                                        #       Child Loop BB106_52 Depth 3
                                        #       Child Loop BB106_32 Depth 3
	imulq	$56, %r8, %r13
	movl	36(%r10,%r13), %r14d
	testl	%r14d, %r14d
	jle	.LBB106_20
# %bb.21:                               # %for.body.preheader.i.i
                                        #   in Loop: Header=BB106_19 Depth=2
	movq	40(%r10,%r13), %r9
	leaq	-1(%r14), %r11
	movl	%r14d, %r12d
	andl	$3, %r12d
	cmpq	$3, %r11
	jae	.LBB106_41
# %bb.22:                               #   in Loop: Header=BB106_19 Depth=2
	xorl	%ecx, %ecx
	xorl	%edi, %edi
.LBB106_23:                             # %for.body.i12.i.preheader.unr-lcssa
                                        #   in Loop: Header=BB106_19 Depth=2
	testq	%r12, %r12
	je	.LBB106_28
# %bb.24:                               # %for.body.i.i.epil.preheader
                                        #   in Loop: Header=BB106_19 Depth=2
	shlq	$4, %rcx
	addq	%r9, %rcx
	addq	$8, %rcx
	movq	%r12, %rdx
	shlq	$4, %rdx
	xorl	%esi, %esi
	jmp	.LBB106_25
	.p2align	4, 0x90
.LBB106_27:                             # %if.end.i.i.epil
                                        #   in Loop: Header=BB106_25 Depth=3
	addq	$16, %rsi
	cmpq	%rsi, %rdx
	je	.LBB106_28
.LBB106_25:                             # %for.body.i.i.epil
                                        #   Parent Loop BB106_2 Depth=1
                                        #     Parent Loop BB106_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	(%rcx,%rsi), %ebx
	testl	%ebx, %ebx
	jle	.LBB106_27
# %bb.26:                               # %if.then.i.i.epil
                                        #   in Loop: Header=BB106_25 Depth=3
	movslq	-4(%rcx,%rsi), %rax
	decq	%rax
	imulq	%rbx, %rax
	addq	%rax, %rdi
	jmp	.LBB106_27
	.p2align	4, 0x90
.LBB106_28:                             # %for.body.i12.i.preheader
                                        #   in Loop: Header=BB106_19 Depth=2
	cmpq	$3, %r11
	jae	.LBB106_51
# %bb.29:                               #   in Loop: Header=BB106_19 Depth=2
	xorl	%esi, %esi
	xorl	%ecx, %ecx
.LBB106_30:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa
                                        #   in Loop: Header=BB106_19 Depth=2
	testb	$3, %r14b
	je	.LBB106_35
# %bb.31:                               # %for.body.i12.i.epil.preheader
                                        #   in Loop: Header=BB106_19 Depth=2
	shlq	$4, %rsi
	leaq	(%r9,%rsi), %rdx
	addq	$8, %rdx
	shlq	$4, %r12
	xorl	%esi, %esi
	jmp	.LBB106_32
	.p2align	4, 0x90
.LBB106_34:                             # %if.end.i22.i.epil
                                        #   in Loop: Header=BB106_32 Depth=3
	addq	$16, %rsi
	cmpq	%rsi, %r12
	je	.LBB106_35
.LBB106_32:                             # %for.body.i12.i.epil
                                        #   Parent Loop BB106_2 Depth=1
                                        #     Parent Loop BB106_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movslq	(%rdx,%rsi), %rax
	testq	%rax, %rax
	jns	.LBB106_34
# %bb.33:                               # %if.then.i18.i.epil
                                        #   in Loop: Header=BB106_32 Depth=3
	movslq	-4(%rdx,%rsi), %rbx
	decq	%rbx
	imulq	%rax, %rbx
	addq	%rbx, %rcx
	jmp	.LBB106_34
	.p2align	4, 0x90
.LBB106_20:                             #   in Loop: Header=BB106_19 Depth=2
	movq	$-1, %rdi
	xorl	%ecx, %ecx
	jmp	.LBB106_36
	.p2align	4, 0x90
.LBB106_41:                             # %for.body.preheader.i.i.new
                                        #   in Loop: Header=BB106_19 Depth=2
	movl	%r14d, %esi
	andl	$-4, %esi
	leaq	56(%r9), %r15
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	jmp	.LBB106_42
	.p2align	4, 0x90
.LBB106_50:                             # %if.end.i.i.3
                                        #   in Loop: Header=BB106_42 Depth=3
	addq	$4, %rcx
	addq	$64, %r15
	cmpq	%rcx, %rsi
	je	.LBB106_23
.LBB106_42:                             # %for.body.i.i
                                        #   Parent Loop BB106_2 Depth=1
                                        #     Parent Loop BB106_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-48(%r15), %edx
	testl	%edx, %edx
	jle	.LBB106_44
# %bb.43:                               # %if.then.i.i
                                        #   in Loop: Header=BB106_42 Depth=3
	movslq	-52(%r15), %rax
	decq	%rax
	imulq	%rdx, %rax
	addq	%rax, %rdi
.LBB106_44:                             # %if.end.i.i
                                        #   in Loop: Header=BB106_42 Depth=3
	movl	-32(%r15), %edx
	testl	%edx, %edx
	jle	.LBB106_46
# %bb.45:                               # %if.then.i.i.1
                                        #   in Loop: Header=BB106_42 Depth=3
	movslq	-36(%r15), %rax
	decq	%rax
	imulq	%rdx, %rax
	addq	%rax, %rdi
.LBB106_46:                             # %if.end.i.i.1
                                        #   in Loop: Header=BB106_42 Depth=3
	movl	-16(%r15), %edx
	testl	%edx, %edx
	jle	.LBB106_48
# %bb.47:                               # %if.then.i.i.2
                                        #   in Loop: Header=BB106_42 Depth=3
	movslq	-20(%r15), %rax
	decq	%rax
	imulq	%rdx, %rax
	addq	%rax, %rdi
.LBB106_48:                             # %if.end.i.i.2
                                        #   in Loop: Header=BB106_42 Depth=3
	movl	(%r15), %edx
	testl	%edx, %edx
	jle	.LBB106_50
# %bb.49:                               # %if.then.i.i.3
                                        #   in Loop: Header=BB106_42 Depth=3
	movslq	-4(%r15), %rax
	decq	%rax
	imulq	%rdx, %rax
	addq	%rax, %rdi
	jmp	.LBB106_50
	.p2align	4, 0x90
.LBB106_51:                             # %for.body.i12.i.preheader.new
                                        #   in Loop: Header=BB106_19 Depth=2
	movl	%r14d, %r11d
	andl	$-4, %r11d
	leaq	56(%r9), %rdx
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	jmp	.LBB106_52
	.p2align	4, 0x90
.LBB106_60:                             # %if.end.i22.i.3
                                        #   in Loop: Header=BB106_52 Depth=3
	addq	$4, %rsi
	addq	$64, %rdx
	cmpq	%rsi, %r11
	je	.LBB106_30
.LBB106_52:                             # %for.body.i12.i
                                        #   Parent Loop BB106_2 Depth=1
                                        #     Parent Loop BB106_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movslq	-48(%rdx), %rax
	testq	%rax, %rax
	js	.LBB106_53
# %bb.54:                               # %if.end.i22.i
                                        #   in Loop: Header=BB106_52 Depth=3
	movslq	-32(%rdx), %rax
	testq	%rax, %rax
	js	.LBB106_55
.LBB106_56:                             # %if.end.i22.i.1
                                        #   in Loop: Header=BB106_52 Depth=3
	movslq	-16(%rdx), %rax
	testq	%rax, %rax
	js	.LBB106_57
.LBB106_58:                             # %if.end.i22.i.2
                                        #   in Loop: Header=BB106_52 Depth=3
	movslq	(%rdx), %rax
	testq	%rax, %rax
	jns	.LBB106_60
	jmp	.LBB106_59
	.p2align	4, 0x90
.LBB106_53:                             # %if.then.i18.i
                                        #   in Loop: Header=BB106_52 Depth=3
	movslq	-52(%rdx), %rbx
	decq	%rbx
	imulq	%rax, %rbx
	addq	%rbx, %rcx
	movslq	-32(%rdx), %rax
	testq	%rax, %rax
	jns	.LBB106_56
.LBB106_55:                             # %if.then.i18.i.1
                                        #   in Loop: Header=BB106_52 Depth=3
	movslq	-36(%rdx), %rbx
	decq	%rbx
	imulq	%rax, %rbx
	addq	%rbx, %rcx
	movslq	-16(%rdx), %rax
	testq	%rax, %rax
	jns	.LBB106_58
.LBB106_57:                             # %if.then.i18.i.2
                                        #   in Loop: Header=BB106_52 Depth=3
	movslq	-20(%rdx), %rbx
	decq	%rbx
	imulq	%rax, %rbx
	addq	%rbx, %rcx
	movslq	(%rdx), %rax
	testq	%rax, %rax
	jns	.LBB106_60
.LBB106_59:                             # %if.then.i18.i.3
                                        #   in Loop: Header=BB106_52 Depth=3
	movslq	-4(%rdx), %rbx
	decq	%rbx
	imulq	%rax, %rbx
	addq	%rbx, %rcx
	jmp	.LBB106_60
	.p2align	4, 0x90
.LBB106_37:                             # %for.cond.cleanup
                                        #   in Loop: Header=BB106_2 Depth=1
	movq	-48(%rbp), %rbx                 # 8-byte Reload
	movq	%rbx, %rdi
	callq	_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv@PLT
	xorl	%edi, %edi
	movq	%rbx, %rsi
	callq	halide_free@PLT
	movq	_ZN6Halide7Runtime8Internal18current_cache_sizeE@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	_ZN6Halide7Runtime8Internal14max_cache_sizeE@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	-56(%rbp), %r15                 # 8-byte Reload
.LBB106_38:                             # %if.end41
                                        #   in Loop: Header=BB106_2 Depth=1
	cmpq	%rcx, %rax
	jle	.LBB106_40
# %bb.39:                               # %if.end41
                                        #   in Loop: Header=BB106_2 Depth=1
	movq	%r15, %r14
	testq	%r15, %r15
	jne	.LBB106_2
	jmp	.LBB106_40
.LBB106_14:                             # %if.then30
                                        #   in Loop: Header=BB106_2 Depth=1
	movq	_ZN6Halide7Runtime8Internal18most_recently_usedE@GOTPCREL(%rip), %rcx
	movq	%rax, (%rcx)
	testq	%rax, %rax
	jne	.LBB106_16
	jmp	.LBB106_17
.LBB106_40:                             # %while.end42
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end106:
	.size	_ZN6Halide7Runtime8Internal11prune_cacheEv, .Lfunc_end106-_ZN6Halide7Runtime8Internal11prune_cacheEv
                                        # -- End function
	.section	.text.halide_memoization_cache_set_size,"ax",@progbits
	.weak	halide_memoization_cache_set_size # -- Begin function halide_memoization_cache_set_size
	.p2align	4, 0x90
	.type	halide_memoization_cache_set_size,@function
halide_memoization_cache_set_size:      # @halide_memoization_cache_set_size
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	testq	%rdi, %rdi
	movl	$1048576, %ebx                  # imm = 0x100000
	cmovneq	%rdi, %rbx
	movq	_ZN6Halide7Runtime8Internal16memoization_lockE@GOTPCREL(%rip), %r14
	movq	%r14, %rdi
	callq	halide_mutex_lock@PLT
	movq	_ZN6Halide7Runtime8Internal14max_cache_sizeE@GOTPCREL(%rip), %rax
	movq	%rbx, (%rax)
	callq	_ZN6Halide7Runtime8Internal11prune_cacheEv@PLT
	movq	%r14, %rdi
	popq	%rbx
	popq	%r14
	popq	%rbp
	jmp	halide_mutex_unlock@PLT         # TAILCALL
.Lfunc_end107:
	.size	halide_memoization_cache_set_size, .Lfunc_end107-halide_memoization_cache_set_size
                                        # -- End function
	.section	.text.halide_memoization_cache_lookup,"ax",@progbits
	.weak	halide_memoization_cache_lookup # -- Begin function halide_memoization_cache_lookup
	.p2align	4, 0x90
	.type	halide_memoization_cache_lookup,@function
halide_memoization_cache_lookup:        # @halide_memoization_cache_lookup
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$72, %rsp
	movq	%r9, %r15
	movl	%r8d, -44(%rbp)                 # 4-byte Spill
	movq	%rcx, %r14
	movq	%rsi, %rax
	movq	%rdi, %r12
	movslq	%edx, %rsi
	movq	%rax, -80(%rbp)                 # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -56(%rbp)                 # 8-byte Spill
	callq	_ZN6Halide7Runtime8Internal8djb_hashEPKhm@PLT
	movl	%eax, %r13d
	movzbl	%r13b, %ebx
	movq	_ZN6Halide7Runtime8Internal16memoization_lockE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_lock@PLT
	movq	_ZN6Halide7Runtime8Internal13cache_entriesE@GOTPCREL(%rip), %rax
	movq	(%rax,%rbx,8), %rbx
	testq	%rbx, %rbx
	movq	%r12, -72(%rbp)                 # 8-byte Spill
	movl	%r13d, -60(%rbp)                # 4-byte Spill
	je	.LBB108_25
# %bb.1:                                # %while.body.preheader
	movl	-44(%rbp), %eax                 # 4-byte Reload
	testl	%eax, %eax
	jle	.LBB108_4
# %bb.2:                                # %while.body.us.preheader
	cltq
	movq	%rax, -104(%rbp)                # 8-byte Spill
	jmp	.LBB108_17
	.p2align	4, 0x90
.LBB108_3:                              # %if.end73
                                        #   in Loop: Header=BB108_4 Depth=1
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	je	.LBB108_25
.LBB108_4:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	cmpl	%r13d, 48(%rbx)
	jne	.LBB108_3
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB108_4 Depth=1
	movq	-56(%rbp), %rax                 # 8-byte Reload
	cmpq	%rax, 32(%rbx)
	jne	.LBB108_3
# %bb.6:                                # %land.lhs.true7
                                        #   in Loop: Header=BB108_4 Depth=1
	movq	40(%rbx), %rdi
	movq	-80(%rbp), %rsi                 # 8-byte Reload
	movq	-56(%rbp), %rdx                 # 8-byte Reload
	callq	_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m@PLT
	testb	%al, %al
	je	.LBB108_3
# %bb.7:                                # %land.lhs.true10
                                        #   in Loop: Header=BB108_4 Depth=1
	movq	64(%rbx), %rsi
	movq	%r14, %rdi
	callq	_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t@PLT
	testb	%al, %al
	je	.LBB108_3
# %bb.8:                                # %land.lhs.true13
                                        #   in Loop: Header=BB108_4 Depth=1
	movl	-44(%rbp), %eax                 # 4-byte Reload
	cmpl	%eax, 56(%rbx)
	jne	.LBB108_3
# %bb.9:                                # %for.cond.preheader
	leaq	72(%rbx), %rdx
.LBB108_10:                             # %if.then23
	movq	_ZN6Halide7Runtime8Internal18most_recently_usedE@GOTPCREL(%rip), %r14
	cmpq	(%r14), %rbx
	je	.LBB108_81
# %bb.11:                               # %do.body
	cmpq	$0, 8(%rbx)
	jne	.LBB108_13
# %bb.12:                               # %if.then27
	leaq	.L.str.3.43(%rip), %rsi
	movq	%r12, %rdi
	movq	%rdx, %r13
	callq	halide_print@PLT
	callq	abort@PLT
	movq	%r13, %rdx
.LBB108_13:                             # %do.end
	movq	16(%rbx), %rax
	testq	%rax, %rax
	je	.LBB108_73
# %bb.14:                               # %if.then29
	movq	8(%rbx), %rcx
	movq	%rcx, 8(%rax)
	movq	8(%rbx), %rax
	jmp	.LBB108_76
.LBB108_15:                             # %for.cond.cleanup.us
                                        #   in Loop: Header=BB108_17 Depth=1
	testb	%al, %al
	movq	%r12, %r15
	movq	-72(%rbp), %r12                 # 8-byte Reload
	movl	-60(%rbp), %r13d                # 4-byte Reload
	movq	-96(%rbp), %r14                 # 8-byte Reload
	jne	.LBB108_10
	.p2align	4, 0x90
.LBB108_16:                             # %if.end73.us
                                        #   in Loop: Header=BB108_17 Depth=1
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	je	.LBB108_25
.LBB108_17:                             # %while.body.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_23 Depth 2
	cmpl	%r13d, 48(%rbx)
	jne	.LBB108_16
# %bb.18:                               # %land.lhs.true.us
                                        #   in Loop: Header=BB108_17 Depth=1
	movq	-56(%rbp), %rax                 # 8-byte Reload
	cmpq	%rax, 32(%rbx)
	jne	.LBB108_16
# %bb.19:                               # %land.lhs.true7.us
                                        #   in Loop: Header=BB108_17 Depth=1
	movq	40(%rbx), %rdi
	movq	-80(%rbp), %rsi                 # 8-byte Reload
	movq	-56(%rbp), %rdx                 # 8-byte Reload
	callq	_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m@PLT
	testb	%al, %al
	je	.LBB108_16
# %bb.20:                               # %land.lhs.true10.us
                                        #   in Loop: Header=BB108_17 Depth=1
	movq	64(%rbx), %rsi
	movq	%r14, %rdi
	callq	_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t@PLT
	testb	%al, %al
	je	.LBB108_16
# %bb.21:                               # %land.lhs.true13.us
                                        #   in Loop: Header=BB108_17 Depth=1
	movl	-44(%rbp), %eax                 # 4-byte Reload
	cmpl	%eax, 56(%rbx)
	jne	.LBB108_16
# %bb.22:                               # %for.cond.preheader.us
                                        #   in Loop: Header=BB108_17 Depth=1
	movq	%r14, -96(%rbp)                 # 8-byte Spill
	movq	%r15, %r12
	leaq	72(%rbx), %rdx
	movl	$1, %r15d
	movl	$5, %r13d
	.p2align	4, 0x90
.LBB108_23:                             # %for.body.us
                                        #   Parent Loop BB108_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-8(%r12,%r15,8), %rdi
	movq	(%rdx), %rax
	movq	(%rax,%r13,8), %rsi
	movq	%rdx, %r14
	callq	_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t@PLT
	movq	%r14, %rdx
	testb	%al, %al
	je	.LBB108_15
# %bb.24:                               # %for.body.us
                                        #   in Loop: Header=BB108_23 Depth=2
	leaq	1(%r15), %rcx
	addq	$7, %r13
	cmpq	-104(%rbp), %r15                # 8-byte Folded Reload
	movq	%rcx, %r15
	jl	.LBB108_23
	jmp	.LBB108_15
.LBB108_25:                             # %for.cond75.preheader
	movl	$1, %ebx
	movl	-44(%rbp), %eax                 # 4-byte Reload
	testl	%eax, %eax
	jle	.LBB108_72
# %bb.26:                               # %for.body78.preheader
	movl	%eax, %eax
	movq	%rax, -56(%rbp)                 # 8-byte Spill
	movl	$1, %r13d
	movl	$4294967295, %r14d              # imm = 0xFFFFFFFF
	xorl	%r12d, %r12d
	movq	%r15, -88(%rbp)                 # 8-byte Spill
	.p2align	4, 0x90
.LBB108_27:                             # %for.body78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_48 Depth 2
                                        #     Child Loop BB108_33 Depth 2
                                        #     Child Loop BB108_58 Depth 2
                                        #     Child Loop BB108_40 Depth 2
	movq	(%r15,%r12,8), %r15
	movl	36(%r15), %r9d
	testl	%r9d, %r9d
	jle	.LBB108_43
# %bb.28:                               # %for.body.preheader.i.i
                                        #   in Loop: Header=BB108_27 Depth=1
	movq	40(%r15), %r8
	leaq	-1(%r9), %r10
	movl	%r9d, %r11d
	andl	$3, %r11d
	cmpq	$3, %r10
	jae	.LBB108_46
# %bb.29:                               #   in Loop: Header=BB108_27 Depth=1
	xorl	%edx, %edx
	xorl	%eax, %eax
.LBB108_30:                             # %for.body.i12.i.preheader.unr-lcssa
                                        #   in Loop: Header=BB108_27 Depth=1
	testq	%r11, %r11
	je	.LBB108_35
# %bb.31:                               # %for.body.i.i.epil.preheader
                                        #   in Loop: Header=BB108_27 Depth=1
	shlq	$4, %rdx
	addq	%r8, %rdx
	addq	$8, %rdx
	movq	%r11, %rsi
	shlq	$4, %rsi
	xorl	%edi, %edi
	jmp	.LBB108_33
	.p2align	4, 0x90
.LBB108_32:                             # %if.end.i.i.epil
                                        #   in Loop: Header=BB108_33 Depth=2
	addq	$16, %rdi
	cmpq	%rdi, %rsi
	je	.LBB108_35
.LBB108_33:                             # %for.body.i.i.epil
                                        #   Parent Loop BB108_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	(%rdx,%rdi), %ebx
	testl	%ebx, %ebx
	jle	.LBB108_32
# %bb.34:                               # %if.then.i.i.epil
                                        #   in Loop: Header=BB108_33 Depth=2
	movslq	-4(%rdx,%rdi), %rcx
	decq	%rcx
	imulq	%rbx, %rcx
	addq	%rcx, %rax
	jmp	.LBB108_32
	.p2align	4, 0x90
.LBB108_35:                             # %for.body.i12.i.preheader
                                        #   in Loop: Header=BB108_27 Depth=1
	cmpq	$3, %r10
	jae	.LBB108_56
# %bb.36:                               #   in Loop: Header=BB108_27 Depth=1
	xorl	%edx, %edx
	xorl	%edi, %edi
	jmp	.LBB108_37
	.p2align	4, 0x90
.LBB108_43:                             #   in Loop: Header=BB108_27 Depth=1
	movl	$1, %eax
	xorl	%edi, %edi
	jmp	.LBB108_44
	.p2align	4, 0x90
.LBB108_46:                             # %for.body.preheader.i.i.new
                                        #   in Loop: Header=BB108_27 Depth=1
	movl	%r9d, %esi
	andl	$-4, %esi
	leaq	56(%r8), %rdi
	xorl	%edx, %edx
	xorl	%eax, %eax
	jmp	.LBB108_48
	.p2align	4, 0x90
.LBB108_47:                             # %if.end.i.i.3
                                        #   in Loop: Header=BB108_48 Depth=2
	addq	$4, %rdx
	addq	$64, %rdi
	cmpq	%rdx, %rsi
	je	.LBB108_30
.LBB108_48:                             # %for.body.i.i
                                        #   Parent Loop BB108_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rdi), %ebx
	testl	%ebx, %ebx
	jle	.LBB108_50
# %bb.49:                               # %if.then.i.i
                                        #   in Loop: Header=BB108_48 Depth=2
	movslq	-52(%rdi), %rcx
	decq	%rcx
	imulq	%rbx, %rcx
	addq	%rcx, %rax
.LBB108_50:                             # %if.end.i.i
                                        #   in Loop: Header=BB108_48 Depth=2
	movl	-32(%rdi), %ebx
	testl	%ebx, %ebx
	jle	.LBB108_52
# %bb.51:                               # %if.then.i.i.1
                                        #   in Loop: Header=BB108_48 Depth=2
	movslq	-36(%rdi), %rcx
	decq	%rcx
	imulq	%rbx, %rcx
	addq	%rcx, %rax
.LBB108_52:                             # %if.end.i.i.1
                                        #   in Loop: Header=BB108_48 Depth=2
	movl	-16(%rdi), %ebx
	testl	%ebx, %ebx
	jle	.LBB108_54
# %bb.53:                               # %if.then.i.i.2
                                        #   in Loop: Header=BB108_48 Depth=2
	movslq	-20(%rdi), %rcx
	decq	%rcx
	imulq	%rbx, %rcx
	addq	%rcx, %rax
.LBB108_54:                             # %if.end.i.i.2
                                        #   in Loop: Header=BB108_48 Depth=2
	movl	(%rdi), %ebx
	testl	%ebx, %ebx
	jle	.LBB108_47
# %bb.55:                               # %if.then.i.i.3
                                        #   in Loop: Header=BB108_48 Depth=2
	movslq	-4(%rdi), %rcx
	decq	%rcx
	imulq	%rbx, %rcx
	addq	%rcx, %rax
	jmp	.LBB108_47
	.p2align	4, 0x90
.LBB108_56:                             # %for.body.i12.i.preheader.new
                                        #   in Loop: Header=BB108_27 Depth=1
	movl	%r9d, %r10d
	andl	$-4, %r10d
	leaq	56(%r8), %rbx
	xorl	%edx, %edx
	xorl	%edi, %edi
	jmp	.LBB108_58
	.p2align	4, 0x90
.LBB108_64:                             # %if.then.i18.i.2
                                        #   in Loop: Header=BB108_58 Depth=2
	movslq	-20(%rbx), %rsi
	decq	%rsi
	imulq	%rcx, %rsi
	addq	%rsi, %rdi
	movslq	(%rbx), %rcx
	testq	%rcx, %rcx
	js	.LBB108_65
.LBB108_57:                             # %if.end.i22.i.3
                                        #   in Loop: Header=BB108_58 Depth=2
	addq	$4, %rdx
	addq	$64, %rbx
	cmpq	%rdx, %r10
	je	.LBB108_37
.LBB108_58:                             # %for.body.i12.i
                                        #   Parent Loop BB108_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	-48(%rbx), %rcx
	testq	%rcx, %rcx
	js	.LBB108_62
# %bb.59:                               # %if.end.i22.i
                                        #   in Loop: Header=BB108_58 Depth=2
	movslq	-32(%rbx), %rcx
	testq	%rcx, %rcx
	js	.LBB108_63
.LBB108_60:                             # %if.end.i22.i.1
                                        #   in Loop: Header=BB108_58 Depth=2
	movslq	-16(%rbx), %rcx
	testq	%rcx, %rcx
	jns	.LBB108_61
	jmp	.LBB108_64
	.p2align	4, 0x90
.LBB108_62:                             # %if.then.i18.i
                                        #   in Loop: Header=BB108_58 Depth=2
	movslq	-52(%rbx), %rsi
	decq	%rsi
	imulq	%rcx, %rsi
	addq	%rsi, %rdi
	movslq	-32(%rbx), %rcx
	testq	%rcx, %rcx
	jns	.LBB108_60
.LBB108_63:                             # %if.then.i18.i.1
                                        #   in Loop: Header=BB108_58 Depth=2
	movslq	-36(%rbx), %rsi
	decq	%rsi
	imulq	%rcx, %rsi
	addq	%rsi, %rdi
	movslq	-16(%rbx), %rcx
	testq	%rcx, %rcx
	js	.LBB108_64
.LBB108_61:                             # %if.end.i22.i.2
                                        #   in Loop: Header=BB108_58 Depth=2
	movslq	(%rbx), %rcx
	testq	%rcx, %rcx
	jns	.LBB108_57
.LBB108_65:                             # %if.then.i18.i.3
                                        #   in Loop: Header=BB108_58 Depth=2
	movslq	-4(%rbx), %rsi
	decq	%rsi
	imulq	%rcx, %rsi
	addq	%rsi, %rdi
	addq	$4, %rdx
	addq	$64, %rbx
	cmpq	%rdx, %r10
	jne	.LBB108_58
	.p2align	4, 0x90
.LBB108_37:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa
                                        #   in Loop: Header=BB108_27 Depth=1
	testb	$3, %r9b
	je	.LBB108_42
# %bb.38:                               # %for.body.i12.i.epil.preheader
                                        #   in Loop: Header=BB108_27 Depth=1
	shlq	$4, %rdx
	addq	%r8, %rdx
	addq	$8, %rdx
	shlq	$4, %r11
	xorl	%esi, %esi
	jmp	.LBB108_40
	.p2align	4, 0x90
.LBB108_39:                             # %if.end.i22.i.epil
                                        #   in Loop: Header=BB108_40 Depth=2
	addq	$16, %rsi
	cmpq	%rsi, %r11
	je	.LBB108_42
.LBB108_40:                             # %for.body.i12.i.epil
                                        #   Parent Loop BB108_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	(%rdx,%rsi), %rcx
	testq	%rcx, %rcx
	jns	.LBB108_39
# %bb.41:                               # %if.then.i18.i.epil
                                        #   in Loop: Header=BB108_40 Depth=2
	movslq	-4(%rdx,%rsi), %rbx
	decq	%rbx
	imulq	%rcx, %rbx
	addq	%rbx, %rdi
	jmp	.LBB108_39
	.p2align	4, 0x90
.LBB108_42:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
                                        #   in Loop: Header=BB108_27 Depth=1
	incq	%rax
.LBB108_44:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit
                                        #   in Loop: Header=BB108_27 Depth=1
	subq	%rdi, %rax
	movzbl	33(%r15), %esi
	addq	$7, %rsi
	shrq	$3, %rsi
	imulq	%rax, %rsi
	addq	$64, %rsi
	movq	-72(%rbp), %rdi                 # 8-byte Reload
	callq	halide_malloc@PLT
	movq	%rax, 16(%r15)
	testq	%rax, %rax
	je	.LBB108_66
# %bb.45:                               # %for.inc114
                                        #   in Loop: Header=BB108_27 Depth=1
	addq	$64, %rax
	movq	%rax, 16(%r15)
	movq	%rax, %rdi
	callq	_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh@PLT
	movl	-60(%rbp), %ecx                 # 4-byte Reload
	movl	%ecx, 8(%rax)
	movq	$0, (%rax)
	incq	%r12
	incq	%r13
	incq	%r14
	cmpq	-56(%rbp), %r12                 # 8-byte Folded Reload
	movq	-88(%rbp), %r15                 # 8-byte Reload
	jne	.LBB108_27
# %bb.70:
	movl	$1, %ebx
	jmp	.LBB108_72
.LBB108_66:                             # %for.cond89.preheader
	testq	%r12, %r12
	je	.LBB108_71
# %bb.67:                               # %for.body92.preheader
	movq	-88(%rbp), %r15                 # 8-byte Reload
	movq	-72(%rbp), %r12                 # 8-byte Reload
	.p2align	4, 0x90
.LBB108_68:                             # %for.body92
                                        # =>This Inner Loop Header: Depth=1
	movl	%r14d, %ebx
	movq	(%r15,%rbx,8), %rax
	movq	16(%rax), %rdi
	callq	_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh@PLT
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	halide_free@PLT
	movq	(%r15,%rbx,8), %rax
	movq	$0, 16(%rax)
	decq	%r13
	decq	%r14
	cmpq	$1, %r13
	jg	.LBB108_68
.LBB108_71:
	movl	$-1, %ebx
.LBB108_72:                             # %cleanup119
	movq	_ZN6Halide7Runtime8Internal16memoization_lockE@GOTPCREL(%rip), %rdi
	vzeroupper
	callq	halide_mutex_unlock@PLT
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB108_73:                             # %do.body33
	movq	%r12, %r13
	movq	%r15, %r12
	movq	_ZN6Halide7Runtime8Internal19least_recently_usedE@GOTPCREL(%rip), %rcx
	cmpq	%rbx, (%rcx)
	je	.LBB108_75
# %bb.74:                               # %if.then35
	leaq	.L.str.4.44(%rip), %rsi
	movq	%r13, %rdi
	movq	%rdx, %r15
	callq	halide_print@PLT
	callq	abort@PLT
	movq	_ZN6Halide7Runtime8Internal19least_recently_usedE@GOTPCREL(%rip), %rcx
	movq	%r15, %rdx
.LBB108_75:                             # %do.end38
	movq	8(%rbx), %rax
	movq	%rax, (%rcx)
	movq	%r12, %r15
	movq	%r13, %r12
.LBB108_76:                             # %do.body41
	testq	%rax, %rax
	jne	.LBB108_78
# %bb.77:                               # %if.then44
	leaq	.L.str.5.45(%rip), %rsi
	movq	%r12, %rdi
	movq	%rdx, %r12
	callq	halide_print@PLT
	callq	abort@PLT
	movq	%r12, %rdx
	movq	8(%rbx), %rax
.LBB108_78:                             # %do.end47
	movq	16(%rbx), %rcx
	movq	%rcx, 16(%rax)
	movq	$0, 8(%rbx)
	movq	(%r14), %rax
	movq	%rax, 16(%rbx)
	testq	%rax, %rax
	je	.LBB108_80
# %bb.79:                               # %if.then54
	movq	%rbx, 8(%rax)
.LBB108_80:                             # %if.end56
	movq	%rbx, (%r14)
.LBB108_81:                             # %if.end57
	movl	-44(%rbp), %r9d                 # 4-byte Reload
	testl	%r9d, %r9d
	jle	.LBB108_89
# %bb.82:                               # %for.body62.preheader
	movl	%r9d, %r10d
	leaq	-1(%r10), %rax
	movl	%r10d, %r8d
	andl	$3, %r8d
	cmpq	$3, %rax
	jae	.LBB108_84
# %bb.83:
	xorl	%eax, %eax
	jmp	.LBB108_86
.LBB108_84:                             # %for.body62.preheader.new
	andl	$-4, %r10d
	xorl	%esi, %esi
	xorl	%eax, %eax
	.p2align	4, 0x90
.LBB108_85:                             # %for.body62
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r15,%rax,8), %rdi
	movq	(%rdx), %rcx
	vmovups	(%rcx,%rsi), %ymm0
	vmovups	24(%rcx,%rsi), %ymm1
	vmovups	%ymm1, 24(%rdi)
	vmovups	%ymm0, (%rdi)
	movq	8(%r15,%rax,8), %rcx
	movq	(%rdx), %rdi
	vmovups	56(%rdi,%rsi), %ymm0
	vmovups	80(%rdi,%rsi), %ymm1
	vmovups	%ymm1, 24(%rcx)
	vmovups	%ymm0, (%rcx)
	movq	16(%r15,%rax,8), %rcx
	movq	(%rdx), %rdi
	vmovups	112(%rdi,%rsi), %ymm0
	vmovups	136(%rdi,%rsi), %ymm1
	vmovups	%ymm1, 24(%rcx)
	vmovups	%ymm0, (%rcx)
	movq	24(%r15,%rax,8), %rcx
	movq	(%rdx), %rdi
	vmovups	168(%rdi,%rsi), %ymm0
	vmovups	192(%rdi,%rsi), %ymm1
	vmovups	%ymm1, 24(%rcx)
	vmovups	%ymm0, (%rcx)
	addq	$4, %rax
	addq	$224, %rsi
	cmpq	%rax, %r10
	jne	.LBB108_85
.LBB108_86:                             # %cleanup119.loopexit223.loopexit.unr-lcssa
	testq	%r8, %r8
	je	.LBB108_89
# %bb.87:                               # %for.body62.epil.preheader
	imulq	$56, %rax, %rcx
	leaq	(%r15,%rax,8), %r10
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB108_88:                             # %for.body62.epil
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r10,%rsi,8), %rax
	movq	(%rdx), %rdi
	vmovups	(%rdi,%rcx), %ymm0
	vmovups	24(%rdi,%rcx), %ymm1
	vmovups	%ymm1, 24(%rax)
	vmovups	%ymm0, (%rax)
	addq	$56, %rcx
	incq	%rsi
	cmpq	%rsi, %r8
	jne	.LBB108_88
.LBB108_89:                             # %cleanup119.loopexit223
	addl	%r9d, 52(%rbx)
	xorl	%ebx, %ebx
	jmp	.LBB108_72
.Lfunc_end108:
	.size	halide_memoization_cache_lookup, .Lfunc_end108-halide_memoization_cache_lookup
                                        # -- End function
	.section	.text.halide_memoization_cache_store,"ax",@progbits
	.weak	halide_memoization_cache_store  # -- Begin function halide_memoization_cache_store
	.p2align	4, 0x90
	.type	halide_memoization_cache_store,@function
halide_memoization_cache_store:         # @halide_memoization_cache_store
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$72, %rsp
	movl	%r8d, %r14d
	movq	%rcx, %r13
	movl	%edx, %r12d
	movq	%rsi, -72(%rbp)                 # 8-byte Spill
	movq	%rdi, -80(%rbp)                 # 8-byte Spill
	movq	%r9, -64(%rbp)                  # 8-byte Spill
	movq	(%r9), %rax
	movq	16(%rax), %rdi
	callq	_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh@PLT
	movl	8(%rax), %r15d
	movzbl	%r15b, %ebx
	movq	_ZN6Halide7Runtime8Internal16memoization_lockE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_lock@PLT
	movq	_ZN6Halide7Runtime8Internal13cache_entriesE@GOTPCREL(%rip), %rax
	movslq	%r12d, %rcx
	movq	%rcx, -56(%rbp)                 # 8-byte Spill
	movq	%rbx, -104(%rbp)                # 8-byte Spill
	movq	(%rax,%rbx,8), %rbx
	testq	%rbx, %rbx
	movl	%r14d, -44(%rbp)                # 4-byte Spill
	movq	%r13, -96(%rbp)                 # 8-byte Spill
	movq	%r15, -88(%rbp)                 # 8-byte Spill
	je	.LBB109_13
# %bb.1:                                # %while.body.preheader
	movq	%r15, %r12
	testl	%r14d, %r14d
	jle	.LBB109_22
# %bb.2:                                # %while.body.us.preheader
	movslq	%r14d, %rax
	movq	%rax, -112(%rbp)                # 8-byte Spill
	jmp	.LBB109_3
	.p2align	4, 0x90
.LBB109_27:                             # %if.end59
                                        #   in Loop: Header=BB109_22 Depth=1
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	je	.LBB109_13
.LBB109_22:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	cmpl	%r12d, 48(%rbx)
	jne	.LBB109_27
# %bb.23:                               # %land.lhs.true
                                        #   in Loop: Header=BB109_22 Depth=1
	movq	-56(%rbp), %rax                 # 8-byte Reload
	cmpq	%rax, 32(%rbx)
	jne	.LBB109_27
# %bb.24:                               # %land.lhs.true12
                                        #   in Loop: Header=BB109_22 Depth=1
	movq	40(%rbx), %rdi
	movq	-72(%rbp), %rsi                 # 8-byte Reload
	movq	-56(%rbp), %rdx                 # 8-byte Reload
	callq	_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m@PLT
	testb	%al, %al
	je	.LBB109_27
# %bb.25:                               # %land.lhs.true15
                                        #   in Loop: Header=BB109_22 Depth=1
	movq	64(%rbx), %rsi
	movq	%r13, %rdi
	callq	_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t@PLT
	testb	%al, %al
	je	.LBB109_27
# %bb.26:                               # %land.lhs.true18
                                        #   in Loop: Header=BB109_22 Depth=1
	cmpl	%r14d, 56(%rbx)
	jne	.LBB109_27
	jmp	.LBB109_78
.LBB109_11:                             # %for.cond.cleanup.us
                                        #   in Loop: Header=BB109_3 Depth=1
	testb	%al, %al
	movl	-44(%rbp), %r14d                # 4-byte Reload
	movq	-96(%rbp), %r13                 # 8-byte Reload
	movq	-88(%rbp), %r12                 # 8-byte Reload
	jne	.LBB109_28
	.p2align	4, 0x90
.LBB109_12:                             # %if.end59.us
                                        #   in Loop: Header=BB109_3 Depth=1
	movq	(%rbx), %rbx
	testq	%rbx, %rbx
	je	.LBB109_13
.LBB109_3:                              # %while.body.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_9 Depth 2
	cmpl	%r12d, 48(%rbx)
	jne	.LBB109_12
# %bb.4:                                # %land.lhs.true.us
                                        #   in Loop: Header=BB109_3 Depth=1
	movq	-56(%rbp), %rax                 # 8-byte Reload
	cmpq	%rax, 32(%rbx)
	jne	.LBB109_12
# %bb.5:                                # %land.lhs.true12.us
                                        #   in Loop: Header=BB109_3 Depth=1
	movq	40(%rbx), %rdi
	movq	-72(%rbp), %rsi                 # 8-byte Reload
	movq	-56(%rbp), %rdx                 # 8-byte Reload
	callq	_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m@PLT
	testb	%al, %al
	je	.LBB109_12
# %bb.6:                                # %land.lhs.true15.us
                                        #   in Loop: Header=BB109_3 Depth=1
	movq	64(%rbx), %rsi
	movq	%r13, %rdi
	callq	_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t@PLT
	testb	%al, %al
	je	.LBB109_12
# %bb.7:                                # %land.lhs.true18.us
                                        #   in Loop: Header=BB109_3 Depth=1
	cmpl	%r14d, 56(%rbx)
	jne	.LBB109_12
# %bb.8:                                # %for.cond.preheader.us
                                        #   in Loop: Header=BB109_3 Depth=1
	movq	72(%rbx), %rcx
	movb	$1, %r15b
	movl	$1, %r12d
	xorl	%r14d, %r14d
	.p2align	4, 0x90
.LBB109_9:                              # %for.body.us
                                        #   Parent Loop BB109_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-64(%rbp), %rax                 # 8-byte Reload
	movq	-8(%rax,%r12,8), %r13
	movq	40(%rcx,%r14), %rsi
	movq	%r13, %rdi
	callq	_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t@PLT
	movq	72(%rbx), %rcx
	movq	16(%rcx,%r14), %rdx
	cmpq	16(%r13), %rdx
	movzbl	%r15b, %r15d
	movl	$0, %edx
	cmovel	%edx, %r15d
	testb	%al, %al
	je	.LBB109_11
# %bb.10:                               # %for.body.us
                                        #   in Loop: Header=BB109_9 Depth=2
	leaq	1(%r12), %rdx
	addq	$56, %r14
	cmpq	-112(%rbp), %r12                # 8-byte Folded Reload
	movq	%rdx, %r12
	jl	.LBB109_9
	jmp	.LBB109_11
.LBB109_13:                             # %for.cond61.preheader
	testl	%r14d, %r14d
	jle	.LBB109_14
# %bb.32:                               # %for.body64.preheader
	movl	%r14d, %r8d
	xorl	%r15d, %r15d
	xorl	%r12d, %r12d
	jmp	.LBB109_33
	.p2align	4, 0x90
.LBB109_49:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
                                        #   in Loop: Header=BB109_33 Depth=1
	incq	%rsi
.LBB109_50:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit
                                        #   in Loop: Header=BB109_33 Depth=1
	subq	%rdx, %rsi
	movzbl	33(%r11), %eax
	addq	$7, %rax
	shrq	$3, %rax
	imulq	%rsi, %rax
	addq	%rax, %r12
	incq	%r15
	cmpq	%r8, %r15
	je	.LBB109_15
.LBB109_33:                             # %for.body64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_52 Depth 2
                                        #     Child Loop BB109_39 Depth 2
                                        #     Child Loop BB109_62 Depth 2
                                        #     Child Loop BB109_46 Depth 2
	movq	-64(%rbp), %rax                 # 8-byte Reload
	movq	(%rax,%r15,8), %r11
	movl	36(%r11), %r13d
	testl	%r13d, %r13d
	jle	.LBB109_34
# %bb.35:                               # %for.body.preheader.i.i
                                        #   in Loop: Header=BB109_33 Depth=1
	movq	40(%r11), %r9
	leaq	-1(%r13), %r10
	movl	%r13d, %r14d
	andl	$3, %r14d
	cmpq	$3, %r10
	jae	.LBB109_51
# %bb.36:                               #   in Loop: Header=BB109_33 Depth=1
	xorl	%edx, %edx
	xorl	%esi, %esi
.LBB109_37:                             # %for.body.i12.i.preheader.unr-lcssa
                                        #   in Loop: Header=BB109_33 Depth=1
	testq	%r14, %r14
	je	.LBB109_42
# %bb.38:                               # %for.body.i.i.epil.preheader
                                        #   in Loop: Header=BB109_33 Depth=1
	shlq	$4, %rdx
	leaq	(%r9,%rdx), %rax
	addq	$8, %rax
	movq	%r14, %rcx
	shlq	$4, %rcx
	xorl	%edx, %edx
	jmp	.LBB109_39
	.p2align	4, 0x90
.LBB109_41:                             # %if.end.i.i.epil
                                        #   in Loop: Header=BB109_39 Depth=2
	addq	$16, %rdx
	cmpq	%rdx, %rcx
	je	.LBB109_42
.LBB109_39:                             # %for.body.i.i.epil
                                        #   Parent Loop BB109_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	(%rax,%rdx), %ebx
	testl	%ebx, %ebx
	jle	.LBB109_41
# %bb.40:                               # %if.then.i.i.epil
                                        #   in Loop: Header=BB109_39 Depth=2
	movslq	-4(%rax,%rdx), %rdi
	decq	%rdi
	imulq	%rbx, %rdi
	addq	%rdi, %rsi
	jmp	.LBB109_41
	.p2align	4, 0x90
.LBB109_42:                             # %for.body.i12.i.preheader
                                        #   in Loop: Header=BB109_33 Depth=1
	cmpq	$3, %r10
	jae	.LBB109_61
# %bb.43:                               #   in Loop: Header=BB109_33 Depth=1
	xorl	%ebx, %ebx
	xorl	%edx, %edx
.LBB109_44:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa
                                        #   in Loop: Header=BB109_33 Depth=1
	testb	$3, %r13b
	je	.LBB109_49
# %bb.45:                               # %for.body.i12.i.epil.preheader
                                        #   in Loop: Header=BB109_33 Depth=1
	shlq	$4, %rbx
	leaq	(%r9,%rbx), %rax
	addq	$8, %rax
	shlq	$4, %r14
	xorl	%ecx, %ecx
	jmp	.LBB109_46
	.p2align	4, 0x90
.LBB109_48:                             # %if.end.i22.i.epil
                                        #   in Loop: Header=BB109_46 Depth=2
	addq	$16, %rcx
	cmpq	%rcx, %r14
	je	.LBB109_49
.LBB109_46:                             # %for.body.i12.i.epil
                                        #   Parent Loop BB109_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	(%rax,%rcx), %rdi
	testq	%rdi, %rdi
	jns	.LBB109_48
# %bb.47:                               # %if.then.i18.i.epil
                                        #   in Loop: Header=BB109_46 Depth=2
	movslq	-4(%rax,%rcx), %rbx
	decq	%rbx
	imulq	%rdi, %rbx
	addq	%rbx, %rdx
	jmp	.LBB109_48
	.p2align	4, 0x90
.LBB109_34:                             #   in Loop: Header=BB109_33 Depth=1
	movl	$1, %esi
	xorl	%edx, %edx
	jmp	.LBB109_50
	.p2align	4, 0x90
.LBB109_51:                             # %for.body.preheader.i.i.new
                                        #   in Loop: Header=BB109_33 Depth=1
	movl	%r13d, %ebx
	andl	$-4, %ebx
	leaq	56(%r9), %rax
	xorl	%edx, %edx
	xorl	%esi, %esi
	jmp	.LBB109_52
	.p2align	4, 0x90
.LBB109_60:                             # %if.end.i.i.3
                                        #   in Loop: Header=BB109_52 Depth=2
	addq	$4, %rdx
	addq	$64, %rax
	cmpq	%rdx, %rbx
	je	.LBB109_37
.LBB109_52:                             # %for.body.i.i
                                        #   Parent Loop BB109_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rax), %ecx
	testl	%ecx, %ecx
	jle	.LBB109_54
# %bb.53:                               # %if.then.i.i
                                        #   in Loop: Header=BB109_52 Depth=2
	movslq	-52(%rax), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rsi
.LBB109_54:                             # %if.end.i.i
                                        #   in Loop: Header=BB109_52 Depth=2
	movl	-32(%rax), %ecx
	testl	%ecx, %ecx
	jle	.LBB109_56
# %bb.55:                               # %if.then.i.i.1
                                        #   in Loop: Header=BB109_52 Depth=2
	movslq	-36(%rax), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rsi
.LBB109_56:                             # %if.end.i.i.1
                                        #   in Loop: Header=BB109_52 Depth=2
	movl	-16(%rax), %ecx
	testl	%ecx, %ecx
	jle	.LBB109_58
# %bb.57:                               # %if.then.i.i.2
                                        #   in Loop: Header=BB109_52 Depth=2
	movslq	-20(%rax), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rsi
.LBB109_58:                             # %if.end.i.i.2
                                        #   in Loop: Header=BB109_52 Depth=2
	movl	(%rax), %ecx
	testl	%ecx, %ecx
	jle	.LBB109_60
# %bb.59:                               # %if.then.i.i.3
                                        #   in Loop: Header=BB109_52 Depth=2
	movslq	-4(%rax), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rsi
	jmp	.LBB109_60
	.p2align	4, 0x90
.LBB109_61:                             # %for.body.i12.i.preheader.new
                                        #   in Loop: Header=BB109_33 Depth=1
	movl	%r13d, %r10d
	andl	$-4, %r10d
	leaq	56(%r9), %rcx
	xorl	%ebx, %ebx
	xorl	%edx, %edx
	jmp	.LBB109_62
	.p2align	4, 0x90
.LBB109_70:                             # %if.end.i22.i.3
                                        #   in Loop: Header=BB109_62 Depth=2
	addq	$4, %rbx
	addq	$64, %rcx
	cmpq	%rbx, %r10
	je	.LBB109_44
.LBB109_62:                             # %for.body.i12.i
                                        #   Parent Loop BB109_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	-48(%rcx), %rdi
	testq	%rdi, %rdi
	js	.LBB109_63
# %bb.64:                               # %if.end.i22.i
                                        #   in Loop: Header=BB109_62 Depth=2
	movslq	-32(%rcx), %rdi
	testq	%rdi, %rdi
	js	.LBB109_65
.LBB109_66:                             # %if.end.i22.i.1
                                        #   in Loop: Header=BB109_62 Depth=2
	movslq	-16(%rcx), %rdi
	testq	%rdi, %rdi
	js	.LBB109_67
.LBB109_68:                             # %if.end.i22.i.2
                                        #   in Loop: Header=BB109_62 Depth=2
	movslq	(%rcx), %rdi
	testq	%rdi, %rdi
	jns	.LBB109_70
	jmp	.LBB109_69
	.p2align	4, 0x90
.LBB109_63:                             # %if.then.i18.i
                                        #   in Loop: Header=BB109_62 Depth=2
	movslq	-52(%rcx), %rax
	decq	%rax
	imulq	%rdi, %rax
	addq	%rax, %rdx
	movslq	-32(%rcx), %rdi
	testq	%rdi, %rdi
	jns	.LBB109_66
.LBB109_65:                             # %if.then.i18.i.1
                                        #   in Loop: Header=BB109_62 Depth=2
	movslq	-36(%rcx), %rax
	decq	%rax
	imulq	%rdi, %rax
	addq	%rax, %rdx
	movslq	-16(%rcx), %rdi
	testq	%rdi, %rdi
	jns	.LBB109_68
.LBB109_67:                             # %if.then.i18.i.2
                                        #   in Loop: Header=BB109_62 Depth=2
	movslq	-20(%rcx), %rax
	decq	%rax
	imulq	%rdi, %rax
	addq	%rax, %rdx
	movslq	(%rcx), %rdi
	testq	%rdi, %rdi
	jns	.LBB109_70
.LBB109_69:                             # %if.then.i18.i.3
                                        #   in Loop: Header=BB109_62 Depth=2
	movslq	-4(%rcx), %rax
	decq	%rax
	imulq	%rdi, %rax
	addq	%rax, %rdx
	jmp	.LBB109_70
.LBB109_14:
	xorl	%r12d, %r12d
.LBB109_15:                             # %for.cond.cleanup63
	movq	_ZN6Halide7Runtime8Internal18current_cache_sizeE@GOTPCREL(%rip), %rbx
	addq	%r12, (%rbx)
	callq	_ZN6Halide7Runtime8Internal11prune_cacheEv@PLT
	movl	$96, %esi
	xorl	%edi, %edi
	callq	halide_malloc@PLT
	movq	%rax, %r13
	testq	%rax, %rax
	movq	-64(%rbp), %r15                 # 8-byte Reload
	je	.LBB109_17
# %bb.16:                               # %if.then76
	movb	16(%rbp), %al
	subq	$8, %rsp
	movzbl	%al, %eax
	movq	%r13, %rdi
	movq	-72(%rbp), %rsi                 # 8-byte Reload
	movq	-56(%rbp), %rdx                 # 8-byte Reload
	movq	-88(%rbp), %rcx                 # 8-byte Reload
                                        # kill: def $ecx killed $ecx killed $rcx
	movq	-96(%rbp), %r8                  # 8-byte Reload
	movl	-44(%rbp), %r9d                 # 4-byte Reload
	pushq	24(%rbp)
	pushq	%rax
	pushq	%r15
	callq	_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by@PLT
	addq	$32, %rsp
	testb	%al, %al
	je	.LBB109_17
# %bb.71:                               # %if.end101
	movq	-104(%rbp), %rdx                # 8-byte Reload
	movq	_ZN6Halide7Runtime8Internal13cache_entriesE@GOTPCREL(%rip), %rsi
	movq	(%rsi,%rdx,8), %rax
	movq	%rax, (%r13)
	movq	_ZN6Halide7Runtime8Internal18most_recently_usedE@GOTPCREL(%rip), %rax
	movq	(%rax), %rcx
	movq	%rcx, 16(%r13)
	testq	%rcx, %rcx
	je	.LBB109_73
# %bb.72:                               # %if.then106
	movq	%r13, 8(%rcx)
.LBB109_73:                             # %if.end107
	movq	%r13, (%rax)
	movq	_ZN6Halide7Runtime8Internal19least_recently_usedE@GOTPCREL(%rip), %rax
	cmpq	$0, (%rax)
	movl	-44(%rbp), %ecx                 # 4-byte Reload
	jne	.LBB109_75
# %bb.74:                               # %if.then109
	movq	%r13, (%rax)
.LBB109_75:                             # %if.end110
	movq	%r13, (%rsi,%rdx,8)
	movl	%ecx, 52(%r13)
	testl	%ecx, %ecx
	jle	.LBB109_78
# %bb.76:                               # %for.body117.preheader
	movl	%ecx, %r14d
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB109_77:                             # %for.body117
                                        # =>This Inner Loop Header: Depth=1
	movq	-64(%rbp), %rax                 # 8-byte Reload
	movq	(%rax,%rbx,8), %rax
	movq	16(%rax), %rdi
	callq	_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh@PLT
	movq	%r13, (%rax)
	incq	%rbx
	cmpq	%rbx, %r14
	jne	.LBB109_77
	jmp	.LBB109_78
.LBB109_17:                             # %if.then83
	subq	%r12, (%rbx)
	movl	-44(%rbp), %eax                 # 4-byte Reload
	testl	%eax, %eax
	jle	.LBB109_20
# %bb.18:                               # %for.body88.preheader
	movl	%eax, %r14d
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB109_19:                             # %for.body88
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r15,%rbx,8), %rax
	movq	16(%rax), %rdi
	callq	_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh@PLT
	movq	$0, (%rax)
	incq	%rbx
	cmpq	%rbx, %r14
	jne	.LBB109_19
.LBB109_20:                             # %for.cond.cleanup87
	testq	%r13, %r13
	je	.LBB109_78
# %bb.21:                               # %if.then99
	movq	-80(%rbp), %rdi                 # 8-byte Reload
	movq	%r13, %rsi
	callq	halide_free@PLT
.LBB109_78:                             # %cleanup132
	movq	_ZN6Halide7Runtime8Internal16memoization_lockE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_unlock@PLT
	xorl	%eax, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB109_28:                             # %do.body
	testb	$1, %r15b
	jne	.LBB109_30
# %bb.29:                               # %if.then42
	leaq	.L.str.9.46(%rip), %rsi
	movq	-80(%rbp), %rdi                 # 8-byte Reload
	callq	halide_print@PLT
	callq	abort@PLT
.LBB109_30:                             # %for.body48.preheader
	movl	%r14d, %r14d
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB109_31:                             # %for.body48
                                        # =>This Inner Loop Header: Depth=1
	movq	-64(%rbp), %rax                 # 8-byte Reload
	movq	(%rax,%rbx,8), %rax
	movq	16(%rax), %rdi
	callq	_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh@PLT
	movq	$0, (%rax)
	incq	%rbx
	cmpq	%rbx, %r14
	jne	.LBB109_31
	jmp	.LBB109_78
.Lfunc_end109:
	.size	halide_memoization_cache_store, .Lfunc_end109-halide_memoization_cache_store
                                        # -- End function
	.section	.text.halide_memoization_cache_release,"ax",@progbits
	.weak	halide_memoization_cache_release # -- Begin function halide_memoization_cache_release
	.p2align	4, 0x90
	.type	halide_memoization_cache_release,@function
halide_memoization_cache_release:       # @halide_memoization_cache_release
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	%rdi, %r14
	movq	%rsi, %rdi
	callq	_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh@PLT
	movq	(%rax), %rbx
	testq	%rbx, %rbx
	je	.LBB110_4
# %bb.1:                                # %if.else
	movq	_ZN6Halide7Runtime8Internal16memoization_lockE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_lock@PLT
	movl	52(%rbx), %eax
	testl	%eax, %eax
	jne	.LBB110_3
# %bb.2:                                # %if.then4
	leaq	.L.str.12.47(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
	movl	52(%rbx), %eax
.LBB110_3:                              # %do.end
	decl	%eax
	movl	%eax, 52(%rbx)
	movq	_ZN6Halide7Runtime8Internal16memoization_lockE@GOTPCREL(%rip), %rdi
	popq	%rbx
	popq	%r14
	popq	%rbp
	jmp	halide_mutex_unlock@PLT         # TAILCALL
.LBB110_4:                              # %if.then
	movq	%r14, %rdi
	movq	%rax, %rsi
	popq	%rbx
	popq	%r14
	popq	%rbp
	jmp	halide_free@PLT                 # TAILCALL
.Lfunc_end110:
	.size	halide_memoization_cache_release, .Lfunc_end110-halide_memoization_cache_release
                                        # -- End function
	.section	.text.halide_memoization_cache_evict,"ax",@progbits
	.weak	halide_memoization_cache_evict  # -- Begin function halide_memoization_cache_evict
	.p2align	4, 0x90
	.type	halide_memoization_cache_evict,@function
halide_memoization_cache_evict:         # @halide_memoization_cache_evict
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	movq	%rsi, %r15
	movq	%rdi, -56(%rbp)                 # 8-byte Spill
	movq	_ZN6Halide7Runtime8Internal16memoization_lockE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_lock@PLT
	movq	_ZN6Halide7Runtime8Internal13cache_entriesE@GOTPCREL(%rip), %r14
	movl	$2048, %eax                     # imm = 0x800
	addq	_ZN6Halide7Runtime8Internal13cache_entriesE@GOTPCREL(%rip), %rax
	movq	%rax, -48(%rbp)                 # 8-byte Spill
	jmp	.LBB111_1
	.p2align	4, 0x90
.LBB111_13:                             # %if.end25
                                        #   in Loop: Header=BB111_1 Depth=1
	addq	$8, %r14
	cmpq	-48(%rbp), %r14                 # 8-byte Folded Reload
	je	.LBB111_14
.LBB111_1:                              # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_3 Depth 2
	movq	(%r14), %r13
	testq	%r13, %r13
	je	.LBB111_13
# %bb.2:                                # %while.body.preheader
                                        #   in Loop: Header=BB111_1 Depth=1
	movq	%r14, %r12
	jmp	.LBB111_3
.LBB111_10:                             # %if.end
                                        #   in Loop: Header=BB111_3 Depth=2
	movq	_ZN6Halide7Runtime8Internal19least_recently_usedE@GOTPCREL(%rip), %rcx
.LBB111_11:                             # %if.end
                                        #   in Loop: Header=BB111_3 Depth=2
	movq	%rax, (%rcx)
	movq	%rbx, %rdi
	callq	_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv@PLT
	movq	-56(%rbp), %rdi                 # 8-byte Reload
	movq	%rbx, %rsi
	callq	halide_free@PLT
	movq	%r12, %rbx
.LBB111_12:                             # %if.end24
                                        #   in Loop: Header=BB111_3 Depth=2
	movq	%rbx, %r12
	testq	%r13, %r13
	je	.LBB111_13
.LBB111_3:                              # %while.body
                                        #   Parent Loop BB111_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%r13, %rbx
	movq	(%r13), %r13
	cmpb	$0, 88(%rbx)
	je	.LBB111_12
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB111_3 Depth=2
	cmpq	%r15, 80(%rbx)
	jne	.LBB111_12
# %bb.5:                                # %if.then7
                                        #   in Loop: Header=BB111_3 Depth=2
	movq	%r13, (%r12)
	movq	8(%rbx), %rax
	movq	16(%rbx), %rcx
	testq	%rax, %rax
	je	.LBB111_7
# %bb.6:                                # %if.then9
                                        #   in Loop: Header=BB111_3 Depth=2
	movq	%rcx, 16(%rax)
	movq	16(%rbx), %rcx
	testq	%rcx, %rcx
	je	.LBB111_10
	jmp	.LBB111_9
.LBB111_7:                              # %if.else
                                        #   in Loop: Header=BB111_3 Depth=2
	movq	_ZN6Halide7Runtime8Internal18most_recently_usedE@GOTPCREL(%rip), %rdx
	movq	%rcx, (%rdx)
	testq	%rcx, %rcx
	je	.LBB111_10
.LBB111_9:                              #   in Loop: Header=BB111_3 Depth=2
	addq	$8, %rcx
	jmp	.LBB111_11
.LBB111_14:                             # %for.cond.cleanup
	movq	_ZN6Halide7Runtime8Internal16memoization_lockE@GOTPCREL(%rip), %rdi
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	halide_mutex_unlock@PLT         # TAILCALL
.Lfunc_end111:
	.size	halide_memoization_cache_evict, .Lfunc_end111-halide_memoization_cache_evict
                                        # -- End function
	.section	.text.halide_string_to_string,"ax",@progbits
	.weak	halide_string_to_string         # -- Begin function halide_string_to_string
	.p2align	4, 0x90
	.type	halide_string_to_string,@function
halide_string_to_string:                # @halide_string_to_string
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	cmpq	%rsi, %rdi
	jae	.LBB112_6
# %bb.1:                                # %if.end
	movq	%rsi, %rax
	testq	%rdx, %rdx
	leaq	.L.str.50(%rip), %rcx
	cmovneq	%rdx, %rcx
	.p2align	4, 0x90
.LBB112_2:                              # %if.end5
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%rcx), %edx
	movb	%dl, (%rdi)
	testb	%dl, %dl
	je	.LBB112_6
# %bb.3:                                # %if.end8
                                        #   in Loop: Header=BB112_2 Depth=1
	incq	%rdi
	incq	%rcx
	cmpq	%rax, %rdi
	jne	.LBB112_2
# %bb.4:                                # %if.then4
	movb	$0, -1(%rdi)
	popq	%rbp
	retq
.LBB112_6:
	movq	%rdi, %rax
	popq	%rbp
	retq
.Lfunc_end112:
	.size	halide_string_to_string, .Lfunc_end112-halide_string_to_string
                                        # -- End function
	.section	.text.halide_uint64_to_string,"ax",@progbits
	.weak	halide_uint64_to_string         # -- Begin function halide_uint64_to_string
	.p2align	4, 0x90
	.type	halide_uint64_to_string,@function
halide_uint64_to_string:                # @halide_uint64_to_string
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	subq	$32, %rsp
	movb	$0, -17(%rbp)
	leaq	-18(%rbp), %r8
	testl	%ecx, %ecx
	jg	.LBB113_2
# %bb.1:                                # %entry
	testq	%rdx, %rdx
	je	.LBB113_5
.LBB113_2:                              # %for.body.preheader
	movl	$1, %r10d
	movabsq	$-3689348814741910323, %r9      # imm = 0xCCCCCCCCCCCCCCCD
	.p2align	4, 0x90
.LBB113_3:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	%rdx, %r14
	movl	%r10d, %r11d
	mulxq	%r9, %rdx, %rdx
	shrq	$3, %rdx
	leal	(%rdx,%rdx), %eax
	leal	(%rax,%rax,4), %eax
	movl	%r14d, %ebx
	subl	%eax, %ebx
	addb	$48, %bl
	movb	%bl, (%r8)
	decq	%r8
	leal	1(%r11), %r10d
	cmpl	%ecx, %r11d
	jl	.LBB113_3
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB113_3 Depth=1
	cmpq	$9, %r14
	ja	.LBB113_3
.LBB113_5:                              # %for.cond.cleanup
	incq	%r8
	movq	%r8, %rdx
	callq	halide_string_to_string@PLT
	addq	$32, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end113:
	.size	halide_uint64_to_string, .Lfunc_end113-halide_uint64_to_string
                                        # -- End function
	.section	.text.halide_int64_to_string,"ax",@progbits
	.weak	halide_int64_to_string          # -- Begin function halide_int64_to_string
	.p2align	4, 0x90
	.type	halide_int64_to_string,@function
halide_int64_to_string:                 # @halide_int64_to_string
# %bb.0:                                # %entry
	testq	%rdx, %rdx
	jns	.LBB114_3
# %bb.1:                                # %entry
	cmpq	%rsi, %rdi
	jae	.LBB114_3
# %bb.2:                                # %if.then
	pushq	%rbp
	movq	%rsp, %rbp
	movb	$45, (%rdi)
	incq	%rdi
	negq	%rdx
	popq	%rbp
.LBB114_3:                              # %if.end
	jmp	halide_uint64_to_string@PLT     # TAILCALL
.Lfunc_end114:
	.size	halide_int64_to_string, .Lfunc_end114-halide_int64_to_string
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4                               # -- Begin function halide_double_to_string
.LCPI115_0:
	.quad	0x8000000000000000              # double -0
	.quad	0x8000000000000000              # double -0
.LCPI115_6:
	.long	1127219200                      # 0x43300000
	.long	1160773632                      # 0x45300000
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI115_7:
	.quad	0x4330000000000000              # double 4503599627370496
	.quad	0x4530000000000000              # double 1.9342813113834067E+25
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI115_1:
	.quad	0x3ff0000000000000              # double 1
.LCPI115_2:
	.quad	0x4024000000000000              # double 10
.LCPI115_3:
	.quad	0x412e848000000000              # double 1.0E+6
.LCPI115_4:
	.quad	0x3fe0000000000000              # double 0.5
.LCPI115_5:
	.quad	0x43e0000000000000              # double 9.2233720368547758E+18
	.section	.text.halide_double_to_string,"ax",@progbits
	.weak	halide_double_to_string
	.p2align	4, 0x90
	.type	halide_double_to_string,@function
halide_double_to_string:                # @halide_double_to_string
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$552, %rsp                      # imm = 0x228
	movl	%edx, %r14d
	movq	%rsi, %r12
	movq	%rdi, %r15
	vmovsd	%xmm0, -48(%rbp)
	movq	$0, -64(%rbp)
	leaq	-64(%rbp), %rdi
	leaq	-48(%rbp), %rsi
	movl	$8, %edx
	callq	memcpy@PLT
	movq	-64(%rbp), %rax
	movb	$52, %cl
	bzhiq	%rcx, %rax, %r13
	movq	%rax, %rbx
	shrq	$52, %rbx
	andl	$2047, %ebx                     # imm = 0x7FF
	cmpl	$2047, %ebx                     # imm = 0x7FF
	jne	.LBB115_9
# %bb.1:                                # %if.then
	testq	%r13, %r13
	je	.LBB115_6
# %bb.2:                                # %if.then4
	testq	%rax, %rax
	js	.LBB115_3
# %bb.5:                                # %if.else
	leaq	.L.str.2.58(%rip), %rdx
	jmp	.LBB115_4
.LBB115_9:                              # %if.else15
	testl	%ebx, %ebx
	jne	.LBB115_18
# %bb.10:                               # %if.else15
	testq	%r13, %r13
	jne	.LBB115_18
# %bb.11:                               # %if.then18
	testl	%r14d, %r14d
	je	.LBB115_15
# %bb.12:                               # %if.then20
	testq	%rax, %rax
	js	.LBB115_13
# %bb.14:                               # %if.else24
	leaq	.L.str.6.62(%rip), %rdx
	jmp	.LBB115_4
.LBB115_18:                             # %if.end32
	testq	%rax, %rax
	js	.LBB115_19
# %bb.20:                               # %if.end36
	testl	%r14d, %r14d
	je	.LBB115_34
.LBB115_21:                             # %while.condthread-pre-split
	vmovsd	-48(%rbp), %xmm0                # xmm0 = mem[0],zero
	xorl	%ebx, %ebx
	vmovsd	.LCPI115_1(%rip), %xmm1         # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB115_25
# %bb.22:                               # %while.body.preheader
	xorl	%ebx, %ebx
	vmovsd	.LCPI115_2(%rip), %xmm2         # xmm2 = mem[0],zero
	.p2align	4, 0x90
.LBB115_23:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	vmulsd	%xmm2, %xmm0, %xmm0
	decl	%ebx
	vucomisd	%xmm0, %xmm1
	ja	.LBB115_23
# %bb.24:                               # %while.cond.while.cond40thread-pre-split_crit_edge
	vmovsd	%xmm0, -48(%rbp)
.LBB115_25:                             # %while.cond40thread-pre-split
	vucomisd	.LCPI115_2(%rip), %xmm0
	jae	.LBB115_27
# %bb.26:
	movq	%r15, %rdi
	jmp	.LBB115_30
.LBB115_6:                              # %if.else9
	testq	%rax, %rax
	js	.LBB115_7
# %bb.8:                                # %if.else13
	leaq	.L.str.4.60(%rip), %rdx
	jmp	.LBB115_4
.LBB115_3:                              # %if.then6
	leaq	.L.str.1.57(%rip), %rdx
	jmp	.LBB115_4
.LBB115_15:                             # %if.else26
	testq	%rax, %rax
	js	.LBB115_16
# %bb.17:                               # %if.else30
	leaq	.L.str.8.64(%rip), %rdx
	jmp	.LBB115_4
.LBB115_19:                             # %if.then34
	leaq	.L.str.9.65(%rip), %rdx
	movq	%r15, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %r15
	vmovsd	-48(%rbp), %xmm0                # xmm0 = mem[0],zero
	vxorpd	.LCPI115_0(%rip), %xmm0, %xmm0
	vmovlpd	%xmm0, -48(%rbp)
	testl	%r14d, %r14d
	jne	.LBB115_21
.LBB115_34:                             # %if.else61
	testl	%ebx, %ebx
	je	.LBB115_35
# %bb.36:                               # %if.end65
	movq	%r15, -72(%rbp)                 # 8-byte Spill
	movabsq	$4503599627370495, %rax         # imm = 0xFFFFFFFFFFFFF
	incq	%rax
	orq	%rax, %r13
	xorl	%edi, %edi
	movl	%ebx, %r15d
	subl	$1075, %r15d                    # imm = 0x433
	jae	.LBB115_37
# %bb.38:                               # %if.then71
	movb	$51, %cl
	subb	%bl, %cl
	cmpl	$1023, %ebx                     # imm = 0x3FF
	shrxq	%rcx, %r13, %rax
	shlxq	%rcx, %rax, %rcx
	cmovbq	%rdi, %rax
	cmovbq	%rdi, %rcx
	subq	%rcx, %r13
	vmovq	%r13, %xmm0
	vmovdqa	.LCPI115_6(%rip), %xmm1         # xmm1 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm1, %xmm0, %xmm0     # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]
	vmovapd	.LCPI115_7(%rip), %xmm2         # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm0, %xmm0
	vpermilpd	$1, %xmm0, %xmm3        # xmm3 = xmm0[1,0]
	vaddsd	%xmm0, %xmm3, %xmm0
	shlq	$52, %r15
	movabsq	$4696837146684686336, %rcx      # imm = 0x412E848000000000
	addq	%r15, %rcx
	vmovq	%rcx, %xmm3
	vfmadd213sd	.LCPI115_4(%rip), %xmm0, %xmm3 # xmm3 = (xmm0 * xmm3) + mem
	vcvttsd2si	%xmm3, %rcx
	movq	%rcx, %rdx
	vsubsd	.LCPI115_5(%rip), %xmm3, %xmm0
	sarq	$63, %rdx
	vcvttsd2si	%xmm0, %rsi
	andq	%rdx, %rsi
	orq	%rcx, %rsi
	vmovq	%rsi, %xmm0
	vpunpckldq	%xmm1, %xmm0, %xmm0     # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]
	vsubpd	%xmm2, %xmm0, %xmm0
	vpermilpd	$1, %xmm0, %xmm1        # xmm1 = xmm0[1,0]
	vaddsd	%xmm0, %xmm1, %xmm0
	vucomisd	%xmm0, %xmm3
	setnp	%cl
	sete	%dl
	andb	%cl, %dl
	andb	%sil, %dl
	movzbl	%dl, %ecx
	subq	%rcx, %rsi
	xorl	%r13d, %r13d
	cmpq	$1000000, %rsi                  # imm = 0xF4240
	sete	%r13b
	cmovneq	%rsi, %rdi
	movq	%rdi, -56(%rbp)                 # 8-byte Spill
	addq	%rax, %r13
	xorl	%r15d, %r15d
	jmp	.LBB115_39
.LBB115_27:                             # %while.body42.preheader
	vmovsd	.LCPI115_2(%rip), %xmm1         # xmm1 = mem[0],zero
	.p2align	4, 0x90
.LBB115_28:                             # %while.body42
                                        # =>This Inner Loop Header: Depth=1
	vdivsd	%xmm1, %xmm0, %xmm0
	incl	%ebx
	vucomisd	%xmm1, %xmm0
	jae	.LBB115_28
# %bb.29:                               # %while.cond40.while.end43_crit_edge
	movq	%r15, %rdi
	vmovsd	%xmm0, -48(%rbp)
.LBB115_30:                             # %while.end43
	vmovsd	.LCPI115_3(%rip), %xmm1         # xmm1 = mem[0],zero
	vfmadd213sd	.LCPI115_4(%rip), %xmm0, %xmm1 # xmm1 = (xmm0 * xmm1) + mem
	vcvttsd2si	%xmm1, %rax
	movq	%rax, %rcx
	vsubsd	.LCPI115_5(%rip), %xmm1, %xmm0
	sarq	$63, %rcx
	vcvttsd2si	%xmm0, %rdx
	andq	%rcx, %rdx
	orq	%rax, %rdx
	movabsq	$4835703278458516699, %rax      # imm = 0x431BDE82D7B634DB
	mulxq	%rax, %rax, %rax
	shrq	$18, %rax
	imulq	$-1000000, %rax, %r15           # imm = 0xFFF0BDC0
	addq	%rdx, %r15
	movq	%r12, %rsi
	movq	%rax, %rdx
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.30.141(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movl	$6, %ecx
	callq	halide_int64_to_string@PLT
	testl	%ebx, %ebx
	js	.LBB115_32
# %bb.31:                               # %if.then53
	leaq	.L.str.11.67(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	jmp	.LBB115_33
.LBB115_7:                              # %if.then11
	leaq	.L.str.3.59(%rip), %rdx
	jmp	.LBB115_4
.LBB115_13:                             # %if.then22
	leaq	.L.str.5.61(%rip), %rdx
	jmp	.LBB115_4
.LBB115_32:                             # %if.else55
	leaq	.L.str.12.68(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	negl	%ebx
.LBB115_33:                             # %if.end58
	movl	%ebx, %edx
	movq	%rax, %rdi
	movq	%r12, %rsi
	movl	$2, %ecx
	jmp	.LBB115_54
.LBB115_16:                             # %if.then28
	leaq	.L.str.7.63(%rip), %rdx
.LBB115_4:                              # %cleanup147
	movq	%r15, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	jmp	.LBB115_55
.LBB115_35:                             # %if.then63
	vxorpd	%xmm0, %xmm0, %xmm0
	movq	%r15, %rdi
	movq	%r12, %rsi
	xorl	%edx, %edx
	callq	halide_double_to_string@PLT
	jmp	.LBB115_55
.LBB115_37:
	xorl	%eax, %eax
	movq	%rax, -56(%rbp)                 # 8-byte Spill
.LBB115_39:                             # %if.end104
	leaq	-72(%rbp), %rsi
	leaq	-104(%rbp), %r14
	movq	%r14, %rdi
	movq	%r13, %rdx
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	testl	%r15d, %r15d
	jle	.LBB115_40
# %bb.41:                               # %for.cond111.preheader.preheader
	xorl	%r8d, %r8d
	jmp	.LBB115_42
	.p2align	4, 0x90
.LBB115_51:                             # %if.end137
                                        #   in Loop: Header=BB115_42 Depth=1
	movq	%r14, %rdx
.LBB115_52:                             # %if.end137
                                        #   in Loop: Header=BB115_42 Depth=1
	incl	%r8d
	movq	%rdx, %r14
	cmpl	%r15d, %r8d
	je	.LBB115_53
.LBB115_42:                             # %for.cond111.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_45 Depth 2
                                        #     Child Loop BB115_48 Depth 2
	movq	%rax, %r10
	movq	%rax, %rdx
	subq	%r14, %r10
	je	.LBB115_52
# %bb.43:                               # %for.body115.preheader
                                        #   in Loop: Header=BB115_42 Depth=1
	movq	%r14, %rdi
	notq	%rdi
	addq	%rax, %rdi
	movl	%r10d, %r9d
	andl	$3, %r9d
	xorl	%ebx, %ebx
	movq	%rax, %rcx
	cmpq	$3, %rdi
	jb	.LBB115_46
# %bb.44:                               # %for.body115.preheader.new
                                        #   in Loop: Header=BB115_42 Depth=1
	andq	$-4, %r10
	negq	%r10
	xorl	%ebx, %ebx
	movq	%rax, %rdi
	.p2align	4, 0x90
.LBB115_45:                             # %for.body115
                                        #   Parent Loop BB115_42 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	-1(%rdi), %ecx
	addb	$-48, %cl
	movzbl	%cl, %ecx
	addl	%ecx, %ecx
	orl	%ebx, %ecx
	leal	-10(%rcx), %edx
	xorl	%ebx, %ebx
	cmpb	$10, %cl
	setge	%bl
	movzbl	%dl, %edx
	cmovll	%ecx, %edx
	addb	$48, %dl
	movb	%dl, -1(%rdi)
	movzbl	-2(%rdi), %ecx
	addb	$-48, %cl
	movzbl	%cl, %ecx
	addl	%ecx, %ecx
	orl	%ebx, %ecx
	leal	-10(%rcx), %edx
	xorl	%ebx, %ebx
	cmpb	$10, %cl
	setge	%bl
	movzbl	%dl, %edx
	cmovll	%ecx, %edx
	addb	$48, %dl
	movb	%dl, -2(%rdi)
	movzbl	-4(%rdi), %edx
	movzbl	-3(%rdi), %ecx
	addb	$-48, %cl
	movzbl	%cl, %ecx
	addl	%ecx, %ecx
	orl	%ebx, %ecx
	leal	-10(%rcx), %ebx
	xorl	%esi, %esi
	cmpb	$10, %cl
	setge	%sil
	movzbl	%bl, %ebx
	cmovll	%ecx, %ebx
	addb	$48, %bl
	movb	%bl, -3(%rdi)
	leaq	-4(%rdi), %rcx
	addb	$-48, %dl
	movzbl	%dl, %edx
	addl	%edx, %edx
	orl	%esi, %edx
	leal	-10(%rdx), %esi
	xorl	%ebx, %ebx
	cmpb	$10, %dl
	movzbl	%sil, %esi
	cmovll	%edx, %esi
	setge	%bl
	addb	$48, %sil
	movb	%sil, -4(%rdi)
	movq	%rcx, %rdi
	addq	$4, %r10
	jne	.LBB115_45
.LBB115_46:                             # %for.cond.cleanup114.unr-lcssa
                                        #   in Loop: Header=BB115_42 Depth=1
	testq	%r9, %r9
	je	.LBB115_49
# %bb.47:                               # %for.body115.epil.preheader
                                        #   in Loop: Header=BB115_42 Depth=1
	negq	%r9
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB115_48:                             # %for.body115.epil
                                        #   Parent Loop BB115_42 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	-1(%rcx,%rsi), %edx
	addb	$-48, %dl
	movzbl	%dl, %edx
	addl	%edx, %edx
	orl	%ebx, %edx
	leal	-10(%rdx), %edi
	xorl	%ebx, %ebx
	cmpb	$10, %dl
	setge	%bl
	movzbl	%dil, %edi
	cmovll	%edx, %edi
	addb	$48, %dil
	movb	%dil, -1(%rcx,%rsi)
	decq	%rsi
	cmpq	%rsi, %r9
	jne	.LBB115_48
.LBB115_49:                             # %for.cond.cleanup114
                                        #   in Loop: Header=BB115_42 Depth=1
	testb	$1, %bl
	je	.LBB115_51
# %bb.50:                               # %if.then135
                                        #   in Loop: Header=BB115_42 Depth=1
	movb	$49, -1(%r14)
	decq	%r14
	jmp	.LBB115_51
.LBB115_40:
	movq	%r14, %rdx
.LBB115_53:                             # %for.cond.cleanup
	movq	-72(%rbp), %rdi                 # 8-byte Reload
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.30.141(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%r12, %rsi
	movq	-56(%rbp), %rdx                 # 8-byte Reload
	movl	$6, %ecx
.LBB115_54:                             # %cleanup147
	callq	halide_int64_to_string@PLT
.LBB115_55:                             # %cleanup147
	addq	$552, %rsp                      # imm = 0x228
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end115:
	.size	halide_double_to_string, .Lfunc_end115-halide_double_to_string
                                        # -- End function
	.section	.text.halide_pointer_to_string,"ax",@progbits
	.weak	halide_pointer_to_string        # -- Begin function halide_pointer_to_string
	.p2align	4, 0x90
	.type	halide_pointer_to_string,@function
halide_pointer_to_string:               # @halide_pointer_to_string
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	vxorps	%xmm0, %xmm0, %xmm0
	vmovaps	%xmm0, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	%edx, %eax
	andl	$15, %eax
	leaq	.L.str.13.71(%rip), %r8
	movb	(%rax,%r8), %cl
	leaq	-15(%rbp), %rax
	movb	%cl, -14(%rbp)
	cmpq	$16, %rdx
	jae	.LBB116_2
# %bb.1:
	leaq	-14(%rbp), %rdx
	jmp	.LBB116_22
.LBB116_2:                              # %for.inc
	movl	%edx, %ecx
	shrl	$4, %ecx
	andl	$15, %ecx
	movb	(%rcx,%r8), %cl
	leaq	-16(%rbp), %r9
	movb	%cl, -15(%rbp)
	cmpq	$255, %rdx
	jbe	.LBB116_21
# %bb.3:                                # %for.inc.1
	movl	%edx, %eax
	shrl	$8, %eax
	andl	$15, %eax
	movb	(%rax,%r8), %cl
	leaq	-17(%rbp), %rax
	movb	%cl, -16(%rbp)
	cmpq	$4096, %rdx                     # imm = 0x1000
	jb	.LBB116_4
# %bb.5:                                # %for.inc.2
	movl	%edx, %ecx
	shrl	$12, %ecx
	andl	$15, %ecx
	movb	(%rcx,%r8), %cl
	leaq	-18(%rbp), %r9
	movb	%cl, -17(%rbp)
	cmpq	$65536, %rdx                    # imm = 0x10000
	jb	.LBB116_21
# %bb.6:                                # %for.inc.3
	movl	%edx, %eax
	shrl	$16, %eax
	andl	$15, %eax
	movb	(%rax,%r8), %cl
	leaq	-19(%rbp), %rax
	movb	%cl, -18(%rbp)
	cmpq	$1048576, %rdx                  # imm = 0x100000
	jb	.LBB116_4
# %bb.8:                                # %for.inc.4
	movl	%edx, %ecx
	shrl	$20, %ecx
	andl	$15, %ecx
	movb	(%rcx,%r8), %cl
	leaq	-20(%rbp), %r9
	movb	%cl, -19(%rbp)
	cmpq	$16777216, %rdx                 # imm = 0x1000000
	jb	.LBB116_21
# %bb.9:                                # %for.inc.5
	movl	%edx, %eax
	shrl	$24, %eax
	andl	$15, %eax
	movb	(%rax,%r8), %cl
	leaq	-21(%rbp), %rax
	movb	%cl, -20(%rbp)
	cmpq	$268435456, %rdx                # imm = 0x10000000
	jb	.LBB116_4
# %bb.11:                               # %for.inc.6
	movl	%edx, %ecx
	shrl	$28, %ecx
	movb	(%rcx,%r8), %cl
	leaq	-22(%rbp), %r9
	movb	%cl, -21(%rbp)
	movq	%rdx, %rcx
	shrq	$32, %rcx
	je	.LBB116_21
# %bb.12:                               # %for.inc.7
	andl	$15, %ecx
	movb	(%rcx,%r8), %cl
	leaq	-23(%rbp), %rax
	movb	%cl, -22(%rbp)
	movq	%rdx, %rcx
	shrq	$36, %rcx
	je	.LBB116_4
# %bb.14:                               # %for.inc.8
	andl	$15, %ecx
	movb	(%rcx,%r8), %cl
	leaq	-24(%rbp), %r9
	movb	%cl, -23(%rbp)
	movq	%rdx, %rcx
	shrq	$40, %rcx
	je	.LBB116_21
# %bb.15:                               # %for.inc.9
	andl	$15, %ecx
	movb	(%rcx,%r8), %cl
	leaq	-25(%rbp), %rax
	movb	%cl, -24(%rbp)
	movq	%rdx, %rcx
	shrq	$44, %rcx
	je	.LBB116_4
# %bb.17:                               # %for.inc.10
	andl	$15, %ecx
	movb	(%rcx,%r8), %cl
	leaq	-26(%rbp), %r9
	movb	%cl, -25(%rbp)
	movq	%rdx, %rcx
	shrq	$48, %rcx
	je	.LBB116_21
# %bb.18:                               # %for.inc.11
	andl	$15, %ecx
	movb	(%rcx,%r8), %cl
	leaq	-27(%rbp), %rax
	movb	%cl, -26(%rbp)
	movq	%rdx, %rcx
	shrq	$52, %rcx
	je	.LBB116_4
# %bb.20:                               # %for.inc.12
	andl	$15, %ecx
	movb	(%rcx,%r8), %cl
	leaq	-28(%rbp), %r9
	movb	%cl, -27(%rbp)
	movq	%rdx, %rcx
	shrq	$56, %rcx
	jne	.LBB116_23
.LBB116_21:
	movq	%rax, %rdx
	movq	%r9, %rax
	jmp	.LBB116_22
.LBB116_23:                             # %for.inc.13
	andl	$15, %ecx
	movb	(%rcx,%r8), %cl
	leaq	-29(%rbp), %rax
	movb	%cl, -28(%rbp)
	shrq	$60, %rdx
	jne	.LBB116_25
.LBB116_4:
	movq	%r9, %rdx
.LBB116_22:                             # %cleanup
	movb	$120, (%rax)
	movb	$48, -2(%rdx)
	addq	$-2, %rdx
	callq	halide_string_to_string@PLT
	addq	$32, %rsp
	popq	%rbp
	retq
.LBB116_25:                             # %for.inc.14
	movb	(%rdx,%r8), %cl
	movq	%rax, %rdx
	leaq	-30(%rbp), %rax
	movb	%cl, -29(%rbp)
	jmp	.LBB116_22
.Lfunc_end116:
	.size	halide_pointer_to_string, .Lfunc_end116-halide_pointer_to_string
                                        # -- End function
	.section	.text.halide_type_to_string,"ax",@progbits
	.weak	halide_type_to_string           # -- Begin function halide_type_to_string
	.p2align	4, 0x90
	.type	halide_type_to_string,@function
halide_type_to_string:                  # @halide_type_to_string
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	%rdx, %rbx
	movq	%rsi, %r14
	movsbq	(%rdx), %rax
	cmpq	$3, %rax
	ja	.LBB117_1
# %bb.2:                                # %switch.lookup
	leaq	.Lreltable.halide_type_to_string(%rip), %rcx
	movslq	(%rcx,%rax,4), %rdx
	addq	%rcx, %rdx
	jmp	.LBB117_3
.LBB117_1:
	leaq	.L.str.18.72(%rip), %rdx
.LBB117_3:                              # %sw.epilog
	movq	%r14, %rsi
	callq	halide_string_to_string@PLT
	movzbl	1(%rbx), %edx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movl	$1, %ecx
	callq	halide_uint64_to_string@PLT
	cmpw	$1, 2(%rbx)
	jne	.LBB117_5
# %bb.4:                                # %if.end
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.LBB117_5:                              # %if.then
	leaq	.L.str.19.77(%rip), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	halide_string_to_string@PLT
	movzwl	2(%rbx), %edx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movl	$1, %ecx
	popq	%rbx
	popq	%r14
	popq	%rbp
	jmp	halide_uint64_to_string@PLT     # TAILCALL
.Lfunc_end117:
	.size	halide_type_to_string, .Lfunc_end117-halide_type_to_string
                                        # -- End function
	.section	.text.halide_buffer_to_string,"ax",@progbits
	.weak	halide_buffer_to_string         # -- Begin function halide_buffer_to_string
	.p2align	4, 0x90
	.type	halide_buffer_to_string,@function
halide_buffer_to_string:                # @halide_buffer_to_string
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rsi, %rbx
	testq	%rdx, %rdx
	je	.LBB118_1
# %bb.3:                                # %if.end
	movq	%rdx, %r14
	leaq	.L.str.21.79(%rip), %rdx
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	(%r14), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_uint64_to_string@PLT
	leaq	.L.str.55(%rip), %r15
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	movq	8(%r14), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_pointer_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	movq	16(%r14), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_pointer_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	movq	24(%r14), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_uint64_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	leaq	32(%r14), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_type_to_string@PLT
	cmpl	$0, 36(%r14)
	jle	.LBB118_6
# %bb.4:                                # %for.body.preheader
	xorl	%r15d, %r15d
	leaq	.L.str.55(%rip), %r12
	xorl	%r13d, %r13d
	.p2align	4, 0x90
.LBB118_5:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rdi
	movq	%rbx, %rsi
	leaq	.L.str.23.82(%rip), %rdx
	callq	halide_string_to_string@PLT
	movq	40(%r14), %rcx
	movslq	(%rcx,%r15), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	halide_string_to_string@PLT
	movq	40(%r14), %rcx
	movslq	4(%rcx,%r15), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	halide_string_to_string@PLT
	movq	40(%r14), %rcx
	movslq	8(%rcx,%r15), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	leaq	.L.str.24.83(%rip), %rdx
	callq	halide_string_to_string@PLT
	incq	%r13
	movslq	36(%r14), %rcx
	addq	$16, %r15
	cmpq	%rcx, %r13
	jl	.LBB118_5
.LBB118_6:                              # %for.cond.cleanup
	leaq	.L.str.8.119(%rip), %rdx
	movq	%rax, %rdi
	jmp	.LBB118_2
.LBB118_1:                              # %if.then
	leaq	.L.str.20.78(%rip), %rdx
.LBB118_2:                              # %if.then
	movq	%rbx, %rsi
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	halide_string_to_string@PLT     # TAILCALL
.Lfunc_end118:
	.size	halide_buffer_to_string, .Lfunc_end118-halide_buffer_to_string
                                        # -- End function
	.section	.text.halide_malloc_alignment,"ax",@progbits
	.weak	halide_malloc_alignment         # -- Begin function halide_malloc_alignment
	.p2align	4, 0x90
	.type	halide_malloc_alignment,@function
halide_malloc_alignment:                # @halide_malloc_alignment
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movl	$64, %eax
	popq	%rbp
	retq
.Lfunc_end119:
	.size	halide_malloc_alignment, .Lfunc_end119-halide_malloc_alignment
                                        # -- End function
	.section	.text.halide_reuse_device_allocations,"ax",@progbits
	.weak	halide_reuse_device_allocations # -- Begin function halide_reuse_device_allocations
	.p2align	4, 0x90
	.type	halide_reuse_device_allocations,@function
halide_reuse_device_allocations:        # @halide_reuse_device_allocations
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	movq	_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE@GOTPCREL(%rip), %rax
	movb	%sil, (%rax)
	xorl	%r15d, %r15d
	testl	%esi, %esi
	jne	.LBB120_4
# %bb.1:                                # %if.then
	movq	%rdi, %r14
	movq	_ZN6Halide7Runtime8Internal21allocation_pools_lockE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_lock@PLT
	movq	_ZN6Halide7Runtime8Internal23device_allocation_poolsE@GOTPCREL(%rip), %rax
	movq	(%rax), %rbx
	xorl	%r15d, %r15d
	testq	%rbx, %rbx
	je	.LBB120_3
	.p2align	4, 0x90
.LBB120_5:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	%r14, %rdi
	callq	*(%rbx)
	testl	%eax, %eax
	cmovnel	%eax, %r15d
	movq	8(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB120_5
.LBB120_3:                              # %for.cond.cleanup
	movq	_ZN6Halide7Runtime8Internal21allocation_pools_lockE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_unlock@PLT
.LBB120_4:                              # %if.end5
	movl	%r15d, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end120:
	.size	halide_reuse_device_allocations, .Lfunc_end120-halide_reuse_device_allocations
                                        # -- End function
	.section	.text.halide_can_reuse_device_allocations,"ax",@progbits
	.weak	halide_can_reuse_device_allocations # -- Begin function halide_can_reuse_device_allocations
	.p2align	4, 0x90
	.type	halide_can_reuse_device_allocations,@function
halide_can_reuse_device_allocations:    # @halide_can_reuse_device_allocations
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE@GOTPCREL(%rip), %rax
	movb	(%rax), %al
	popq	%rbp
	retq
.Lfunc_end121:
	.size	halide_can_reuse_device_allocations, .Lfunc_end121-halide_can_reuse_device_allocations
                                        # -- End function
	.section	.text.halide_register_device_allocation_pool,"ax",@progbits
	.weak	halide_register_device_allocation_pool # -- Begin function halide_register_device_allocation_pool
	.p2align	4, 0x90
	.type	halide_register_device_allocation_pool,@function
halide_register_device_allocation_pool: # @halide_register_device_allocation_pool
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	%rdi, %rbx
	movq	_ZN6Halide7Runtime8Internal21allocation_pools_lockE@GOTPCREL(%rip), %r14
	movq	%r14, %rdi
	callq	halide_mutex_lock@PLT
	movq	_ZN6Halide7Runtime8Internal23device_allocation_poolsE@GOTPCREL(%rip), %rax
	movq	(%rax), %rcx
	movq	%rcx, 8(%rbx)
	movq	%rbx, (%rax)
	movq	%r14, %rdi
	popq	%rbx
	popq	%r14
	popq	%rbp
	jmp	halide_mutex_unlock@PLT         # TAILCALL
.Lfunc_end122:
	.size	halide_register_device_allocation_pool, .Lfunc_end122-halide_register_device_allocation_pool
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t # -- Begin function _ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t,@function
_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t: # @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	movq	24(%rsi), %rax
	xorl	%ebx, %ebx
	testb	$2, %al
	je	.LBB123_6
# %bb.1:                                # %if.end
	movl	$-14, %ebx
	testb	$1, %al
	jne	.LBB123_6
# %bb.2:                                # %if.end9
	movq	%rsi, %r14
	movq	8(%rsi), %rax
	testq	%rax, %rax
	je	.LBB123_3
# %bb.4:                                # %if.end15
	movq	%rdi, %r15
	movq	120(%rax), %rax
	movq	%r14, %rsi
	callq	*48(%rax)
	testl	%eax, %eax
	jne	.LBB123_6
# %bb.5:                                # %if.end23
	andb	$-3, 24(%r14)
	movq	%r15, %rdi
	movq	%r14, %rsi
	callq	halide_msan_annotate_buffer_is_initialized@PLT
	xorl	%ebx, %ebx
	jmp	.LBB123_6
.LBB123_3:
	movl	$-19, %ebx
.LBB123_6:                              # %return
	movl	%ebx, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end123:
	.size	_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t, .Lfunc_end123-_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t
                                        # -- End function
	.section	.text.halide_device_release,"ax",@progbits
	.weak	halide_device_release           # -- Begin function halide_device_release
	.p2align	4, 0x90
	.type	halide_device_release,@function
halide_device_release:                  # @halide_device_release
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	120(%rsi), %rax
	popq	%rbp
	jmpq	*40(%rax)                       # TAILCALL
.Lfunc_end124:
	.size	halide_device_release, .Lfunc_end124-halide_device_release
                                        # -- End function
	.section	.text.halide_copy_to_host,"ax",@progbits
	.weak	halide_copy_to_host             # -- Begin function halide_copy_to_host
	.p2align	4, 0x90
	.type	halide_copy_to_host,@function
halide_copy_to_host:                    # @halide_copy_to_host
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	movq	%rsi, %r15
	movq	%rdi, %r14
	movq	_ZN6Halide7Runtime8Internal17device_copy_mutexE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_lock@PLT
	testq	%r15, %r15
	je	.LBB125_1
# %bb.2:                                # %if.end.i
	movq	(%r15), %rax
	movq	8(%r15), %rcx
	testq	%rax, %rax
	je	.LBB125_5
# %bb.3:                                # %if.end.i
	testq	%rcx, %rcx
	jne	.LBB125_5
# %bb.4:                                # %if.then8.i
	movq	%r14, %rdi
	callq	halide_error_no_device_interface@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB125_12
	jmp	.LBB125_11
.LBB125_1:                              # %if.then.i
	leaq	.L.str.6.88(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_error_buffer_is_null@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB125_12
	jmp	.LBB125_11
.LBB125_5:                              # %if.end10.i
	testq	%rcx, %rcx
	je	.LBB125_8
# %bb.6:                                # %if.end10.i
	testq	%rax, %rax
	jne	.LBB125_8
# %bb.7:                                # %if.then14.i
	movq	%r14, %rdi
	callq	halide_error_device_interface_no_device@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB125_12
	jmp	.LBB125_11
.LBB125_8:                              # %if.end16.i
	movl	24(%r15), %eax
	notl	%eax
	testb	$3, %al
	jne	.LBB125_11
# %bb.9:                                # %if.then24.i
	movq	%r14, %rdi
	callq	halide_error_host_and_device_dirty@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB125_12
.LBB125_11:                             # %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split
	movq	%r14, %rdi
	movq	%r15, %rsi
	callq	_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t@PLT
	movl	%eax, %ebx
.LBB125_12:                             # %cleanup
	movq	_ZN6Halide7Runtime8Internal17device_copy_mutexE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_unlock@PLT
	movl	%ebx, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end125:
	.size	halide_copy_to_host, .Lfunc_end125-halide_copy_to_host
                                        # -- End function
	.section	.text.copy_to_device_already_locked,"ax",@progbits
	.weak	copy_to_device_already_locked   # -- Begin function copy_to_device_already_locked
	.p2align	4, 0x90
	.type	copy_to_device_already_locked,@function
copy_to_device_already_locked:          # @copy_to_device_already_locked
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	movq	%rdx, %r15
	movq	%rsi, %r12
	movq	%rdi, %r14
	testq	%rsi, %rsi
	je	.LBB126_1
# %bb.2:                                # %if.end.i
	movq	(%r12), %rax
	movq	8(%r12), %rcx
	testq	%rax, %rax
	je	.LBB126_5
# %bb.3:                                # %if.end.i
	testq	%rcx, %rcx
	jne	.LBB126_5
# %bb.4:                                # %if.then8.i
	movq	%r14, %rdi
	callq	halide_error_no_device_interface@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB126_21
	jmp	.LBB126_11
.LBB126_1:                              # %if.then.i
	leaq	.L.str.7.89(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_error_buffer_is_null@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB126_21
	jmp	.LBB126_11
.LBB126_5:                              # %if.end10.i
	testq	%rcx, %rcx
	je	.LBB126_8
# %bb.6:                                # %if.end10.i
	testq	%rax, %rax
	jne	.LBB126_8
# %bb.7:                                # %if.then14.i
	movq	%r14, %rdi
	callq	halide_error_device_interface_no_device@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB126_21
	jmp	.LBB126_11
.LBB126_8:                              # %if.end16.i
	movl	24(%r12), %eax
	notl	%eax
	testb	$3, %al
	jne	.LBB126_11
# %bb.9:                                # %if.then24.i
	movq	%r14, %rdi
	callq	halide_error_host_and_device_dirty@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB126_21
.LBB126_11:                             # %if.end
	testq	%r15, %r15
	jne	.LBB126_13
# %bb.12:                               # %if.then2
	movq	8(%r12), %r15
	testq	%r15, %r15
	je	.LBB126_22
.LBB126_13:                             # %if.end11
	cmpq	$0, (%r12)
	je	.LBB126_16
# %bb.14:                               # %land.lhs.true
	cmpq	%r15, 8(%r12)
	je	.LBB126_17
# %bb.15:                               # %if.then14
	leaq	.L.str.9.90(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_error@PLT
	movl	$-42, %ebx
	jmp	.LBB126_21
.LBB126_16:                             # %if.then18
	movq	%r14, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	callq	halide_device_malloc@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB126_21
.LBB126_17:                             # %if.end27
	movq	24(%r12), %rax
	xorl	%ebx, %ebx
	testb	$1, %al
	je	.LBB126_21
# %bb.18:                               # %if.then29
	movl	$-15, %ebx
	testb	$2, %al
	jne	.LBB126_21
# %bb.19:                               # %if.else
	movq	120(%r15), %rax
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	*56(%rax)
	testl	%eax, %eax
	jne	.LBB126_21
# %bb.20:                               # %if.then46
	andb	$-2, 24(%r12)
	xorl	%ebx, %ebx
.LBB126_21:                             # %cleanup
	movl	%ebx, %eax
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB126_22:                             # %if.then7
	movq	%r14, %rdi
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	halide_error_no_device_interface@PLT # TAILCALL
.Lfunc_end126:
	.size	copy_to_device_already_locked, .Lfunc_end126-copy_to_device_already_locked
                                        # -- End function
	.section	.text.halide_device_malloc,"ax",@progbits
	.weak	halide_device_malloc            # -- Begin function halide_device_malloc
	.p2align	4, 0x90
	.type	halide_device_malloc,@function
halide_device_malloc:                   # @halide_device_malloc
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	movq	%rdx, %r14
	movq	%rsi, %rbx
	movq	%rdi, %r15
	testq	%rsi, %rsi
	je	.LBB127_1
# %bb.2:                                # %if.end.i
	movq	(%rbx), %rcx
	movq	8(%rbx), %rax
	testq	%rcx, %rcx
	je	.LBB127_5
# %bb.3:                                # %if.end.i
	testq	%rax, %rax
	jne	.LBB127_5
# %bb.4:                                # %if.then8.i
	movq	%r15, %rdi
	callq	halide_error_no_device_interface@PLT
	testl	%eax, %eax
	jne	.LBB127_16
	jmp	.LBB127_11
.LBB127_1:                              # %if.then.i
	leaq	.L.str.17.91(%rip), %rsi
	movq	%r15, %rdi
	callq	halide_error_buffer_is_null@PLT
	testl	%eax, %eax
	jne	.LBB127_16
	jmp	.LBB127_11
.LBB127_5:                              # %if.end10.i
	testq	%rax, %rax
	je	.LBB127_8
# %bb.6:                                # %if.end10.i
	testq	%rcx, %rcx
	jne	.LBB127_8
# %bb.7:                                # %if.then14.i
	movq	%r15, %rdi
	callq	halide_error_device_interface_no_device@PLT
	testl	%eax, %eax
	jne	.LBB127_16
	jmp	.LBB127_11
.LBB127_8:                              # %if.end16.i
	movl	24(%rbx), %ecx
	notl	%ecx
	testb	$3, %cl
	jne	.LBB127_12
# %bb.9:                                # %if.then24.i
	movq	%r15, %rdi
	callq	halide_error_host_and_device_dirty@PLT
	testl	%eax, %eax
	jne	.LBB127_16
.LBB127_11:                             # %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge
	movq	8(%rbx), %rax
.LBB127_12:                             # %if.end
	testq	%rax, %rax
	je	.LBB127_15
# %bb.13:                               # %if.end
	cmpq	%r14, %rax
	je	.LBB127_15
# %bb.14:                               # %if.then6
	leaq	.L.str.20.92(%rip), %rsi
	movq	%r15, %rdi
	callq	halide_error@PLT
	movl	$-42, %eax
	jmp	.LBB127_16
.LBB127_15:                             # %if.end7
	movq	120(%r14), %rax
	callq	*(%rax)
	movq	120(%r14), %rax
	movq	%r15, %rdi
	movq	%rbx, %rsi
	callq	*16(%rax)
	movl	%eax, %ebx
	movq	120(%r14), %rax
	callq	*8(%rax)
	xorl	%eax, %eax
	testl	%ebx, %ebx
	sete	%al
	shll	$4, %eax
	addl	$-16, %eax
.LBB127_16:                             # %cleanup12
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end127:
	.size	halide_device_malloc, .Lfunc_end127-halide_device_malloc
                                        # -- End function
	.section	.text.halide_copy_to_device,"ax",@progbits
	.weak	halide_copy_to_device           # -- Begin function halide_copy_to_device
	.p2align	4, 0x90
	.type	halide_copy_to_device,@function
halide_copy_to_device:                  # @halide_copy_to_device
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	movq	_ZN6Halide7Runtime8Internal17device_copy_mutexE@GOTPCREL(%rip), %r12
	movq	%r12, %rdi
	callq	halide_mutex_lock@PLT
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	copy_to_device_already_locked@PLT
	movl	%eax, %ebx
	movq	%r12, %rdi
	callq	halide_mutex_unlock@PLT
	movl	%ebx, %eax
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end128:
	.size	halide_copy_to_device, .Lfunc_end128-halide_copy_to_device
                                        # -- End function
	.section	.text.halide_device_sync,"ax",@progbits
	.weak	halide_device_sync              # -- Begin function halide_device_sync
	.p2align	4, 0x90
	.type	halide_device_sync,@function
halide_device_sync:                     # @halide_device_sync
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	%rsi, %rbx
	movq	%rdi, %r14
	testq	%rsi, %rsi
	je	.LBB129_1
# %bb.2:                                # %if.end.i
	movq	(%rbx), %rcx
	movq	8(%rbx), %rax
	testq	%rcx, %rcx
	je	.LBB129_5
# %bb.3:                                # %if.end.i
	testq	%rax, %rax
	jne	.LBB129_5
# %bb.4:                                # %if.then8.i
	movq	%r14, %rdi
	callq	halide_error_no_device_interface@PLT
	testl	%eax, %eax
	jne	.LBB129_14
	jmp	.LBB129_11
.LBB129_1:                              # %if.then.i
	leaq	.L.str.16.93(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_error_buffer_is_null@PLT
	testl	%eax, %eax
	jne	.LBB129_14
	jmp	.LBB129_11
.LBB129_5:                              # %if.end10.i
	testq	%rax, %rax
	je	.LBB129_8
# %bb.6:                                # %if.end10.i
	testq	%rcx, %rcx
	jne	.LBB129_8
# %bb.7:                                # %if.then14.i
	movq	%r14, %rdi
	callq	halide_error_device_interface_no_device@PLT
	testl	%eax, %eax
	je	.LBB129_11
.LBB129_14:                             # %cleanup8
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.LBB129_8:                              # %if.end16.i
	movl	24(%rbx), %ecx
	notl	%ecx
	testb	$3, %cl
	jne	.LBB129_12
# %bb.9:                                # %if.then24.i
	movq	%r14, %rdi
	callq	halide_error_host_and_device_dirty@PLT
	testl	%eax, %eax
	jne	.LBB129_14
.LBB129_11:                             # %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge
	movq	8(%rbx), %rax
.LBB129_12:                             # %if.end
	testq	%rax, %rax
	je	.LBB129_15
# %bb.13:                               # %if.end5
	movq	120(%rax), %rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	*32(%rax)
	movl	%eax, %ecx
	testl	%eax, %eax
	movl	$-17, %eax
	cmovel	%ecx, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.LBB129_15:                             # %if.then3
	movq	%r14, %rdi
	popq	%rbx
	popq	%r14
	popq	%rbp
	jmp	halide_error_no_device_interface@PLT # TAILCALL
.Lfunc_end129:
	.size	halide_device_sync, .Lfunc_end129-halide_device_sync
                                        # -- End function
	.section	.text.halide_device_free,"ax",@progbits
	.weak	halide_device_free              # -- Begin function halide_device_free
	.p2align	4, 0x90
	.type	halide_device_free,@function
halide_device_free:                     # @halide_device_free
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	movq	%rsi, %r12
	movq	%rdi, %r14
	testq	%rsi, %rsi
	je	.LBB130_1
# %bb.2:                                # %if.end.i
	movq	(%r12), %rax
	movq	8(%r12), %rbx
	testq	%rax, %rax
	je	.LBB130_5
# %bb.3:                                # %if.end.i
	testq	%rbx, %rbx
	jne	.LBB130_5
# %bb.4:                                # %if.then8.i
	movq	%r14, %rdi
	callq	halide_error_no_device_interface@PLT
	testl	%eax, %eax
	jne	.LBB130_17
	jmp	.LBB130_11
.LBB130_1:                              # %if.then.i
	leaq	.L.str.21.96(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_error_buffer_is_null@PLT
	testl	%eax, %eax
	jne	.LBB130_17
	jmp	.LBB130_11
.LBB130_5:                              # %if.end10.i
	testq	%rbx, %rbx
	je	.LBB130_8
# %bb.6:                                # %if.end10.i
	testq	%rax, %rax
	jne	.LBB130_8
# %bb.7:                                # %if.then14.i
	movq	%r14, %rdi
	callq	halide_error_device_interface_no_device@PLT
	testl	%eax, %eax
	jne	.LBB130_17
	jmp	.LBB130_11
.LBB130_8:                              # %if.end16.i
	movl	24(%r12), %eax
	notl	%eax
	testb	$3, %al
	jne	.LBB130_12
# %bb.9:                                # %if.then24.i
	movq	%r14, %rdi
	callq	halide_error_host_and_device_dirty@PLT
	testl	%eax, %eax
	jne	.LBB130_17
.LBB130_11:                             # %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge
	movq	8(%r12), %rbx
.LBB130_12:                             # %if.end
	testq	%rbx, %rbx
	je	.LBB130_16
# %bb.13:                               # %if.then3
	movq	120(%rbx), %rax
	callq	*(%rax)
	movq	120(%rbx), %rax
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	*24(%rax)
	movl	%eax, %r15d
	movq	120(%rbx), %rax
	callq	*8(%rax)
	cmpq	$0, (%r12)
	je	.LBB130_15
# %bb.14:                               # %if.then8
	leaq	.L.str.22.97(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
.LBB130_15:                             # %do.end
	testl	%r15d, %r15d
	movl	$-18, %eax
	cmovel	%r15d, %eax
	jmp	.LBB130_17
.LBB130_16:                             # %if.end11
	andb	$-3, 24(%r12)
	xorl	%eax, %eax
.LBB130_17:                             # %cleanup12
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end130:
	.size	halide_device_free, .Lfunc_end130-halide_device_free
                                        # -- End function
	.section	.text.halide_device_free_as_destructor,"ax",@progbits
	.weak	halide_device_free_as_destructor # -- Begin function halide_device_free_as_destructor
	.p2align	4, 0x90
	.type	halide_device_free_as_destructor,@function
halide_device_free_as_destructor:       # @halide_device_free_as_destructor
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	popq	%rbp
	jmp	halide_device_free@PLT          # TAILCALL
.Lfunc_end131:
	.size	halide_device_free_as_destructor, .Lfunc_end131-halide_device_free_as_destructor
                                        # -- End function
	.section	.text.halide_device_and_host_malloc,"ax",@progbits
	.weak	halide_device_and_host_malloc   # -- Begin function halide_device_and_host_malloc
	.p2align	4, 0x90
	.type	halide_device_and_host_malloc,@function
halide_device_and_host_malloc:          # @halide_device_and_host_malloc
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	movq	%rdx, %r14
	movq	%rsi, %r12
	movq	%rdi, %r15
	testq	%rsi, %rsi
	je	.LBB132_1
# %bb.2:                                # %if.end.i
	movq	(%r12), %rcx
	movq	8(%r12), %rax
	testq	%rcx, %rcx
	je	.LBB132_5
# %bb.3:                                # %if.end.i
	testq	%rax, %rax
	jne	.LBB132_5
# %bb.4:                                # %if.then8.i
	movq	%r15, %rdi
	callq	halide_error_no_device_interface@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB132_18
	jmp	.LBB132_11
.LBB132_1:                              # %if.then.i
	leaq	.L.str.23.98(%rip), %rsi
	movq	%r15, %rdi
	callq	halide_error_buffer_is_null@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB132_18
	jmp	.LBB132_11
.LBB132_5:                              # %if.end10.i
	testq	%rax, %rax
	je	.LBB132_8
# %bb.6:                                # %if.end10.i
	testq	%rcx, %rcx
	jne	.LBB132_8
# %bb.7:                                # %if.then14.i
	movq	%r15, %rdi
	callq	halide_error_device_interface_no_device@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB132_18
	jmp	.LBB132_11
.LBB132_8:                              # %if.end16.i
	movl	24(%r12), %ecx
	notl	%ecx
	testb	$3, %cl
	jne	.LBB132_12
# %bb.9:                                # %if.then24.i
	movq	%r15, %rdi
	callq	halide_error_host_and_device_dirty@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB132_18
.LBB132_11:                             # %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge
	movq	8(%r12), %rax
.LBB132_12:                             # %if.end
	testq	%rax, %rax
	je	.LBB132_15
# %bb.13:                               # %if.end
	cmpq	%r14, %rax
	je	.LBB132_15
# %bb.14:
	movl	$-42, %ebx
	leaq	.L.str.25.99(%rip), %rsi
	jmp	.LBB132_17
.LBB132_15:                             # %if.end7
	movq	120(%r14), %rax
	callq	*(%rax)
	movq	120(%r14), %rax
	movq	%r15, %rdi
	movq	%r12, %rsi
	callq	*64(%rax)
	movl	%eax, %ebx
	movq	120(%r14), %rax
	callq	*8(%rax)
	testl	%ebx, %ebx
	je	.LBB132_19
# %bb.16:
	movl	$-16, %ebx
	leaq	.L.str.26.100(%rip), %rsi
.LBB132_17:                             # %cleanup14.sink.split
	movq	%r15, %rdi
	callq	halide_error@PLT
.LBB132_18:                             # %cleanup14
	movl	%ebx, %eax
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB132_19:
	xorl	%ebx, %ebx
	jmp	.LBB132_18
.Lfunc_end132:
	.size	halide_device_and_host_malloc, .Lfunc_end132-halide_device_and_host_malloc
                                        # -- End function
	.section	.text.halide_device_and_host_free,"ax",@progbits
	.weak	halide_device_and_host_free     # -- Begin function halide_device_and_host_free
	.p2align	4, 0x90
	.type	halide_device_and_host_free,@function
halide_device_and_host_free:            # @halide_device_and_host_free
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	movq	%rsi, %r12
	movq	%rdi, %r14
	testq	%rsi, %rsi
	je	.LBB133_1
# %bb.2:                                # %if.end.i
	movq	(%r12), %rax
	movq	8(%r12), %rbx
	testq	%rax, %rax
	je	.LBB133_5
# %bb.3:                                # %if.end.i
	testq	%rbx, %rbx
	jne	.LBB133_5
# %bb.4:                                # %if.then8.i
	movq	%r14, %rdi
	callq	halide_error_no_device_interface@PLT
	testl	%eax, %eax
	jne	.LBB133_19
	jmp	.LBB133_11
.LBB133_1:                              # %if.then.i
	leaq	.L.str.27.101(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_error_buffer_is_null@PLT
	testl	%eax, %eax
	jne	.LBB133_19
	jmp	.LBB133_11
.LBB133_5:                              # %if.end10.i
	testq	%rbx, %rbx
	je	.LBB133_8
# %bb.6:                                # %if.end10.i
	testq	%rax, %rax
	jne	.LBB133_8
# %bb.7:                                # %if.then14.i
	movq	%r14, %rdi
	callq	halide_error_device_interface_no_device@PLT
	testl	%eax, %eax
	jne	.LBB133_19
	jmp	.LBB133_11
.LBB133_8:                              # %if.end16.i
	movl	24(%r12), %eax
	notl	%eax
	testb	$3, %al
	jne	.LBB133_12
# %bb.9:                                # %if.then24.i
	movq	%r14, %rdi
	callq	halide_error_host_and_device_dirty@PLT
	testl	%eax, %eax
	jne	.LBB133_19
.LBB133_11:                             # %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge
	movq	8(%r12), %rbx
.LBB133_12:                             # %if.end
	testq	%rbx, %rbx
	je	.LBB133_16
# %bb.13:                               # %if.then3
	movq	120(%rbx), %rax
	callq	*(%rax)
	movq	120(%rbx), %rax
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	*72(%rax)
	movl	%eax, %r15d
	movq	120(%rbx), %rax
	callq	*8(%rax)
	cmpq	$0, (%r12)
	je	.LBB133_15
# %bb.14:                               # %if.then8
	leaq	.L.str.28.102(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
.LBB133_15:                             # %do.end
	testl	%r15d, %r15d
	movl	$-18, %eax
	cmovel	%r15d, %eax
	jmp	.LBB133_19
.LBB133_16:                             # %if.else11
	movq	16(%r12), %rsi
	testq	%rsi, %rsi
	je	.LBB133_18
# %bb.17:                               # %if.then13
	movq	%r14, %rdi
	callq	halide_free@PLT
	movq	$0, 16(%r12)
.LBB133_18:                             # %if.end17
	andb	$-3, 24(%r12)
	xorl	%eax, %eax
.LBB133_19:                             # %cleanup18
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end133:
	.size	halide_device_and_host_free, .Lfunc_end133-halide_device_and_host_free
                                        # -- End function
	.section	.text.halide_default_device_and_host_malloc,"ax",@progbits
	.weak	halide_default_device_and_host_malloc # -- Begin function halide_default_device_and_host_malloc
	.p2align	4, 0x90
	.type	halide_default_device_and_host_malloc,@function
halide_default_device_and_host_malloc:  # @halide_default_device_and_host_malloc
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	movq	%rdx, %r15
	movq	%rsi, %r12
	movq	%rdi, %r14
	testq	%rsi, %rsi
	je	.LBB134_1
# %bb.2:                                # %if.end.i
	movq	(%r12), %rax
	movq	8(%r12), %rcx
	testq	%rax, %rax
	je	.LBB134_5
# %bb.3:                                # %if.end.i
	testq	%rcx, %rcx
	jne	.LBB134_5
# %bb.4:                                # %if.then8.i
	movq	%r14, %rdi
	callq	halide_error_no_device_interface@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB134_53
	jmp	.LBB134_11
.LBB134_1:                              # %if.then.i
	leaq	.L.str.29.103(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_error_buffer_is_null@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB134_53
	jmp	.LBB134_11
.LBB134_5:                              # %if.end10.i
	testq	%rcx, %rcx
	je	.LBB134_8
# %bb.6:                                # %if.end10.i
	testq	%rax, %rax
	jne	.LBB134_8
# %bb.7:                                # %if.then14.i
	movq	%r14, %rdi
	callq	halide_error_device_interface_no_device@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB134_53
	jmp	.LBB134_11
.LBB134_8:                              # %if.end16.i
	movl	24(%r12), %eax
	notl	%eax
	testb	$3, %al
	jne	.LBB134_11
# %bb.9:                                # %if.then24.i
	movq	%r14, %rdi
	callq	halide_error_host_and_device_dirty@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB134_53
.LBB134_11:                             # %if.end
	movl	36(%r12), %r10d
	testl	%r10d, %r10d
	jle	.LBB134_12
# %bb.13:                               # %for.body.preheader.i.i
	movq	40(%r12), %r8
	leaq	-1(%r10), %r9
	movl	%r10d, %r11d
	andl	$3, %r11d
	cmpq	$3, %r9
	jae	.LBB134_30
# %bb.14:
	xorl	%ebx, %ebx
	xorl	%eax, %eax
.LBB134_15:                             # %for.body.i12.i.preheader.unr-lcssa
	testq	%r11, %r11
	je	.LBB134_20
# %bb.16:                               # %for.body.i.i.epil.preheader
	shlq	$4, %rbx
	leaq	(%r8,%rbx), %rdx
	addq	$8, %rdx
	shlq	$4, %r11
	xorl	%esi, %esi
	jmp	.LBB134_17
	.p2align	4, 0x90
.LBB134_19:                             # %if.end.i.i.epil
                                        #   in Loop: Header=BB134_17 Depth=1
	addq	$16, %rsi
	cmpq	%rsi, %r11
	je	.LBB134_20
.LBB134_17:                             # %for.body.i.i.epil
                                        # =>This Inner Loop Header: Depth=1
	movl	(%rdx,%rsi), %ecx
	testl	%ecx, %ecx
	jle	.LBB134_19
# %bb.18:                               # %if.then.i.i.epil
                                        #   in Loop: Header=BB134_17 Depth=1
	movslq	-4(%rdx,%rsi), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rax
	jmp	.LBB134_19
.LBB134_20:                             # %for.body.i12.i.preheader
	movl	%r10d, %r11d
	andl	$3, %r11d
	cmpq	$3, %r9
	jae	.LBB134_40
# %bb.21:
	xorl	%ebx, %ebx
	xorl	%esi, %esi
.LBB134_22:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa
	testq	%r11, %r11
	je	.LBB134_27
# %bb.23:                               # %for.body.i12.i.epil.preheader
	shlq	$4, %rbx
	leaq	(%r8,%rbx), %rcx
	addq	$8, %rcx
	shlq	$4, %r11
	xorl	%edx, %edx
	jmp	.LBB134_24
	.p2align	4, 0x90
.LBB134_26:                             # %if.end.i22.i.epil
                                        #   in Loop: Header=BB134_24 Depth=1
	addq	$16, %rdx
	cmpq	%rdx, %r11
	je	.LBB134_27
.LBB134_24:                             # %for.body.i12.i.epil
                                        # =>This Inner Loop Header: Depth=1
	movslq	(%rcx,%rdx), %rbx
	testq	%rbx, %rbx
	jns	.LBB134_26
# %bb.25:                               # %if.then.i18.i.epil
                                        #   in Loop: Header=BB134_24 Depth=1
	movslq	-4(%rcx,%rdx), %rdi
	decq	%rdi
	imulq	%rbx, %rdi
	addq	%rdi, %rsi
	jmp	.LBB134_26
.LBB134_27:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
	incq	%rax
	jmp	.LBB134_28
.LBB134_12:
	movl	$1, %eax
	xorl	%esi, %esi
.LBB134_28:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit
	subq	%rsi, %rax
	movzbl	33(%r12), %esi
	addq	$7, %rsi
	shrq	$3, %rsi
	imulq	%rax, %rsi
	movq	%r14, %rdi
	callq	halide_malloc@PLT
	movq	%rax, 16(%r12)
	testq	%rax, %rax
	je	.LBB134_29
# %bb.50:                               # %if.end6
	movq	%r14, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	callq	halide_device_malloc@PLT
	testl	%eax, %eax
	je	.LBB134_51
# %bb.52:                               # %if.then9
	movl	%eax, %ebx
	movq	16(%r12), %rsi
	movq	%r14, %rdi
	callq	halide_free@PLT
	movq	$0, 16(%r12)
	jmp	.LBB134_53
.LBB134_29:
	movl	$-1, %ebx
	jmp	.LBB134_53
.LBB134_30:                             # %for.body.preheader.i.i.new
	movl	%r10d, %edx
	andl	$-4, %edx
	leaq	56(%r8), %rsi
	xorl	%ebx, %ebx
	xorl	%eax, %eax
	jmp	.LBB134_31
	.p2align	4, 0x90
.LBB134_39:                             # %if.end.i.i.3
                                        #   in Loop: Header=BB134_31 Depth=1
	addq	$4, %rbx
	addq	$64, %rsi
	cmpq	%rbx, %rdx
	je	.LBB134_15
.LBB134_31:                             # %for.body.i.i
                                        # =>This Inner Loop Header: Depth=1
	movl	-48(%rsi), %ecx
	testl	%ecx, %ecx
	jle	.LBB134_33
# %bb.32:                               # %if.then.i.i
                                        #   in Loop: Header=BB134_31 Depth=1
	movslq	-52(%rsi), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rax
.LBB134_33:                             # %if.end.i.i
                                        #   in Loop: Header=BB134_31 Depth=1
	movl	-32(%rsi), %ecx
	testl	%ecx, %ecx
	jle	.LBB134_35
# %bb.34:                               # %if.then.i.i.1
                                        #   in Loop: Header=BB134_31 Depth=1
	movslq	-36(%rsi), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rax
.LBB134_35:                             # %if.end.i.i.1
                                        #   in Loop: Header=BB134_31 Depth=1
	movl	-16(%rsi), %ecx
	testl	%ecx, %ecx
	jle	.LBB134_37
# %bb.36:                               # %if.then.i.i.2
                                        #   in Loop: Header=BB134_31 Depth=1
	movslq	-20(%rsi), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rax
.LBB134_37:                             # %if.end.i.i.2
                                        #   in Loop: Header=BB134_31 Depth=1
	movl	(%rsi), %ecx
	testl	%ecx, %ecx
	jle	.LBB134_39
# %bb.38:                               # %if.then.i.i.3
                                        #   in Loop: Header=BB134_31 Depth=1
	movslq	-4(%rsi), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rax
	jmp	.LBB134_39
.LBB134_40:                             # %for.body.i12.i.preheader.new
	andl	$-4, %r10d
	leaq	56(%r8), %rdx
	xorl	%ebx, %ebx
	xorl	%esi, %esi
	jmp	.LBB134_41
	.p2align	4, 0x90
.LBB134_49:                             # %if.end.i22.i.3
                                        #   in Loop: Header=BB134_41 Depth=1
	addq	$4, %rbx
	addq	$64, %rdx
	cmpq	%rbx, %r10
	je	.LBB134_22
.LBB134_41:                             # %for.body.i12.i
                                        # =>This Inner Loop Header: Depth=1
	movslq	-48(%rdx), %rcx
	testq	%rcx, %rcx
	js	.LBB134_42
# %bb.43:                               # %if.end.i22.i
                                        #   in Loop: Header=BB134_41 Depth=1
	movslq	-32(%rdx), %rcx
	testq	%rcx, %rcx
	js	.LBB134_44
.LBB134_45:                             # %if.end.i22.i.1
                                        #   in Loop: Header=BB134_41 Depth=1
	movslq	-16(%rdx), %rcx
	testq	%rcx, %rcx
	js	.LBB134_46
.LBB134_47:                             # %if.end.i22.i.2
                                        #   in Loop: Header=BB134_41 Depth=1
	movslq	(%rdx), %rcx
	testq	%rcx, %rcx
	jns	.LBB134_49
	jmp	.LBB134_48
	.p2align	4, 0x90
.LBB134_42:                             # %if.then.i18.i
                                        #   in Loop: Header=BB134_41 Depth=1
	movslq	-52(%rdx), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rsi
	movslq	-32(%rdx), %rcx
	testq	%rcx, %rcx
	jns	.LBB134_45
.LBB134_44:                             # %if.then.i18.i.1
                                        #   in Loop: Header=BB134_41 Depth=1
	movslq	-36(%rdx), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rdx), %rcx
	testq	%rcx, %rcx
	jns	.LBB134_47
.LBB134_46:                             # %if.then.i18.i.2
                                        #   in Loop: Header=BB134_41 Depth=1
	movslq	-20(%rdx), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rsi
	movslq	(%rdx), %rcx
	testq	%rcx, %rcx
	jns	.LBB134_49
.LBB134_48:                             # %if.then.i18.i.3
                                        #   in Loop: Header=BB134_41 Depth=1
	movslq	-4(%rdx), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rsi
	jmp	.LBB134_49
.LBB134_51:
	xorl	%ebx, %ebx
.LBB134_53:                             # %cleanup13
	movl	%ebx, %eax
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end134:
	.size	halide_default_device_and_host_malloc, .Lfunc_end134-halide_default_device_and_host_malloc
                                        # -- End function
	.section	.text.halide_default_device_and_host_free,"ax",@progbits
	.weak	halide_default_device_and_host_free # -- Begin function halide_default_device_and_host_free
	.p2align	4, 0x90
	.type	halide_default_device_and_host_free,@function
halide_default_device_and_host_free:    # @halide_default_device_and_host_free
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	movq	%rsi, %r15
	movq	%rdi, %r14
	testq	%rsi, %rsi
	je	.LBB135_1
# %bb.2:                                # %if.end.i
	movq	(%r15), %rax
	movq	8(%r15), %rcx
	testq	%rax, %rax
	je	.LBB135_5
# %bb.3:                                # %if.end.i
	testq	%rcx, %rcx
	jne	.LBB135_5
# %bb.4:                                # %if.then8.i
	movq	%r14, %rdi
	callq	halide_error_no_device_interface@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB135_14
	jmp	.LBB135_11
.LBB135_1:                              # %if.then.i
	leaq	.L.str.30.104(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_error_buffer_is_null@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB135_14
	jmp	.LBB135_11
.LBB135_5:                              # %if.end10.i
	testq	%rcx, %rcx
	je	.LBB135_8
# %bb.6:                                # %if.end10.i
	testq	%rax, %rax
	jne	.LBB135_8
# %bb.7:                                # %if.then14.i
	movq	%r14, %rdi
	callq	halide_error_device_interface_no_device@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB135_14
	jmp	.LBB135_11
.LBB135_8:                              # %if.end16.i
	movl	24(%r15), %eax
	notl	%eax
	testb	$3, %al
	jne	.LBB135_11
# %bb.9:                                # %if.then24.i
	movq	%r14, %rdi
	callq	halide_error_host_and_device_dirty@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB135_14
.LBB135_11:                             # %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split
	movq	%r14, %rdi
	movq	%r15, %rsi
	callq	halide_device_free@PLT
	movl	%eax, %ebx
	movq	16(%r15), %rsi
	testq	%rsi, %rsi
	je	.LBB135_13
# %bb.12:                               # %if.then2
	movq	%r14, %rdi
	callq	halide_free@PLT
	movq	$0, 16(%r15)
.LBB135_13:                             # %if.end5
	andb	$-4, 24(%r15)
.LBB135_14:                             # %cleanup
	movl	%ebx, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end135:
	.size	halide_default_device_and_host_free, .Lfunc_end135-halide_default_device_and_host_free
                                        # -- End function
	.section	.text.halide_device_wrap_native,"ax",@progbits
	.weak	halide_device_wrap_native       # -- Begin function halide_device_wrap_native
	.p2align	4, 0x90
	.type	halide_device_wrap_native,@function
halide_device_wrap_native:              # @halide_device_wrap_native
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	movq	%rcx, %r15
	movq	%rdx, %r14
	movq	%rsi, %rbx
	movq	%rdi, %r12
	testq	%rsi, %rsi
	je	.LBB136_1
# %bb.2:                                # %if.end.i
	movq	(%rbx), %rcx
	movq	8(%rbx), %rax
	testq	%rcx, %rcx
	je	.LBB136_5
# %bb.3:                                # %if.end.i
	testq	%rax, %rax
	jne	.LBB136_5
# %bb.4:                                # %if.then8.i
	movq	%r12, %rdi
	callq	halide_error_no_device_interface@PLT
	testl	%eax, %eax
	jne	.LBB136_16
	jmp	.LBB136_11
.LBB136_1:                              # %if.then.i
	leaq	.L.str.31.105(%rip), %rsi
	movq	%r12, %rdi
	callq	halide_error_buffer_is_null@PLT
	testl	%eax, %eax
	jne	.LBB136_16
	jmp	.LBB136_11
.LBB136_5:                              # %if.end10.i
	testq	%rax, %rax
	je	.LBB136_8
# %bb.6:                                # %if.end10.i
	testq	%rcx, %rcx
	jne	.LBB136_8
# %bb.7:                                # %if.then14.i
	movq	%r12, %rdi
	callq	halide_error_device_interface_no_device@PLT
	testl	%eax, %eax
	jne	.LBB136_16
	jmp	.LBB136_11
.LBB136_8:                              # %if.end16.i
	movl	24(%rbx), %ecx
	notl	%ecx
	testb	$3, %cl
	jne	.LBB136_12
# %bb.9:                                # %if.then24.i
	movq	%r12, %rdi
	callq	halide_error_host_and_device_dirty@PLT
	testl	%eax, %eax
	jne	.LBB136_16
.LBB136_11:                             # %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge
	movq	8(%rbx), %rax
.LBB136_12:                             # %if.end
	testq	%rax, %rax
	je	.LBB136_15
# %bb.13:                               # %if.end
	cmpq	%r15, %rax
	je	.LBB136_15
# %bb.14:                               # %if.then4
	leaq	.L.str.32.106(%rip), %rsi
	movq	%r12, %rdi
	callq	halide_error@PLT
	movl	$-42, %eax
	jmp	.LBB136_16
.LBB136_15:                             # %if.end5
	movq	120(%r15), %rax
	callq	*(%rax)
	movq	%r15, 8(%rbx)
	movq	120(%r15), %rax
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	callq	*112(%rax)
	movl	%eax, %ebx
	movq	120(%r15), %rax
	callq	*8(%rax)
	xorl	%eax, %eax
	testl	%ebx, %ebx
	sete	%al
	shll	$4, %eax
	addl	$-16, %eax
.LBB136_16:                             # %cleanup12
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end136:
	.size	halide_device_wrap_native, .Lfunc_end136-halide_device_wrap_native
                                        # -- End function
	.section	.text.halide_device_detach_native,"ax",@progbits
	.weak	halide_device_detach_native     # -- Begin function halide_device_detach_native
	.p2align	4, 0x90
	.type	halide_device_detach_native,@function
halide_device_detach_native:            # @halide_device_detach_native
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	movq	%rsi, %r12
	movq	%rdi, %r14
	testq	%rsi, %rsi
	je	.LBB137_1
# %bb.2:                                # %if.end.i
	movq	(%r12), %rax
	movq	8(%r12), %rbx
	testq	%rax, %rax
	je	.LBB137_5
# %bb.3:                                # %if.end.i
	testq	%rbx, %rbx
	jne	.LBB137_5
# %bb.4:                                # %if.then8.i
	movq	%r14, %rdi
	callq	halide_error_no_device_interface@PLT
	testl	%eax, %eax
	jne	.LBB137_17
	jmp	.LBB137_11
.LBB137_1:                              # %if.then.i
	leaq	.L.str.33.107(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_error_buffer_is_null@PLT
	testl	%eax, %eax
	jne	.LBB137_17
	jmp	.LBB137_11
.LBB137_5:                              # %if.end10.i
	testq	%rbx, %rbx
	je	.LBB137_8
# %bb.6:                                # %if.end10.i
	testq	%rax, %rax
	jne	.LBB137_8
# %bb.7:                                # %if.then14.i
	movq	%r14, %rdi
	callq	halide_error_device_interface_no_device@PLT
	testl	%eax, %eax
	jne	.LBB137_17
	jmp	.LBB137_11
.LBB137_8:                              # %if.end16.i
	movl	24(%r12), %eax
	notl	%eax
	testb	$3, %al
	jne	.LBB137_12
# %bb.9:                                # %if.then24.i
	movq	%r14, %rdi
	callq	halide_error_host_and_device_dirty@PLT
	testl	%eax, %eax
	jne	.LBB137_17
.LBB137_11:                             # %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge
	movq	8(%r12), %rbx
.LBB137_12:                             # %if.end
	testq	%rbx, %rbx
	je	.LBB137_13
# %bb.14:                               # %if.then3
	movq	120(%rbx), %rax
	callq	*(%rax)
	movq	120(%rbx), %rax
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	*120(%rax)
	movl	%eax, %r15d
	movq	120(%rbx), %rax
	callq	*8(%rax)
	cmpq	$0, (%r12)
	je	.LBB137_16
# %bb.15:                               # %if.then8
	leaq	.L.str.34.108(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
.LBB137_16:                             # %do.end
	testl	%r15d, %r15d
	movl	$-33, %eax
	cmovel	%r15d, %eax
	jmp	.LBB137_17
.LBB137_13:
	xorl	%eax, %eax
.LBB137_17:                             # %cleanup
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end137:
	.size	halide_device_detach_native, .Lfunc_end137-halide_device_detach_native
                                        # -- End function
	.section	.text.halide_default_device_wrap_native,"ax",@progbits
	.weak	halide_default_device_wrap_native # -- Begin function halide_default_device_wrap_native
	.p2align	4, 0x90
	.type	halide_default_device_wrap_native,@function
halide_default_device_wrap_native:      # @halide_default_device_wrap_native
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movl	$-32, %eax
	cmpq	$0, (%rsi)
	je	.LBB138_1
# %bb.2:                                # %return
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.LBB138_1:                              # %if.end
	movq	%rdx, %r14
	movq	%rsi, %rbx
	movq	8(%rsi), %rax
	movq	120(%rax), %rax
	callq	*(%rax)
	movq	%r14, (%rbx)
	xorl	%eax, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end138:
	.size	halide_default_device_wrap_native, .Lfunc_end138-halide_default_device_wrap_native
                                        # -- End function
	.section	.text.halide_default_device_detach_native,"ax",@progbits
	.weak	halide_default_device_detach_native # -- Begin function halide_default_device_detach_native
	.p2align	4, 0x90
	.type	halide_default_device_detach_native,@function
halide_default_device_detach_native:    # @halide_default_device_detach_native
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	%rsi, %r14
	testq	%rsi, %rsi
	je	.LBB139_1
# %bb.2:                                # %if.end.i
	movq	(%r14), %rax
	movq	8(%r14), %rcx
	testq	%rax, %rax
	je	.LBB139_5
# %bb.3:                                # %if.end.i
	testq	%rcx, %rcx
	jne	.LBB139_5
# %bb.4:                                # %if.then8.i
	callq	halide_error_no_device_interface@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB139_14
	jmp	.LBB139_11
.LBB139_1:                              # %if.then.i
	leaq	.L.str.35(%rip), %rsi
	callq	halide_error_buffer_is_null@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB139_14
	jmp	.LBB139_11
.LBB139_5:                              # %if.end10.i
	testq	%rcx, %rcx
	je	.LBB139_8
# %bb.6:                                # %if.end10.i
	testq	%rax, %rax
	jne	.LBB139_8
# %bb.7:                                # %if.then14.i
	callq	halide_error_device_interface_no_device@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB139_14
	jmp	.LBB139_11
.LBB139_8:                              # %if.end16.i
	movl	24(%r14), %ecx
	notl	%ecx
	testb	$3, %cl
	jne	.LBB139_12
# %bb.9:                                # %if.then24.i
	callq	halide_error_host_and_device_dirty@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB139_14
.LBB139_11:                             # %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge
	movq	(%r14), %rax
.LBB139_12:                             # %if.end
	xorl	%ebx, %ebx
	testq	%rax, %rax
	je	.LBB139_14
# %bb.13:                               # %if.end3
	movq	8(%r14), %rax
	movq	120(%rax), %rax
	callq	*8(%rax)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, (%r14)
.LBB139_14:                             # %cleanup
	movl	%ebx, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end139:
	.size	halide_default_device_detach_native, .Lfunc_end139-halide_default_device_detach_native
                                        # -- End function
	.section	.text.halide_device_and_host_free_as_destructor,"ax",@progbits
	.weak	halide_device_and_host_free_as_destructor # -- Begin function halide_device_and_host_free_as_destructor
	.p2align	4, 0x90
	.type	halide_device_and_host_free_as_destructor,@function
halide_device_and_host_free_as_destructor: # @halide_device_and_host_free_as_destructor
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	popq	%rbp
	jmp	halide_device_and_host_free@PLT # TAILCALL
.Lfunc_end140:
	.size	halide_device_and_host_free_as_destructor, .Lfunc_end140-halide_device_and_host_free_as_destructor
                                        # -- End function
	.section	.text.halide_device_host_nop_free,"ax",@progbits
	.weak	halide_device_host_nop_free     # -- Begin function halide_device_host_nop_free
	.p2align	4, 0x90
	.type	halide_device_host_nop_free,@function
halide_device_host_nop_free:            # @halide_device_host_nop_free
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	popq	%rbp
	retq
.Lfunc_end141:
	.size	halide_device_host_nop_free, .Lfunc_end141-halide_device_host_nop_free
                                        # -- End function
	.section	.text.halide_default_buffer_copy,"ax",@progbits
	.weak	halide_default_buffer_copy      # -- Begin function halide_default_buffer_copy
	.p2align	4, 0x90
	.type	halide_default_buffer_copy,@function
halide_default_buffer_copy:             # @halide_default_buffer_copy
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movl	$-39, %eax
	popq	%rbp
	retq
.Lfunc_end142:
	.size	halide_default_buffer_copy, .Lfunc_end142-halide_default_buffer_copy
                                        # -- End function
	.section	.text.halide_buffer_copy_already_locked,"ax",@progbits
	.weak	halide_buffer_copy_already_locked # -- Begin function halide_buffer_copy_already_locked
	.p2align	4, 0x90
	.type	halide_buffer_copy_already_locked,@function
halide_buffer_copy_already_locked:      # @halide_buffer_copy_already_locked
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$456, %rsp                      # imm = 0x1C8
	movq	%rdx, %r13
	movq	%rsi, -56(%rbp)                 # 8-byte Spill
	testq	%rdx, %rdx
	je	.LBB143_5
# %bb.1:                                # %land.lhs.true
	movq	8(%rcx), %rax
	testq	%rax, %rax
	je	.LBB143_4
# %bb.2:                                # %land.lhs.true
	cmpq	%r13, %rax
	je	.LBB143_4
# %bb.3:                                # %if.then
	leaq	.L.str.41(%rip), %rsi
	callq	halide_error@PLT
	movl	$-42, %eax
	jmp	.LBB143_39
.LBB143_4:                              # %land.lhs.true5
	cmpq	$0, (%rcx)
	je	.LBB143_13
.LBB143_5:                              # %if.end13
	movq	-56(%rbp), %rax                 # 8-byte Reload
	cmpq	$0, (%rax)
	movq	16(%rax), %rax
	je	.LBB143_9
# %bb.6:                                # %land.rhs
	testq	%rax, %rax
	je	.LBB143_12
# %bb.7:                                # %land.end.thread268
	movq	-56(%rbp), %rax                 # 8-byte Reload
	movq	24(%rax), %rax
	movl	%eax, %r12d
	andb	$1, %r12b
	testb	$2, %al
	jne	.LBB143_11
.LBB143_8:
	xorl	%esi, %esi
	xorl	%ebx, %ebx
	movq	16(%rcx), %r14
	testq	%r13, %r13
	setne	%r8b
	je	.LBB143_16
	jmp	.LBB143_17
.LBB143_9:                              # %land.end
	testq	%rax, %rax
	je	.LBB143_14
# %bb.10:                               # %land.end.land.rhs26_crit_edge
	movq	-56(%rbp), %rax                 # 8-byte Reload
	movq	24(%rax), %rax
	movb	$1, %r12b
	testb	$2, %al
	je	.LBB143_8
.LBB143_11:                             # %lor.rhs28
	movq	-56(%rbp), %rax                 # 8-byte Reload
	cmpq	$0, 8(%rax)
	setne	%bl
	xorl	%esi, %esi
	movq	16(%rcx), %r14
	testq	%r13, %r13
	setne	%r8b
	je	.LBB143_16
	jmp	.LBB143_17
.LBB143_12:
	movb	$1, %sil
	xorl	%r12d, %r12d
	jmp	.LBB143_15
.LBB143_13:                             # %if.then7
	movq	%rdi, %rbx
	movq	%rcx, %rsi
	movq	%r13, %rdx
	movq	%rcx, %r14
	callq	halide_device_malloc@PLT
	movq	%rbx, %rdi
	movq	%r14, %rcx
	testl	%eax, %eax
	jne	.LBB143_39
	jmp	.LBB143_5
.LBB143_14:
	movb	$1, %sil
	movb	$1, %r12b
.LBB143_15:
	movb	$1, %bl
	movq	16(%rcx), %r14
	testq	%r13, %r13
	setne	%r8b
	jne	.LBB143_17
.LBB143_16:                             # %land.end32
	movl	$-34, %eax
	testq	%r14, %r14
	je	.LBB143_39
.LBB143_17:                             # %if.end41
	testq	%r13, %r13
	sete	%al
	orb	%r12b, %al
	jne	.LBB143_19
# %bb.18:                               # %if.end49
	movq	120(%r13), %rax
	movq	%rdi, %r15
	movl	%esi, -60(%rbp)                 # 4-byte Spill
	movq	-56(%rbp), %rsi                 # 8-byte Reload
	movq	%r13, %rdx
	movq	%rcx, -72(%rbp)                 # 8-byte Spill
	movb	%r8b, -41(%rbp)                 # 1-byte Spill
	callq	*80(%rax)
	movb	-41(%rbp), %r8b                 # 1-byte Reload
	movl	-60(%rbp), %esi                 # 4-byte Reload
	movq	%r15, %rdi
	movq	-72(%rbp), %rcx                 # 8-byte Reload
	cmpl	$-42, %eax
	jne	.LBB143_33
.LBB143_19:                             # %if.then51
	testq	%r14, %r14
	sete	%dl
	movl	$-42, %eax
	testb	%dl, %sil
	jne	.LBB143_39
# %bb.20:                               # %if.end58
	orb	%r8b, %bl
	je	.LBB143_26
# %bb.21:                               # %if.else
	orb	%r12b, %r8b
	je	.LBB143_27
# %bb.22:                               # %if.else81
	testq	%r14, %r14
	sete	%dl
	orb	%dl, %r12b
	je	.LBB143_30
# %bb.23:                               # %if.else98
	testq	%r13, %r13
	je	.LBB143_39
# %bb.24:                               # %if.then100
	movq	%rdi, %rbx
	movq	-56(%rbp), %rsi                 # 8-byte Reload
	movq	%rcx, %r14
	callq	_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t@PLT
	testl	%eax, %eax
	jne	.LBB143_39
# %bb.25:                               # %if.then105
	movq	%r14, %rcx
	movq	120(%r13), %rax
	movq	%rbx, %rdi
	movq	-56(%rbp), %rsi                 # 8-byte Reload
	movq	%r13, %rdx
	callq	*80(%rax)
	jmp	.LBB143_32
.LBB143_26:                             # %if.end117.thread262
	leaq	-488(%rbp), %r14
	movq	%rdi, %r15
	movq	%r14, %rdi
	movq	-56(%rbp), %rsi                 # 8-byte Reload
	movl	$1, %edx
	movq	%rcx, %rbx
	movl	$1, %r8d
	callq	_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b@PLT
	movq	%r14, %rdi
	movq	%r15, %rsi
	callq	_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv@PLT
	movq	%rbx, %rcx
	jmp	.LBB143_34
.LBB143_27:                             # %if.then66
	movq	-56(%rbp), %rsi                 # 8-byte Reload
	movq	8(%rsi), %rax
	movq	120(%rax), %rax
	movq	%rdi, %rbx
	xorl	%edx, %edx
	movq	%rcx, %r14
	callq	*80(%rax)
	movq	%r14, %rcx
	cmpl	$-42, %eax
	jne	.LBB143_33
# %bb.28:                               # %if.then74
	movq	%rbx, %rdi
	movq	-56(%rbp), %rsi                 # 8-byte Reload
	callq	_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t@PLT
	testl	%eax, %eax
	jne	.LBB143_39
# %bb.29:                               # %if.then77
	movq	%r14, %rcx
	movq	%rbx, %rdi
	movq	-56(%rbp), %rsi                 # 8-byte Reload
	xorl	%edx, %edx
	callq	halide_buffer_copy_already_locked@PLT
	jmp	.LBB143_32
.LBB143_30:                             # %if.then85
	movq	-56(%rbp), %rsi                 # 8-byte Reload
	movq	8(%rsi), %rax
	movq	120(%rax), %rax
	movq	%rdi, %rbx
	xorl	%edx, %edx
	movq	%rcx, %r14
	callq	*80(%rax)
	testl	%eax, %eax
	jne	.LBB143_39
# %bb.31:                               # %if.then95
	movq	%r14, %rsi
	orb	$1, 24(%r14)
	movq	%rbx, %rdi
	movq	%r13, %rdx
	callq	copy_to_device_already_locked@PLT
.LBB143_32:                             # %if.end117
	movq	%r14, %rcx
.LBB143_33:                             # %if.end117
	testl	%eax, %eax
	jne	.LBB143_39
.LBB143_34:                             # %land.lhs.true126
	xorl	%eax, %eax
	cmpq	-56(%rbp), %rcx                 # 8-byte Folded Reload
	je	.LBB143_39
# %bb.35:                               # %if.then128
	movq	24(%rcx), %rdx
	andq	$-4, %rdx
	testq	%r13, %r13
	je	.LBB143_37
# %bb.36:                               # %if.then130
	orq	$2, %rdx
	jmp	.LBB143_38
.LBB143_37:                             # %if.else133
	orq	$1, %rdx
.LBB143_38:                             # %cleanup143
	movq	%rdx, 24(%rcx)
.LBB143_39:                             # %cleanup143
	addq	$456, %rsp                      # imm = 0x1C8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end143:
	.size	halide_buffer_copy_already_locked, .Lfunc_end143-halide_buffer_copy_already_locked
                                        # -- End function
	.section	.text.halide_buffer_copy,"ax",@progbits
	.weak	halide_buffer_copy              # -- Begin function halide_buffer_copy
	.p2align	4, 0x90
	.type	halide_buffer_copy,@function
halide_buffer_copy:                     # @halide_buffer_copy
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	movq	%rcx, %r15
	movq	%rdx, %rbx
	movq	%rsi, %r14
	movq	%rdi, %r12
	movq	_ZN6Halide7Runtime8Internal17device_copy_mutexE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_lock@PLT
	testq	%rbx, %rbx
	je	.LBB144_2
# %bb.1:                                # %if.then
	movq	120(%rbx), %rax
	callq	*(%rax)
.LBB144_2:                              # %if.end
	movq	8(%r14), %rax
	testq	%rax, %rax
	je	.LBB144_4
# %bb.3:                                # %if.then12
	movq	120(%rax), %rax
	callq	*(%rax)
.LBB144_4:                              # %if.end16
	movq	%r12, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r15, %rcx
	callq	halide_buffer_copy_already_locked@PLT
	movl	%eax, %r15d
	testq	%rbx, %rbx
	je	.LBB144_6
# %bb.5:                                # %if.then18
	movq	120(%rbx), %rax
	callq	*8(%rax)
.LBB144_6:                              # %if.end20
	movq	8(%r14), %rax
	testq	%rax, %rax
	je	.LBB144_8
# %bb.7:                                # %if.then23
	movq	120(%rax), %rax
	callq	*8(%rax)
.LBB144_8:                              # %if.end27
	movq	_ZN6Halide7Runtime8Internal17device_copy_mutexE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_unlock@PLT
	movl	%r15d, %eax
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end144:
	.size	halide_buffer_copy, .Lfunc_end144-halide_buffer_copy
                                        # -- End function
	.section	.text.halide_default_device_crop,"ax",@progbits
	.weak	halide_default_device_crop      # -- Begin function halide_default_device_crop
	.p2align	4, 0x90
	.type	halide_default_device_crop,@function
halide_default_device_crop:             # @halide_default_device_crop
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	leaq	.L.str.58(%rip), %rsi
	callq	halide_error@PLT
	movl	$-40, %eax
	popq	%rbp
	retq
.Lfunc_end145:
	.size	halide_default_device_crop, .Lfunc_end145-halide_default_device_crop
                                        # -- End function
	.section	.text.halide_default_device_slice,"ax",@progbits
	.weak	halide_default_device_slice     # -- Begin function halide_default_device_slice
	.p2align	4, 0x90
	.type	halide_default_device_slice,@function
halide_default_device_slice:            # @halide_default_device_slice
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	leaq	.L.str.59(%rip), %rsi
	callq	halide_error@PLT
	movl	$-40, %eax
	popq	%rbp
	retq
.Lfunc_end146:
	.size	halide_default_device_slice, .Lfunc_end146-halide_default_device_slice
                                        # -- End function
	.section	.text.halide_device_crop,"ax",@progbits
	.weak	halide_device_crop              # -- Begin function halide_device_crop
	.p2align	4, 0x90
	.type	halide_device_crop,@function
halide_device_crop:                     # @halide_device_crop
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	movq	%rdx, %r15
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	_ZN6Halide7Runtime8Internal17device_copy_mutexE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_lock@PLT
	cmpq	$0, (%rbx)
	je	.LBB147_1
# %bb.2:                                # %if.end
	cmpq	$0, (%r15)
	je	.LBB147_5
# %bb.3:                                # %if.then3
	leaq	.L.str.60(%rip), %rsi
	jmp	.LBB147_4
.LBB147_1:
	xorl	%ebx, %ebx
	jmp	.LBB147_8
.LBB147_5:                              # %if.end4
	movl	36(%rbx), %eax
	cmpl	36(%r15), %eax
	jne	.LBB147_6
# %bb.7:                                # %if.end7
	movq	8(%rbx), %rax
	movq	120(%rax), %rax
	callq	*(%rax)
	movq	8(%rbx), %rax
	movq	120(%rax), %rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	callq	*88(%rax)
	movl	%eax, %ebx
	jmp	.LBB147_8
.LBB147_6:                              # %if.then6
	leaq	.L.str.61(%rip), %rsi
.LBB147_4:                              # %cleanup
	movq	%r14, %rdi
	callq	halide_error@PLT
	movl	$-41, %ebx
.LBB147_8:                              # %cleanup
	movq	_ZN6Halide7Runtime8Internal17device_copy_mutexE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_unlock@PLT
	movl	%ebx, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end147:
	.size	halide_device_crop, .Lfunc_end147-halide_device_crop
                                        # -- End function
	.section	.text.halide_device_slice,"ax",@progbits
	.weak	halide_device_slice             # -- Begin function halide_device_slice
	.p2align	4, 0x90
	.type	halide_device_slice,@function
halide_device_slice:                    # @halide_device_slice
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%r8, %r13
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	_ZN6Halide7Runtime8Internal17device_copy_mutexE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_lock@PLT
	cmpq	$0, (%rbx)
	je	.LBB148_1
# %bb.2:                                # %if.end
	cmpq	$0, (%r13)
	je	.LBB148_5
# %bb.3:                                # %if.then3
	leaq	.L.str.60(%rip), %rsi
	jmp	.LBB148_4
.LBB148_1:
	xorl	%ebx, %ebx
	jmp	.LBB148_8
.LBB148_5:                              # %if.end4
	movl	36(%r13), %eax
	incl	%eax
	cmpl	%eax, 36(%rbx)
	jne	.LBB148_6
# %bb.7:                                # %if.end7
	movq	8(%rbx), %rax
	movq	120(%rax), %rax
	callq	*(%rax)
	movq	8(%rbx), %rax
	movq	120(%rax), %rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movq	%r13, %r8
	callq	*96(%rax)
	movl	%eax, %ebx
	jmp	.LBB148_8
.LBB148_6:                              # %if.then6
	leaq	.L.str.64(%rip), %rsi
.LBB148_4:                              # %cleanup
	movq	%r14, %rdi
	callq	halide_error@PLT
	movl	$-41, %ebx
.LBB148_8:                              # %cleanup
	movq	_ZN6Halide7Runtime8Internal17device_copy_mutexE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_unlock@PLT
	movl	%ebx, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end148:
	.size	halide_device_slice, .Lfunc_end148-halide_device_slice
                                        # -- End function
	.section	.text.halide_default_device_release_crop,"ax",@progbits
	.weak	halide_default_device_release_crop # -- Begin function halide_default_device_release_crop
	.p2align	4, 0x90
	.type	halide_default_device_release_crop,@function
halide_default_device_release_crop:     # @halide_default_device_release_crop
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	cmpq	$0, (%rsi)
	je	.LBB149_1
# %bb.2:                                # %if.end
	leaq	.L.str.58(%rip), %rsi
	callq	halide_error@PLT
	movl	$-40, %eax
	popq	%rbp
	retq
.LBB149_1:
	xorl	%eax, %eax
	popq	%rbp
	retq
.Lfunc_end149:
	.size	halide_default_device_release_crop, .Lfunc_end149-halide_default_device_release_crop
                                        # -- End function
	.section	.text.halide_device_release_crop,"ax",@progbits
	.weak	halide_device_release_crop      # -- Begin function halide_device_release_crop
	.p2align	4, 0x90
	.type	halide_device_release_crop,@function
halide_device_release_crop:             # @halide_device_release_crop
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	cmpq	$0, (%rsi)
	je	.LBB150_2
# %bb.1:                                # %if.then
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	_ZN6Halide7Runtime8Internal17device_copy_mutexE@GOTPCREL(%rip), %r15
	movq	%r15, %rdi
	callq	halide_mutex_lock@PLT
	movq	8(%rbx), %r12
	movq	120(%r12), %rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	*104(%rax)
	movl	%eax, %r14d
	movq	$0, (%rbx)
	movq	120(%r12), %rax
	callq	*8(%rax)
	movq	$0, 8(%rbx)
	movq	%r15, %rdi
	callq	halide_mutex_unlock@PLT
	movl	%r14d, %eax
	jmp	.LBB150_3
.LBB150_2:                              # %return
	xorl	%eax, %eax
.LBB150_3:                              # %return
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end150:
	.size	halide_device_release_crop, .Lfunc_end150-halide_device_release_crop
                                        # -- End function
	.section	.text.halide_float16_bits_to_float,"ax",@progbits
	.weak	halide_float16_bits_to_float    # -- Begin function halide_float16_bits_to_float
	.p2align	4, 0x90
	.type	halide_float16_bits_to_float,@function
halide_float16_bits_to_float:           # @halide_float16_bits_to_float
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, %eax
	andl	$1023, %eax                     # imm = 0x3FF
	movl	%edi, %edx
	shrl	$10, %edx
	andl	$31, %edx
	jne	.LBB151_3
# %bb.1:                                # %entry
	testl	%eax, %eax
	je	.LBB151_3
# %bb.2:                                # %if.then
	xorl	%edx, %edx
	lzcntl	%eax, %edx
	movl	%edx, %ecx
	xorb	$31, %cl
	btrl	%ecx, %eax
	movb	$23, %sil
	subb	%cl, %sil
	shlxl	%esi, %eax, %ecx
	shll	$23, %edx
	movl	$1124073472, %eax               # imm = 0x43000000
	subl	%edx, %eax
	jmp	.LBB151_7
.LBB151_3:                              # %if.else
	shll	$13, %eax
	testl	%edx, %edx
	je	.LBB151_4
# %bb.5:                                # %if.else18
	movl	$2139095040, %ecx               # imm = 0x7F800000
	cmpl	$31, %edx
	je	.LBB151_7
# %bb.6:                                # %if.else21
	shll	$23, %edx
	addl	$939524096, %edx                # imm = 0x38000000
	movl	%edx, %ecx
	jmp	.LBB151_7
.LBB151_4:
	xorl	%ecx, %ecx
.LBB151_7:                              # %if.end28
	movswl	%di, %edx
	andl	$-2147483648, %edx              # imm = 0x80000000
	orl	%eax, %edx
	orl	%ecx, %edx
	vmovd	%edx, %xmm0
	popq	%rbp
	retq
.Lfunc_end151:
	.size	halide_float16_bits_to_float, .Lfunc_end151-halide_float16_bits_to_float
                                        # -- End function
	.section	.text.halide_float16_bits_to_double,"ax",@progbits
	.weak	halide_float16_bits_to_double   # -- Begin function halide_float16_bits_to_double
	.p2align	4, 0x90
	.type	halide_float16_bits_to_double,@function
halide_float16_bits_to_double:          # @halide_float16_bits_to_double
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	callq	halide_float16_bits_to_float@PLT
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	popq	%rbp
	retq
.Lfunc_end152:
	.size	halide_float16_bits_to_double, .Lfunc_end152-halide_float16_bits_to_double
                                        # -- End function
	.section	.text.halide_error_bounds_inference_call_failed,"ax",@progbits
	.weak	halide_error_bounds_inference_call_failed # -- Begin function halide_error_bounds_inference_call_failed
	.p2align	4, 0x90
	.type	halide_error_bounds_inference_call_failed,@function
halide_error_bounds_inference_call_failed: # @halide_error_bounds_inference_call_failed
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movl	%edx, %r15d
	movq	%rsi, %r12
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB153_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%rbx), %r13
	movb	$0, 1023(%rbx)
	leaq	.L.str.111(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r13, %rsi
	jmp	.LBB153_3
.LBB153_1:                              # %entry.split
	leaq	.L.str.111(%rip), %rdx
	xorl	%r13d, %r13d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB153_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%r13, %rsi
	movq	%r12, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.1.112(%rip), %rdx
	movq	%rax, %rdi
	movq	%r13, %rsi
	callq	halide_string_to_string@PLT
	movslq	%r15d, %rdx
	movq	%rax, %rdi
	movq	%r13, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB153_4
# %bb.5:                                # %if.else.i
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB153_6
.LBB153_4:
	leaq	.L.str.274(%rip), %rsi
.LBB153_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	%r15d, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end153:
	.size	halide_error_bounds_inference_call_failed, .Lfunc_end153-halide_error_bounds_inference_call_failed
                                        # -- End function
	.section	.text.halide_error_extern_stage_failed,"ax",@progbits
	.weak	halide_error_extern_stage_failed # -- Begin function halide_error_extern_stage_failed
	.p2align	4, 0x90
	.type	halide_error_extern_stage_failed,@function
halide_error_extern_stage_failed:       # @halide_error_extern_stage_failed
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movl	%edx, %r15d
	movq	%rsi, %r12
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB154_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%rbx), %r13
	movb	$0, 1023(%rbx)
	leaq	.L.str.2.113(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r13, %rsi
	jmp	.LBB154_3
.LBB154_1:                              # %entry.split
	leaq	.L.str.2.113(%rip), %rdx
	xorl	%r13d, %r13d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB154_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%r13, %rsi
	movq	%r12, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.1.112(%rip), %rdx
	movq	%rax, %rdi
	movq	%r13, %rsi
	callq	halide_string_to_string@PLT
	movslq	%r15d, %rdx
	movq	%rax, %rdi
	movq	%r13, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB154_4
# %bb.5:                                # %if.else.i
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB154_6
.LBB154_4:
	leaq	.L.str.274(%rip), %rsi
.LBB154_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	%r15d, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end154:
	.size	halide_error_extern_stage_failed, .Lfunc_end154-halide_error_extern_stage_failed
                                        # -- End function
	.section	.text.halide_error_explicit_bounds_too_small,"ax",@progbits
	.weak	halide_error_explicit_bounds_too_small # -- Begin function halide_error_explicit_bounds_too_small
	.p2align	4, 0x90
	.type	halide_error_explicit_bounds_too_small,@function
halide_error_explicit_bounds_too_small: # @halide_error_explicit_bounds_too_small
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	movl	%r9d, -48(%rbp)                 # 4-byte Spill
	movl	%r8d, -44(%rbp)                 # 4-byte Spill
	movl	%ecx, %r14d
	movq	%rdx, %r13
	movq	%rsi, %r12
	movq	%rdi, -56(%rbp)                 # 8-byte Spill
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	je	.LBB155_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%r15), %rbx
	movb	$0, 1023(%r15)
	leaq	.L.str.3.114(%rip), %rdx
	movq	%r15, %rdi
	movq	%rbx, %rsi
	jmp	.LBB155_3
.LBB155_1:                              # %entry.split
	leaq	.L.str.3.114(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB155_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r13, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.115(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.5.116(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movslq	%r14d, %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.6.117(%rip), %r14
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	callq	halide_string_to_string@PLT
	movslq	-44(%rbp), %rdx                 # 4-byte Folded Reload
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.7.118(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movslq	-48(%rbp), %rdx                 # 4-byte Folded Reload
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	callq	halide_string_to_string@PLT
	movslq	16(%rbp), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.8.119(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	testq	%r15, %r15
	je	.LBB155_4
# %bb.5:                                # %if.else.i
	subq	%r15, %rax
	incq	%rax
	movq	-56(%rbp), %rbx                 # 8-byte Reload
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r15, %rsi
	jmp	.LBB155_6
.LBB155_4:
	leaq	.L.str.274(%rip), %rsi
	movq	-56(%rbp), %rbx                 # 8-byte Reload
.LBB155_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%rbx, %rdi
	callq	halide_error@PLT
	movq	%r15, %rdi
	callq	free@PLT
	movl	$-2, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end155:
	.size	halide_error_explicit_bounds_too_small, .Lfunc_end155-halide_error_explicit_bounds_too_small
                                        # -- End function
	.section	.text.halide_error_bad_type,"ax",@progbits
	.weak	halide_error_bad_type           # -- Begin function halide_error_bad_type
	.p2align	4, 0x90
	.type	halide_error_bad_type,@function
halide_error_bad_type:                  # @halide_error_bad_type
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$32, %rsp
	movq	%rsi, %r12
	movq	%rdi, %r14
	movl	%edx, -56(%rbp)
	movl	%ecx, -52(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -40(%rbp)
	leaq	-48(%rbp), %rdi
	leaq	-52(%rbp), %rsi
	movl	$4, %edx
	callq	memcpy@PLT
	leaq	-40(%rbp), %rdi
	leaq	-56(%rbp), %rsi
	movl	$4, %edx
	callq	memcpy@PLT
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	je	.LBB156_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%r15), %rbx
	movb	$0, 1023(%r15)
	movq	%r15, %rdi
	movq	%rbx, %rsi
	jmp	.LBB156_3
.LBB156_1:                              # %entry.split
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB156_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	movq	%r12, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.9.120(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	leaq	-48(%rbp), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_type_to_string@PLT
	leaq	.L.str.10.121(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	leaq	-40(%rbp), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_type_to_string@PLT
	testq	%r15, %r15
	je	.LBB156_4
# %bb.5:                                # %if.else.i
	subq	%r15, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r15, %rsi
	jmp	.LBB156_6
.LBB156_4:
	leaq	.L.str.274(%rip), %rsi
.LBB156_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%r15, %rdi
	callq	free@PLT
	movl	$-3, %eax
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end156:
	.size	halide_error_bad_type, .Lfunc_end156-halide_error_bad_type
                                        # -- End function
	.section	.text.halide_error_bad_dimensions,"ax",@progbits
	.weak	halide_error_bad_dimensions     # -- Begin function halide_error_bad_dimensions
	.p2align	4, 0x90
	.type	halide_error_bad_dimensions,@function
halide_error_bad_dimensions:            # @halide_error_bad_dimensions
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movl	%ecx, %r13d
	movl	%edx, %r15d
	movq	%rsi, %r14
	movq	%rdi, -48(%rbp)                 # 8-byte Spill
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r12
	testq	%rax, %rax
	je	.LBB157_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%r12), %rbx
	movb	$0, 1023(%r12)
	movq	%r12, %rdi
	movq	%rbx, %rsi
	jmp	.LBB157_3
.LBB157_1:                              # %entry.split
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB157_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	movq	%r14, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.11.122(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movslq	%r13d, %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.12.123(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movslq	%r15d, %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.13.124(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	testq	%r12, %r12
	je	.LBB157_4
# %bb.5:                                # %if.else.i
	subq	%r12, %rax
	incq	%rax
	movq	-48(%rbp), %rbx                 # 8-byte Reload
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r12, %rsi
	jmp	.LBB157_6
.LBB157_4:
	leaq	.L.str.274(%rip), %rsi
	movq	-48(%rbp), %rbx                 # 8-byte Reload
.LBB157_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%rbx, %rdi
	callq	halide_error@PLT
	movq	%r12, %rdi
	callq	free@PLT
	movl	$-43, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end157:
	.size	halide_error_bad_dimensions, .Lfunc_end157-halide_error_bad_dimensions
                                        # -- End function
	.section	.text.halide_error_access_out_of_bounds,"ax",@progbits
	.weak	halide_error_access_out_of_bounds # -- Begin function halide_error_access_out_of_bounds
	.p2align	4, 0x90
	.type	halide_error_access_out_of_bounds,@function
halide_error_access_out_of_bounds:      # @halide_error_access_out_of_bounds
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	movq	%rsi, %r15
	movq	%rdi, -56(%rbp)                 # 8-byte Spill
	cmpl	%r9d, %ecx
	jge	.LBB158_7
# %bb.1:                                # %if.then
	movl	%r9d, %r12d
	movl	%ecx, %r14d
	movl	%edx, -44(%rbp)                 # 4-byte Spill
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r13
	testq	%rax, %rax
	je	.LBB158_2
# %bb.3:                                # %if.then6.i
	leaq	1023(%r13), %rbx
	movb	$0, 1023(%r13)
	movq	%r13, %rdi
	movq	%rbx, %rsi
	jmp	.LBB158_4
.LBB158_7:                              # %if.else
	movl	%r8d, %ebx
	movl	16(%rbp), %r12d
	cmpl	%r12d, %r8d
	jle	.LBB158_14
# %bb.8:                                # %if.then8
	movl	%edx, -44(%rbp)                 # 4-byte Spill
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r13
	testq	%rax, %rax
	je	.LBB158_9
# %bb.10:                               # %if.then6.i59
	leaq	1023(%r13), %r14
	movb	$0, 1023(%r13)
	movq	%r13, %rdi
	movq	%r14, %rsi
	jmp	.LBB158_11
.LBB158_2:                              # %if.then.split
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB158_4:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.14.125(%rip), %rdx
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movslq	%r14d, %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.15.126(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movslq	%r12d, %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.16.127(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movslq	-44(%rbp), %rdx                 # 4-byte Folded Reload
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	testq	%r13, %r13
	je	.LBB158_6
.LBB158_12:
	movq	-56(%rbp), %rbx                 # 8-byte Reload
	subq	%r13, %rax
	incq	%rax
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r13, %r14
	jmp	.LBB158_13
.LBB158_9:                              # %if.then8.split
	xorl	%r14d, %r14d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB158_11:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.14.125(%rip), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	halide_string_to_string@PLT
	movslq	%ebx, %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.17.128(%rip), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	halide_string_to_string@PLT
	movslq	%r12d, %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.16.127(%rip), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	halide_string_to_string@PLT
	movslq	-44(%rbp), %rdx                 # 4-byte Folded Reload
	movq	%rax, %rdi
	movq	%r14, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	testq	%r13, %r13
	jne	.LBB158_12
.LBB158_6:
	xorl	%r14d, %r14d
	leaq	.L.str.274(%rip), %r13
	movq	-56(%rbp), %rbx                 # 8-byte Reload
.LBB158_13:                             # %if.end17.sink.split
	movq	%rbx, %rdi
	movq	%r13, %rsi
	callq	halide_error@PLT
	movq	%r14, %rdi
	callq	free@PLT
.LBB158_14:                             # %if.end17
	movl	$-4, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end158:
	.size	halide_error_access_out_of_bounds, .Lfunc_end158-halide_error_access_out_of_bounds
                                        # -- End function
	.section	.text.halide_error_buffer_allocation_too_large,"ax",@progbits
	.weak	halide_error_buffer_allocation_too_large # -- Begin function halide_error_buffer_allocation_too_large
	.p2align	4, 0x90
	.type	halide_error_buffer_allocation_too_large,@function
halide_error_buffer_allocation_too_large: # @halide_error_buffer_allocation_too_large
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rcx, -48(%rbp)                 # 8-byte Spill
	movq	%rdx, %r12
	movq	%rsi, %r15
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r13
	testq	%rax, %rax
	je	.LBB159_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%r13), %rbx
	movb	$0, 1023(%r13)
	leaq	.L.str.18.129(%rip), %rdx
	movq	%r13, %rdi
	movq	%rbx, %rsi
	jmp	.LBB159_3
.LBB159_1:                              # %entry.split
	leaq	.L.str.18.129(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB159_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.19.130(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	movl	$1, %ecx
	callq	halide_uint64_to_string@PLT
	leaq	.L.str.20.131(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	-48(%rbp), %rdx                 # 8-byte Reload
	movl	$1, %ecx
	callq	halide_uint64_to_string@PLT
	testq	%r13, %r13
	je	.LBB159_4
# %bb.5:                                # %if.else.i
	subq	%r13, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%r13, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r13, %rsi
	jmp	.LBB159_6
.LBB159_4:
	leaq	.L.str.274(%rip), %rsi
.LBB159_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%r13, %rdi
	callq	free@PLT
	movl	$-5, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end159:
	.size	halide_error_buffer_allocation_too_large, .Lfunc_end159-halide_error_buffer_allocation_too_large
                                        # -- End function
	.section	.text.halide_error_buffer_extents_negative,"ax",@progbits
	.weak	halide_error_buffer_extents_negative # -- Begin function halide_error_buffer_extents_negative
	.p2align	4, 0x90
	.type	halide_error_buffer_extents_negative,@function
halide_error_buffer_extents_negative:   # @halide_error_buffer_extents_negative
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movl	%ecx, %r15d
	movl	%edx, %r13d
	movq	%rsi, %r14
	movq	%rdi, -48(%rbp)                 # 8-byte Spill
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r12
	testq	%rax, %rax
	je	.LBB160_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%r12), %rbx
	movb	$0, 1023(%r12)
	leaq	.L.str.21.132(%rip), %rdx
	movq	%r12, %rdi
	movq	%rbx, %rsi
	jmp	.LBB160_3
.LBB160_1:                              # %entry.split
	leaq	.L.str.21.132(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB160_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.22.133(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movslq	%r13d, %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.23.134(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movslq	%r15d, %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.8.119(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	testq	%r12, %r12
	je	.LBB160_4
# %bb.5:                                # %if.else.i
	subq	%r12, %rax
	incq	%rax
	movq	-48(%rbp), %rbx                 # 8-byte Reload
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r12, %rsi
	jmp	.LBB160_6
.LBB160_4:
	leaq	.L.str.274(%rip), %rsi
	movq	-48(%rbp), %rbx                 # 8-byte Reload
.LBB160_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%rbx, %rdi
	callq	halide_error@PLT
	movq	%r12, %rdi
	callq	free@PLT
	movl	$-28, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end160:
	.size	halide_error_buffer_extents_negative, .Lfunc_end160-halide_error_buffer_extents_negative
                                        # -- End function
	.section	.text.halide_error_buffer_extents_too_large,"ax",@progbits
	.weak	halide_error_buffer_extents_too_large # -- Begin function halide_error_buffer_extents_too_large
	.p2align	4, 0x90
	.type	halide_error_buffer_extents_too_large,@function
halide_error_buffer_extents_too_large:  # @halide_error_buffer_extents_too_large
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rcx, -48(%rbp)                 # 8-byte Spill
	movq	%rdx, %r12
	movq	%rsi, %r15
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r13
	testq	%rax, %rax
	je	.LBB161_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%r13), %rbx
	movb	$0, 1023(%r13)
	leaq	.L.str.24.135(%rip), %rdx
	movq	%r13, %rdi
	movq	%rbx, %rsi
	jmp	.LBB161_3
.LBB161_1:                              # %entry.split
	leaq	.L.str.24.135(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB161_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.19.130(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.20.131(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	-48(%rbp), %rdx                 # 8-byte Reload
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	testq	%r13, %r13
	je	.LBB161_4
# %bb.5:                                # %if.else.i
	subq	%r13, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%r13, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r13, %rsi
	jmp	.LBB161_6
.LBB161_4:
	leaq	.L.str.274(%rip), %rsi
.LBB161_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%r13, %rdi
	callq	free@PLT
	movl	$-6, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end161:
	.size	halide_error_buffer_extents_too_large, .Lfunc_end161-halide_error_buffer_extents_too_large
                                        # -- End function
	.section	.text.halide_error_constraints_make_required_region_smaller,"ax",@progbits
	.weak	halide_error_constraints_make_required_region_smaller # -- Begin function halide_error_constraints_make_required_region_smaller
	.p2align	4, 0x90
	.type	halide_error_constraints_make_required_region_smaller,@function
halide_error_constraints_make_required_region_smaller: # @halide_error_constraints_make_required_region_smaller
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	movl	%r9d, %r13d
                                        # kill: def $r8d killed $r8d def $r8
                                        # kill: def $ecx killed $ecx def $rcx
	movl	%edx, %r14d
	movq	%rsi, %r12
	movq	%rdi, -56(%rbp)                 # 8-byte Spill
	movl	16(%rbp), %eax
	leal	-1(%r13,%rax), %eax
	movl	%eax, -44(%rbp)                 # 4-byte Spill
	movq	%rcx, -64(%rbp)                 # 8-byte Spill
	leal	(%rcx,%r8), %eax
	decl	%eax
	movl	%eax, -48(%rbp)                 # 4-byte Spill
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	je	.LBB162_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%r15), %rbx
	movb	$0, 1023(%r15)
	leaq	.L.str.25.136(%rip), %rdx
	movq	%r15, %rdi
	movq	%rbx, %rsi
	jmp	.LBB162_3
.LBB162_1:                              # %entry.split
	leaq	.L.str.25.136(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB162_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.26.137(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movslq	%r14d, %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.27.138(%rip), %r14
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.28.139(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movslq	%r13d, %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.6.117(%rip), %r12
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	halide_string_to_string@PLT
	movslq	-44(%rbp), %rdx                 # 4-byte Folded Reload
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.29.140(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movslq	-64(%rbp), %rdx                 # 4-byte Folded Reload
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	halide_string_to_string@PLT
	movslq	-48(%rbp), %rdx                 # 4-byte Folded Reload
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.30.141(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	testq	%r15, %r15
	je	.LBB162_4
# %bb.5:                                # %if.else.i
	subq	%r15, %rax
	incq	%rax
	movq	-56(%rbp), %rbx                 # 8-byte Reload
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r15, %rsi
	jmp	.LBB162_6
.LBB162_4:
	leaq	.L.str.274(%rip), %rsi
	movq	-56(%rbp), %rbx                 # 8-byte Reload
.LBB162_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%rbx, %rdi
	callq	halide_error@PLT
	movq	%r15, %rdi
	callq	free@PLT
	movl	$-7, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end162:
	.size	halide_error_constraints_make_required_region_smaller, .Lfunc_end162-halide_error_constraints_make_required_region_smaller
                                        # -- End function
	.section	.text.halide_error_constraint_violated,"ax",@progbits
	.weak	halide_error_constraint_violated # -- Begin function halide_error_constraint_violated
	.p2align	4, 0x90
	.type	halide_error_constraint_violated,@function
halide_error_constraint_violated:       # @halide_error_constraint_violated
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	movl	%r8d, -44(%rbp)                 # 4-byte Spill
	movq	%rcx, %r13
	movl	%edx, %r15d
	movq	%rsi, %r14
	movq	%rdi, -56(%rbp)                 # 8-byte Spill
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r12
	testq	%rax, %rax
	je	.LBB163_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%r12), %rbx
	movb	$0, 1023(%r12)
	leaq	.L.str.31.142(%rip), %rdx
	movq	%r12, %rdi
	movq	%rbx, %rsi
	jmp	.LBB163_3
.LBB163_1:                              # %entry.split
	leaq	.L.str.31.142(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB163_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.32.143(%rip), %r14
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	callq	halide_string_to_string@PLT
	movslq	%r15d, %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.33.144(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r13, %rdx
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	callq	halide_string_to_string@PLT
	movslq	-44(%rbp), %rdx                 # 4-byte Folded Reload
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.8.119(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	testq	%r12, %r12
	je	.LBB163_4
# %bb.5:                                # %if.else.i
	subq	%r12, %rax
	incq	%rax
	movq	-56(%rbp), %rbx                 # 8-byte Reload
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r12, %rsi
	jmp	.LBB163_6
.LBB163_4:
	leaq	.L.str.274(%rip), %rsi
	movq	-56(%rbp), %rbx                 # 8-byte Reload
.LBB163_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%rbx, %rdi
	callq	halide_error@PLT
	movq	%r12, %rdi
	callq	free@PLT
	movl	$-8, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end163:
	.size	halide_error_constraint_violated, .Lfunc_end163-halide_error_constraint_violated
                                        # -- End function
	.section	.text.halide_error_param_too_small_i64,"ax",@progbits
	.weak	halide_error_param_too_small_i64 # -- Begin function halide_error_param_too_small_i64
	.p2align	4, 0x90
	.type	halide_error_param_too_small_i64,@function
halide_error_param_too_small_i64:       # @halide_error_param_too_small_i64
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rcx, -48(%rbp)                 # 8-byte Spill
	movq	%rdx, %r12
	movq	%rsi, %r15
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r13
	testq	%rax, %rax
	je	.LBB164_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%r13), %rbx
	movb	$0, 1023(%r13)
	leaq	.L.str.34.145(%rip), %rdx
	movq	%r13, %rdi
	movq	%rbx, %rsi
	jmp	.LBB164_3
.LBB164_1:                              # %entry.split
	leaq	.L.str.34.145(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB164_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.19.130(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.35.146(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	-48(%rbp), %rdx                 # 8-byte Reload
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	testq	%r13, %r13
	je	.LBB164_4
# %bb.5:                                # %if.else.i
	subq	%r13, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%r13, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r13, %rsi
	jmp	.LBB164_6
.LBB164_4:
	leaq	.L.str.274(%rip), %rsi
.LBB164_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%r13, %rdi
	callq	free@PLT
	movl	$-9, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end164:
	.size	halide_error_param_too_small_i64, .Lfunc_end164-halide_error_param_too_small_i64
                                        # -- End function
	.section	.text.halide_error_param_too_small_u64,"ax",@progbits
	.weak	halide_error_param_too_small_u64 # -- Begin function halide_error_param_too_small_u64
	.p2align	4, 0x90
	.type	halide_error_param_too_small_u64,@function
halide_error_param_too_small_u64:       # @halide_error_param_too_small_u64
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rcx, -48(%rbp)                 # 8-byte Spill
	movq	%rdx, %r12
	movq	%rsi, %r15
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r13
	testq	%rax, %rax
	je	.LBB165_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%r13), %rbx
	movb	$0, 1023(%r13)
	leaq	.L.str.34.145(%rip), %rdx
	movq	%r13, %rdi
	movq	%rbx, %rsi
	jmp	.LBB165_3
.LBB165_1:                              # %entry.split
	leaq	.L.str.34.145(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB165_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.19.130(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	movl	$1, %ecx
	callq	halide_uint64_to_string@PLT
	leaq	.L.str.35.146(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	-48(%rbp), %rdx                 # 8-byte Reload
	movl	$1, %ecx
	callq	halide_uint64_to_string@PLT
	testq	%r13, %r13
	je	.LBB165_4
# %bb.5:                                # %if.else.i
	subq	%r13, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%r13, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r13, %rsi
	jmp	.LBB165_6
.LBB165_4:
	leaq	.L.str.274(%rip), %rsi
.LBB165_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%r13, %rdi
	callq	free@PLT
	movl	$-9, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end165:
	.size	halide_error_param_too_small_u64, .Lfunc_end165-halide_error_param_too_small_u64
                                        # -- End function
	.section	.text.halide_error_param_too_small_f64,"ax",@progbits
	.weak	halide_error_param_too_small_f64 # -- Begin function halide_error_param_too_small_f64
	.p2align	4, 0x90
	.type	halide_error_param_too_small_f64,@function
halide_error_param_too_small_f64:       # @halide_error_param_too_small_f64
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$16, %rsp
	vmovsd	%xmm1, -48(%rbp)                # 8-byte Spill
	vmovsd	%xmm0, -40(%rbp)                # 8-byte Spill
	movq	%rsi, %r12
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	je	.LBB166_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%r15), %rbx
	movb	$0, 1023(%r15)
	leaq	.L.str.34.145(%rip), %rdx
	movq	%r15, %rdi
	movq	%rbx, %rsi
	jmp	.LBB166_3
.LBB166_1:                              # %entry.split
	leaq	.L.str.34.145(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB166_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.19.130(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	vmovsd	-40(%rbp), %xmm0                # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movl	$1, %edx
	callq	halide_double_to_string@PLT
	leaq	.L.str.35.146(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	vmovsd	-48(%rbp), %xmm0                # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movl	$1, %edx
	callq	halide_double_to_string@PLT
	testq	%r15, %r15
	je	.LBB166_4
# %bb.5:                                # %if.else.i
	subq	%r15, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r15, %rsi
	jmp	.LBB166_6
.LBB166_4:
	leaq	.L.str.274(%rip), %rsi
.LBB166_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%r15, %rdi
	callq	free@PLT
	movl	$-9, %eax
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end166:
	.size	halide_error_param_too_small_f64, .Lfunc_end166-halide_error_param_too_small_f64
                                        # -- End function
	.section	.text.halide_error_param_too_large_i64,"ax",@progbits
	.weak	halide_error_param_too_large_i64 # -- Begin function halide_error_param_too_large_i64
	.p2align	4, 0x90
	.type	halide_error_param_too_large_i64,@function
halide_error_param_too_large_i64:       # @halide_error_param_too_large_i64
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rcx, -48(%rbp)                 # 8-byte Spill
	movq	%rdx, %r12
	movq	%rsi, %r15
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r13
	testq	%rax, %rax
	je	.LBB167_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%r13), %rbx
	movb	$0, 1023(%r13)
	leaq	.L.str.34.145(%rip), %rdx
	movq	%r13, %rdi
	movq	%rbx, %rsi
	jmp	.LBB167_3
.LBB167_1:                              # %entry.split
	leaq	.L.str.34.145(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB167_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.19.130(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.36(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	-48(%rbp), %rdx                 # 8-byte Reload
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	testq	%r13, %r13
	je	.LBB167_4
# %bb.5:                                # %if.else.i
	subq	%r13, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%r13, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r13, %rsi
	jmp	.LBB167_6
.LBB167_4:
	leaq	.L.str.274(%rip), %rsi
.LBB167_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%r13, %rdi
	callq	free@PLT
	movl	$-10, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end167:
	.size	halide_error_param_too_large_i64, .Lfunc_end167-halide_error_param_too_large_i64
                                        # -- End function
	.section	.text.halide_error_param_too_large_u64,"ax",@progbits
	.weak	halide_error_param_too_large_u64 # -- Begin function halide_error_param_too_large_u64
	.p2align	4, 0x90
	.type	halide_error_param_too_large_u64,@function
halide_error_param_too_large_u64:       # @halide_error_param_too_large_u64
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rcx, -48(%rbp)                 # 8-byte Spill
	movq	%rdx, %r12
	movq	%rsi, %r15
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r13
	testq	%rax, %rax
	je	.LBB168_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%r13), %rbx
	movb	$0, 1023(%r13)
	leaq	.L.str.34.145(%rip), %rdx
	movq	%r13, %rdi
	movq	%rbx, %rsi
	jmp	.LBB168_3
.LBB168_1:                              # %entry.split
	leaq	.L.str.34.145(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB168_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.19.130(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	movl	$1, %ecx
	callq	halide_uint64_to_string@PLT
	leaq	.L.str.36(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	-48(%rbp), %rdx                 # 8-byte Reload
	movl	$1, %ecx
	callq	halide_uint64_to_string@PLT
	testq	%r13, %r13
	je	.LBB168_4
# %bb.5:                                # %if.else.i
	subq	%r13, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%r13, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r13, %rsi
	jmp	.LBB168_6
.LBB168_4:
	leaq	.L.str.274(%rip), %rsi
.LBB168_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%r13, %rdi
	callq	free@PLT
	movl	$-10, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end168:
	.size	halide_error_param_too_large_u64, .Lfunc_end168-halide_error_param_too_large_u64
                                        # -- End function
	.section	.text.halide_error_param_too_large_f64,"ax",@progbits
	.weak	halide_error_param_too_large_f64 # -- Begin function halide_error_param_too_large_f64
	.p2align	4, 0x90
	.type	halide_error_param_too_large_f64,@function
halide_error_param_too_large_f64:       # @halide_error_param_too_large_f64
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$16, %rsp
	vmovsd	%xmm1, -48(%rbp)                # 8-byte Spill
	vmovsd	%xmm0, -40(%rbp)                # 8-byte Spill
	movq	%rsi, %r12
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	je	.LBB169_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%r15), %rbx
	movb	$0, 1023(%r15)
	leaq	.L.str.34.145(%rip), %rdx
	movq	%r15, %rdi
	movq	%rbx, %rsi
	jmp	.LBB169_3
.LBB169_1:                              # %entry.split
	leaq	.L.str.34.145(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB169_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.19.130(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	vmovsd	-40(%rbp), %xmm0                # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movl	$1, %edx
	callq	halide_double_to_string@PLT
	leaq	.L.str.36(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	vmovsd	-48(%rbp), %xmm0                # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movl	$1, %edx
	callq	halide_double_to_string@PLT
	testq	%r15, %r15
	je	.LBB169_4
# %bb.5:                                # %if.else.i
	subq	%r15, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r15, %rsi
	jmp	.LBB169_6
.LBB169_4:
	leaq	.L.str.274(%rip), %rsi
.LBB169_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%r15, %rdi
	callq	free@PLT
	movl	$-10, %eax
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end169:
	.size	halide_error_param_too_large_f64, .Lfunc_end169-halide_error_param_too_large_f64
                                        # -- End function
	.section	.text.halide_error_out_of_memory,"ax",@progbits
	.weak	halide_error_out_of_memory      # -- Begin function halide_error_out_of_memory
	.p2align	4, 0x90
	.type	halide_error_out_of_memory,@function
halide_error_out_of_memory:             # @halide_error_out_of_memory
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	leaq	.L.str.37(%rip), %rsi
	callq	halide_error@PLT
	movl	$-11, %eax
	popq	%rbp
	retq
.Lfunc_end170:
	.size	halide_error_out_of_memory, .Lfunc_end170-halide_error_out_of_memory
                                        # -- End function
	.section	.text.halide_error_buffer_argument_is_null,"ax",@progbits
	.weak	halide_error_buffer_argument_is_null # -- Begin function halide_error_buffer_argument_is_null
	.p2align	4, 0x90
	.type	halide_error_buffer_argument_is_null,@function
halide_error_buffer_argument_is_null:   # @halide_error_buffer_argument_is_null
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	movq	%rsi, %r15
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB171_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.38(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB171_3
.LBB171_1:                              # %entry.split
	leaq	.L.str.38(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB171_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.39(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB171_4
# %bb.5:                                # %if.else.i
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB171_6
.LBB171_4:
	leaq	.L.str.274(%rip), %rsi
.LBB171_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-12, %eax
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end171:
	.size	halide_error_buffer_argument_is_null, .Lfunc_end171-halide_error_buffer_argument_is_null
                                        # -- End function
	.section	.text.halide_error_debug_to_file_failed,"ax",@progbits
	.weak	halide_error_debug_to_file_failed # -- Begin function halide_error_debug_to_file_failed
	.p2align	4, 0x90
	.type	halide_error_debug_to_file_failed,@function
halide_error_debug_to_file_failed:      # @halide_error_debug_to_file_failed
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movl	%ecx, -44(%rbp)                 # 4-byte Spill
	movq	%rdx, %r12
	movq	%rsi, %r15
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r13
	testq	%rax, %rax
	je	.LBB172_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%r13), %rbx
	movb	$0, 1023(%r13)
	leaq	.L.str.40(%rip), %rdx
	movq	%r13, %rdi
	movq	%rbx, %rsi
	jmp	.LBB172_3
.LBB172_1:                              # %entry.split
	leaq	.L.str.40(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB172_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.41.147(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r12, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.42(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movslq	-44(%rbp), %rdx                 # 4-byte Folded Reload
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	testq	%r13, %r13
	je	.LBB172_4
# %bb.5:                                # %if.else.i
	subq	%r13, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%r13, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r13, %rsi
	jmp	.LBB172_6
.LBB172_4:
	leaq	.L.str.274(%rip), %rsi
.LBB172_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%r13, %rdi
	callq	free@PLT
	movl	$-13, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end172:
	.size	halide_error_debug_to_file_failed, .Lfunc_end172-halide_error_debug_to_file_failed
                                        # -- End function
	.section	.text.halide_error_unaligned_host_ptr,"ax",@progbits
	.weak	halide_error_unaligned_host_ptr # -- Begin function halide_error_unaligned_host_ptr
	.p2align	4, 0x90
	.type	halide_error_unaligned_host_ptr,@function
halide_error_unaligned_host_ptr:        # @halide_error_unaligned_host_ptr
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movl	%edx, %r15d
	movq	%rsi, %r13
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r12
	testq	%rax, %rax
	je	.LBB173_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%r12), %rbx
	movb	$0, 1023(%r12)
	leaq	.L.str.43(%rip), %rdx
	movq	%r12, %rdi
	movq	%rbx, %rsi
	jmp	.LBB173_3
.LBB173_1:                              # %entry.split
	leaq	.L.str.43(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB173_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r13, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.44(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movslq	%r15d, %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.45(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	testq	%r12, %r12
	je	.LBB173_4
# %bb.5:                                # %if.else.i
	subq	%r12, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r12, %rsi
	jmp	.LBB173_6
.LBB173_4:
	leaq	.L.str.274(%rip), %rsi
.LBB173_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%r12, %rdi
	callq	free@PLT
	movl	$-24, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end173:
	.size	halide_error_unaligned_host_ptr, .Lfunc_end173-halide_error_unaligned_host_ptr
                                        # -- End function
	.section	.text.halide_error_device_dirty_with_no_device_support,"ax",@progbits
	.weak	halide_error_device_dirty_with_no_device_support # -- Begin function halide_error_device_dirty_with_no_device_support
	.p2align	4, 0x90
	.type	halide_error_device_dirty_with_no_device_support,@function
halide_error_device_dirty_with_no_device_support: # @halide_error_device_dirty_with_no_device_support
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	movq	%rsi, %r15
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB174_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.46(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB174_3
.LBB174_1:                              # %entry.split
	leaq	.L.str.46(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB174_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.47(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.48(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB174_4
# %bb.5:                                # %if.else.i
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB174_6
.LBB174_4:
	leaq	.L.str.274(%rip), %rsi
.LBB174_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-44, %eax
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end174:
	.size	halide_error_device_dirty_with_no_device_support, .Lfunc_end174-halide_error_device_dirty_with_no_device_support
                                        # -- End function
	.section	.text.halide_error_host_is_null,"ax",@progbits
	.weak	halide_error_host_is_null       # -- Begin function halide_error_host_is_null
	.p2align	4, 0x90
	.type	halide_error_host_is_null,@function
halide_error_host_is_null:              # @halide_error_host_is_null
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	movq	%rsi, %r15
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB175_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.43(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB175_3
.LBB175_1:                              # %entry.split
	leaq	.L.str.43(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB175_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.49(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB175_4
# %bb.5:                                # %if.else.i
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB175_6
.LBB175_4:
	leaq	.L.str.274(%rip), %rsi
.LBB175_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-34, %eax
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end175:
	.size	halide_error_host_is_null, .Lfunc_end175-halide_error_host_is_null
                                        # -- End function
	.section	.text.halide_error_bad_fold,"ax",@progbits
	.weak	halide_error_bad_fold           # -- Begin function halide_error_bad_fold
	.p2align	4, 0x90
	.type	halide_error_bad_fold,@function
halide_error_bad_fold:                  # @halide_error_bad_fold
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rcx, -48(%rbp)                 # 8-byte Spill
	movq	%rdx, %r15
	movq	%rsi, %r13
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r12
	testq	%rax, %rax
	je	.LBB176_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%r12), %rbx
	movb	$0, 1023(%r12)
	leaq	.L.str.50.148(%rip), %rdx
	movq	%r12, %rdi
	movq	%rbx, %rsi
	jmp	.LBB176_3
.LBB176_1:                              # %entry.split
	leaq	.L.str.50.148(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB176_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.51(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r13, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.52(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	-48(%rbp), %rdx                 # 8-byte Reload
	callq	halide_string_to_string@PLT
	leaq	.L.str.30.141(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	testq	%r12, %r12
	je	.LBB176_4
# %bb.5:                                # %if.else.i
	subq	%r12, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r12, %rsi
	jmp	.LBB176_6
.LBB176_4:
	leaq	.L.str.274(%rip), %rsi
.LBB176_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%r12, %rdi
	callq	free@PLT
	movl	$-25, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end176:
	.size	halide_error_bad_fold, .Lfunc_end176-halide_error_bad_fold
                                        # -- End function
	.section	.text.halide_error_bad_extern_fold,"ax",@progbits
	.weak	halide_error_bad_extern_fold    # -- Begin function halide_error_bad_extern_fold
	.p2align	4, 0x90
	.type	halide_error_bad_extern_fold,@function
halide_error_bad_extern_fold:           # @halide_error_bad_extern_fold
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %r12d
                                        # kill: def $r8d killed $r8d def $r8
	movl	%ecx, %r15d
	movq	%rsi, %r14
	movq	%rdi, %rbx
	movl	16(%rbp), %eax
	cmpl	%r9d, %ecx
	movq	%rsi, -64(%rbp)                 # 8-byte Spill
	jl	.LBB177_2
# %bb.1:                                # %lor.lhs.false
	leal	(%r8,%r15), %ecx
	addl	%r12d, %eax
	cmpl	%eax, %ecx
	jle	.LBB177_9
.LBB177_2:                              # %if.then
	movq	%r15, -72(%rbp)                 # 8-byte Spill
	movl	%edx, %r15d
	movq	%r8, -48(%rbp)                  # 8-byte Spill
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r13
	testq	%rax, %rax
	movq	%rbx, -56(%rbp)                 # 8-byte Spill
	je	.LBB177_3
# %bb.4:                                # %if.then6.i
	leaq	1023(%r13), %r14
	movb	$0, 1023(%r13)
	leaq	.L.str.53(%rip), %rdx
	movq	%r13, %rdi
	movq	%r14, %rsi
	jmp	.LBB177_5
.LBB177_3:                              # %if.then.split
	leaq	.L.str.53(%rip), %rdx
	xorl	%r14d, %r14d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB177_5:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movslq	%r15d, %rdx
	movq	%r14, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.51(%rip), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%r14, %rsi
	movq	-64(%rbp), %rdx                 # 8-byte Reload
	callq	halide_string_to_string@PLT
	leaq	.L.str.54(%rip), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	halide_string_to_string@PLT
	movq	-72(%rbp), %r15                 # 8-byte Reload
	movslq	%r15d, %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.55(%rip), %rbx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	callq	halide_string_to_string@PLT
	movq	-48(%rbp), %rcx                 # 8-byte Reload
	addl	%r15d, %ecx
	decl	%ecx
	movslq	%ecx, %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.56(%rip), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.57(%rip), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	halide_string_to_string@PLT
	movslq	%r12d, %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	movq	%rax, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	callq	halide_string_to_string@PLT
	movl	16(%rbp), %ecx
	addl	%r12d, %ecx
	decl	%ecx
	movslq	%ecx, %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.58.149(%rip), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	halide_string_to_string@PLT
	testq	%r13, %r13
	je	.LBB177_6
# %bb.7:
	movq	-56(%rbp), %rbx                 # 8-byte Reload
	jmp	.LBB177_8
.LBB177_6:
	xorl	%r14d, %r14d
	leaq	.L.str.274(%rip), %r13
	movq	-56(%rbp), %rbx                 # 8-byte Reload
	jmp	.LBB177_14
.LBB177_9:                              # %if.else
	movl	%ecx, -48(%rbp)                 # 4-byte Spill
	movl	%edx, %r12d
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r13
	testq	%rax, %rax
	je	.LBB177_10
# %bb.11:                               # %if.then6.i107
	leaq	1023(%r13), %r14
	movb	$0, 1023(%r13)
	leaq	.L.str.53(%rip), %rdx
	movq	%r13, %rdi
	movq	%r14, %rsi
	jmp	.LBB177_12
.LBB177_10:                             # %if.else.split
	leaq	.L.str.53(%rip), %rdx
	xorl	%r14d, %r14d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB177_12:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
	callq	halide_string_to_string@PLT
	movslq	%r12d, %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.51(%rip), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%r14, %rsi
	movq	-64(%rbp), %rdx                 # 8-byte Reload
	callq	halide_string_to_string@PLT
	leaq	.L.str.54(%rip), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	halide_string_to_string@PLT
	movslq	%r15d, %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.55(%rip), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	halide_string_to_string@PLT
	movl	-48(%rbp), %ecx                 # 4-byte Reload
	decl	%ecx
	movslq	%ecx, %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.56(%rip), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.59.150(%rip), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.60.151(%rip), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	halide_string_to_string@PLT
	movl	16(%rbp), %ecx
	movslq	%ecx, %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.30.141(%rip), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	halide_string_to_string@PLT
	testq	%r13, %r13
	je	.LBB177_13
.LBB177_8:                              # %if.end.sink.split
	subq	%r13, %rax
	incq	%rax
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r13, %r14
.LBB177_14:                             # %if.end
	movq	%rbx, %rdi
	movq	%r13, %rsi
	callq	halide_error@PLT
	movq	%r14, %rdi
	callq	free@PLT
	movl	$-35, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB177_13:
	xorl	%r14d, %r14d
	leaq	.L.str.274(%rip), %r13
	jmp	.LBB177_14
.Lfunc_end177:
	.size	halide_error_bad_extern_fold, .Lfunc_end177-halide_error_bad_extern_fold
                                        # -- End function
	.section	.text.halide_error_fold_factor_too_small,"ax",@progbits
	.weak	halide_error_fold_factor_too_small # -- Begin function halide_error_fold_factor_too_small
	.p2align	4, 0x90
	.type	halide_error_fold_factor_too_small,@function
halide_error_fold_factor_too_small:     # @halide_error_fold_factor_too_small
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	movl	%r9d, -44(%rbp)                 # 4-byte Spill
	movq	%r8, -64(%rbp)                  # 8-byte Spill
	movl	%ecx, %r13d
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, -56(%rbp)                 # 8-byte Spill
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r12
	testq	%rax, %rax
	je	.LBB178_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%r12), %rbx
	movb	$0, 1023(%r12)
	leaq	.L.str.61.152(%rip), %rdx
	movq	%r12, %rdi
	movq	%rbx, %rsi
	jmp	.LBB178_3
.LBB178_1:                              # %entry.split
	leaq	.L.str.61.152(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB178_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movslq	%r13d, %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.62(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.51(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.63(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	-64(%rbp), %rdx                 # 8-byte Reload
	callq	halide_string_to_string@PLT
	leaq	.L.str.32.143(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movslq	-44(%rbp), %rdx                 # 4-byte Folded Reload
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.64.153(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	testq	%r12, %r12
	je	.LBB178_4
# %bb.5:                                # %if.else.i
	subq	%r12, %rax
	incq	%rax
	movq	-56(%rbp), %rbx                 # 8-byte Reload
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r12, %rsi
	jmp	.LBB178_6
.LBB178_4:
	leaq	.L.str.274(%rip), %rsi
	movq	-56(%rbp), %rbx                 # 8-byte Reload
.LBB178_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%rbx, %rdi
	callq	halide_error@PLT
	movq	%r12, %rdi
	callq	free@PLT
	movl	$-26, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end178:
	.size	halide_error_fold_factor_too_small, .Lfunc_end178-halide_error_fold_factor_too_small
                                        # -- End function
	.section	.text.halide_error_requirement_failed,"ax",@progbits
	.weak	halide_error_requirement_failed # -- Begin function halide_error_requirement_failed
	.p2align	4, 0x90
	.type	halide_error_requirement_failed,@function
halide_error_requirement_failed:        # @halide_error_requirement_failed
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rdx, %r15
	movq	%rsi, %r12
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB179_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%rbx), %r13
	movb	$0, 1023(%rbx)
	leaq	.L.str.65(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r13, %rsi
	jmp	.LBB179_3
.LBB179_1:                              # %entry.split
	leaq	.L.str.65(%rip), %rdx
	xorl	%r13d, %r13d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB179_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%r13, %rsi
	movq	%r12, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.66(%rip), %rdx
	movq	%rax, %rdi
	movq	%r13, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%r13, %rsi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB179_4
# %bb.5:                                # %if.else.i
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB179_6
.LBB179_4:
	leaq	.L.str.274(%rip), %rsi
.LBB179_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-27, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end179:
	.size	halide_error_requirement_failed, .Lfunc_end179-halide_error_requirement_failed
                                        # -- End function
	.section	.text.halide_error_specialize_fail,"ax",@progbits
	.weak	halide_error_specialize_fail    # -- Begin function halide_error_specialize_fail
	.p2align	4, 0x90
	.type	halide_error_specialize_fail,@function
halide_error_specialize_fail:           # @halide_error_specialize_fail
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	movq	%rsi, %r15
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB180_1
# %bb.2:                                # %if.else.i
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.67(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB180_3
.LBB180_1:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.thread
	leaq	.L.str.67(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	xorl	%esi, %esi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB180_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-31, %eax
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end180:
	.size	halide_error_specialize_fail, .Lfunc_end180-halide_error_specialize_fail
                                        # -- End function
	.section	.text.halide_error_no_device_interface,"ax",@progbits
	.weak	halide_error_no_device_interface # -- Begin function halide_error_no_device_interface
	.p2align	4, 0x90
	.type	halide_error_no_device_interface,@function
halide_error_no_device_interface:       # @halide_error_no_device_interface
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB181_1
# %bb.2:                                # %if.else.i
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.68(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB181_3
.LBB181_1:                              # %if.then.i
	leaq	.L.str.68(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB181_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-19, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end181:
	.size	halide_error_no_device_interface, .Lfunc_end181-halide_error_no_device_interface
                                        # -- End function
	.section	.text.halide_error_device_interface_no_device,"ax",@progbits
	.weak	halide_error_device_interface_no_device # -- Begin function halide_error_device_interface_no_device
	.p2align	4, 0x90
	.type	halide_error_device_interface_no_device,@function
halide_error_device_interface_no_device: # @halide_error_device_interface_no_device
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB182_1
# %bb.2:                                # %if.else.i
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.69(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB182_3
.LBB182_1:                              # %if.then.i
	leaq	.L.str.69(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB182_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-36, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end182:
	.size	halide_error_device_interface_no_device, .Lfunc_end182-halide_error_device_interface_no_device
                                        # -- End function
	.section	.text.halide_error_host_and_device_dirty,"ax",@progbits
	.weak	halide_error_host_and_device_dirty # -- Begin function halide_error_host_and_device_dirty
	.p2align	4, 0x90
	.type	halide_error_host_and_device_dirty,@function
halide_error_host_and_device_dirty:     # @halide_error_host_and_device_dirty
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB183_1
# %bb.2:                                # %if.else.i
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.70(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB183_3
.LBB183_1:                              # %if.then.i
	leaq	.L.str.70(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB183_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-37, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end183:
	.size	halide_error_host_and_device_dirty, .Lfunc_end183-halide_error_host_and_device_dirty
                                        # -- End function
	.section	.text.halide_error_buffer_is_null,"ax",@progbits
	.weak	halide_error_buffer_is_null     # -- Begin function halide_error_buffer_is_null
	.p2align	4, 0x90
	.type	halide_error_buffer_is_null,@function
halide_error_buffer_is_null:            # @halide_error_buffer_is_null
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	movq	%rsi, %r15
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB184_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.71(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB184_3
.LBB184_1:                              # %entry.split
	leaq	.L.str.71(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB184_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.72(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB184_4
# %bb.5:                                # %if.else.i
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB184_6
.LBB184_4:
	leaq	.L.str.274(%rip), %rsi
.LBB184_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-38, %eax
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end184:
	.size	halide_error_buffer_is_null, .Lfunc_end184-halide_error_buffer_is_null
                                        # -- End function
	.section	.text.halide_error_storage_bound_too_small,"ax",@progbits
	.weak	halide_error_storage_bound_too_small # -- Begin function halide_error_storage_bound_too_small
	.p2align	4, 0x90
	.type	halide_error_storage_bound_too_small,@function
halide_error_storage_bound_too_small:   # @halide_error_storage_bound_too_small
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	movl	%r8d, -44(%rbp)                 # 4-byte Spill
	movl	%ecx, %r14d
	movq	%rdx, %r15
	movq	%rsi, %r13
	movq	%rdi, -56(%rbp)                 # 8-byte Spill
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r12
	testq	%rax, %rax
	je	.LBB185_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%r12), %rbx
	movb	$0, 1023(%r12)
	leaq	.L.str.73(%rip), %rdx
	movq	%r12, %rdi
	movq	%rbx, %rsi
	jmp	.LBB185_3
.LBB185_1:                              # %entry.split
	leaq	.L.str.73(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB185_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movslq	%r14d, %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.62(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.51(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r13, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.74(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movslq	-44(%rbp), %rdx                 # 4-byte Folded Reload
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.64.153(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	testq	%r12, %r12
	je	.LBB185_4
# %bb.5:                                # %if.else.i
	subq	%r12, %rax
	incq	%rax
	movq	-56(%rbp), %rbx                 # 8-byte Reload
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r12, %rsi
	jmp	.LBB185_6
.LBB185_4:
	leaq	.L.str.274(%rip), %rsi
	movq	-56(%rbp), %rbx                 # 8-byte Reload
.LBB185_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%rbx, %rdi
	callq	halide_error@PLT
	movq	%r12, %rdi
	callq	free@PLT
	movl	$-45, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end185:
	.size	halide_error_storage_bound_too_small, .Lfunc_end185-halide_error_storage_bound_too_small
                                        # -- End function
	.section	.text.halide_error_device_crop_failed,"ax",@progbits
	.weak	halide_error_device_crop_failed # -- Begin function halide_error_device_crop_failed
	.p2align	4, 0x90
	.type	halide_error_device_crop_failed,@function
halide_error_device_crop_failed:        # @halide_error_device_crop_failed
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB186_1
# %bb.2:                                # %if.else.i
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.75(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB186_3
.LBB186_1:                              # %if.then.i
	leaq	.L.str.75(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB186_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-41, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end186:
	.size	halide_error_device_crop_failed, .Lfunc_end186-halide_error_device_crop_failed
                                        # -- End function
	.section	.text.halide_profiler_shutdown,"ax",@progbits
	.weak	halide_profiler_shutdown        # -- Begin function halide_profiler_shutdown
	.p2align	4, 0x90
	.type	halide_profiler_shutdown,@function
halide_profiler_shutdown:               # @halide_profiler_shutdown
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%rax
	callq	halide_profiler_get_state@PLT
	movq	40(%rax), %rdi
	testq	%rdi, %rdi
	je	.LBB187_1
# %bb.2:                                # %if.end
	movq	%rax, %rbx
	movl	$-2, 16(%rax)
	callq	halide_join_thread@PLT
	movq	$0, 40(%rbx)
	movl	$-1, 16(%rbx)
	xorl	%edi, %edi
	movq	%rbx, %rsi
	callq	halide_profiler_report_unlocked@PLT
	movq	%rbx, %rdi
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	jmp	halide_profiler_reset_unlocked@PLT # TAILCALL
.LBB187_1:                              # %cleanup
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end187:
	.size	halide_profiler_shutdown, .Lfunc_end187-halide_profiler_shutdown
                                        # -- End function
	.section	.text.halide_profiler_get_state,"ax",@progbits
	.weak	halide_profiler_get_state       # -- Begin function halide_profiler_get_state
	.p2align	4, 0x90
	.type	halide_profiler_get_state,@function
halide_profiler_get_state:              # @halide_profiler_get_state
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	leaq	_ZZ25halide_profiler_get_stateE1s(%rip), %rax
	popq	%rbp
	retq
.Lfunc_end188:
	.size	halide_profiler_get_state, .Lfunc_end188-halide_profiler_get_state
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2                               # -- Begin function halide_profiler_report_unlocked
.LCPI189_0:
	.long	0x49742400                      # float 1.0E+6
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI189_1:
	.long	1127219200                      # 0x43300000
	.long	1160773632                      # 0x45300000
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI189_2:
	.quad	0x4330000000000000              # double 4503599627370496
	.quad	0x4530000000000000              # double 1.9342813113834067E+25
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI189_3:
	.quad	0x3ddb7cdfd9d7bdbb              # double 1.0E-10
	.section	.text.halide_profiler_report_unlocked,"ax",@progbits
	.weak	halide_profiler_report_unlocked
	.p2align	4, 0x90
	.type	halide_profiler_report_unlocked,@function
halide_profiler_report_unlocked:        # @halide_profiler_report_unlocked
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$72, %rsp
	movq	%rsi, %r15
	movq	%rdi, %rbx
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r12
	testq	%rax, %rax
	je	.LBB189_1
# %bb.2:                                # %if.then6.i
	leaq	1023(%r12), %r14
	movb	$0, 1023(%r12)
	jmp	.LBB189_3
.LBB189_1:
	xorl	%r14d, %r14d
.LBB189_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
	movl	$1, %eax
	subq	%r12, %rax
	movq	%rax, -104(%rbp)                # 8-byte Spill
	movq	24(%r15), %rsi
	movq	%r12, %r15
	testq	%rsi, %rsi
	je	.LBB189_7
# %bb.4:
	leaq	.L.str.72.209(%rip), %r13
	movq	%r12, %r15
	movq	%rbx, -80(%rbp)                 # 8-byte Spill
	jmp	.LBB189_5
	.p2align	4, 0x90
.LBB189_77:                             # %cleanup181
                                        #   in Loop: Header=BB189_5 Depth=1
	movq	64(%rsi), %rsi
	testq	%rsi, %rsi
	movq	-80(%rbp), %rbx                 # 8-byte Reload
	je	.LBB189_7
.LBB189_5:                              # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB189_25 Depth 2
                                        #     Child Loop BB189_28 Depth 2
                                        #       Child Loop BB189_35 Depth 3
                                        #       Child Loop BB189_43 Depth 3
                                        #       Child Loop BB189_50 Depth 3
                                        #       Child Loop BB189_56 Depth 3
                                        #       Child Loop BB189_61 Depth 3
                                        #       Child Loop BB189_63 Depth 3
	movq	(%rsi), %rax
	testq	%rax, %rax
	js	.LBB189_6
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB189_5 Depth=1
	vcvtsi2ss	%rax, %xmm4, %xmm0
	vdivss	.LCPI189_0(%rip), %xmm0, %xmm0
	cmpl	$0, 80(%rsi)
	jne	.LBB189_13
	jmp	.LBB189_77
	.p2align	4, 0x90
.LBB189_6:                              #   in Loop: Header=BB189_5 Depth=1
	movq	%rax, %rcx
	shrq	%rcx
	andl	$1, %eax
	orq	%rcx, %rax
	vcvtsi2ss	%rax, %xmm4, %xmm0
	vaddss	%xmm0, %xmm0, %xmm0
	vdivss	.LCPI189_0(%rip), %xmm0, %xmm0
	cmpl	$0, 80(%rsi)
	je	.LBB189_77
.LBB189_13:                             # %if.end
                                        #   in Loop: Header=BB189_5 Depth=1
	testq	%r12, %r12
	vmovss	%xmm0, -56(%rbp)                # 4-byte Spill
	je	.LBB189_14
# %bb.15:                               # %if.then.i278
                                        #   in Loop: Header=BB189_5 Depth=1
	movb	$0, (%r12)
	movq	32(%rsi), %rcx
	movq	40(%rsi), %rax
	movq	%rax, -64(%rbp)                 # 8-byte Spill
	movq	%rcx, -96(%rbp)                 # 8-byte Spill
	cmpq	%rax, %rcx
	sete	%r15b
	movq	48(%rsi), %rdx
	movq	%r12, %rdi
	jmp	.LBB189_16
	.p2align	4, 0x90
.LBB189_14:                             # %if.end.split
                                        #   in Loop: Header=BB189_5 Depth=1
	movq	32(%rsi), %rcx
	movq	40(%rsi), %rax
	movq	%rax, -64(%rbp)                 # 8-byte Spill
	movq	%rcx, -96(%rbp)                 # 8-byte Spill
	cmpq	%rax, %rcx
	sete	%r15b
	movq	48(%rsi), %rdx
	xorl	%edi, %edi
.LBB189_16:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
                                        #   in Loop: Header=BB189_5 Depth=1
	movq	%rsi, %rbx
	movq	%r14, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movb	%r15b, -41(%rbp)                # 1-byte Spill
	movq	%r14, %rsi
	leaq	.L.str.4.215(%rip), %rdx
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%r14, %rsi
	leaq	.L.str.8.165(%rip), %rdx
	callq	halide_string_to_string@PLT
	vmovss	-56(%rbp), %xmm0                # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	%rax, %rdi
	movq	%r14, %rsi
	xorl	%edx, %edx
	callq	halide_double_to_string@PLT
	movq	%rax, %rdi
	movq	%r14, %rsi
	leaq	.L.str.9.166(%rip), %rdx
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%r14, %rsi
	leaq	.L.str.10.167(%rip), %rdx
	callq	halide_string_to_string@PLT
	movslq	84(%rbx), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	movq	%rax, %rdi
	movq	%r14, %rsi
	leaq	.L.str.11.168(%rip), %rdx
	callq	halide_string_to_string@PLT
	movslq	80(%rbx), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	movq	%rax, %rdi
	movq	%r14, %rsi
	leaq	.L.str.12.169(%rip), %rdx
	callq	halide_string_to_string@PLT
	movq	%rbx, -72(%rbp)                 # 8-byte Spill
	vcvtsi2ssl	80(%rbx), %xmm4, %xmm0
	vmovss	-56(%rbp), %xmm1                # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	vdivss	%xmm0, %xmm1, %xmm0
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	%rax, %rdi
	movq	%r14, %rsi
	xorl	%edx, %edx
	callq	halide_double_to_string@PLT
	movq	%rax, %rdi
	movq	%r14, %rsi
	leaq	.L.str.13.170(%rip), %rdx
	callq	halide_string_to_string@PLT
	testb	%r15b, %r15b
	jne	.LBB189_18
# %bb.17:                               # %if.then24
                                        #   in Loop: Header=BB189_5 Depth=1
	vmovsd	-96(%rbp), %xmm0                # 8-byte Reload
                                        # xmm0 = mem[0],zero
	vmovapd	.LCPI189_1(%rip), %xmm2         # xmm2 = [1127219200,1160773632,0,0]
	vunpcklps	%xmm2, %xmm0, %xmm0     # xmm0 = xmm0[0],xmm2[0],xmm0[1],xmm2[1]
	vmovapd	.LCPI189_2(%rip), %xmm3         # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm0, %xmm0
	vpermilpd	$1, %xmm0, %xmm1        # xmm1 = xmm0[1,0]
	vaddsd	%xmm0, %xmm1, %xmm0
	vmovsd	-64(%rbp), %xmm1                # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vunpcklps	%xmm2, %xmm1, %xmm1     # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vsubpd	%xmm3, %xmm1, %xmm1
	vpermilpd	$1, %xmm1, %xmm2        # xmm2 = xmm1[1,0]
	vaddsd	%xmm1, %xmm2, %xmm1
	vaddsd	.LCPI189_3(%rip), %xmm1, %xmm1
	vdivsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -56(%rbp)                # 4-byte Spill
	movq	%rax, %rdi
	movq	%r14, %rsi
	leaq	.L.str.14.171(%rip), %rdx
	callq	halide_string_to_string@PLT
	vmovss	-56(%rbp), %xmm0                # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	%rax, %rdi
	movq	%r14, %rsi
	xorl	%edx, %edx
	callq	halide_double_to_string@PLT
	movq	%rax, %rdi
	movq	%r14, %rsi
	leaq	.L.str.4.215(%rip), %rdx
	callq	halide_string_to_string@PLT
.LBB189_18:                             # %if.end28
                                        #   in Loop: Header=BB189_5 Depth=1
	movq	-80(%rbp), %rbx                 # 8-byte Reload
	movq	%rax, %rdi
	movq	%r14, %rsi
	leaq	.L.str.15.172(%rip), %rdx
	callq	halide_string_to_string@PLT
	movq	-72(%rbp), %r15                 # 8-byte Reload
	movslq	88(%r15), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	movq	%rax, %rdi
	movq	%r14, %rsi
	leaq	.L.str.16.173(%rip), %rdx
	callq	halide_string_to_string@PLT
	movq	16(%r15), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movl	$1, %ecx
	callq	halide_uint64_to_string@PLT
	movq	%rax, %rdi
	movq	%r14, %rsi
	leaq	.L.str.17.174(%rip), %rdx
	callq	halide_string_to_string@PLT
	movq	%rax, %r15
	leaq	.L.str.274(%rip), %rsi
	testq	%r12, %r12
	je	.LBB189_20
# %bb.19:                               # %if.then.i352
                                        #   in Loop: Header=BB189_5 Depth=1
	movq	-104(%rbp), %rax                # 8-byte Reload
	leaq	(%rax,%r15), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r12, %rsi
.LBB189_20:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
                                        #   in Loop: Header=BB189_5 Depth=1
	movq	%rbx, %rdi
	callq	halide_print@PLT
	movq	-72(%rbp), %rsi                 # 8-byte Reload
	cmpq	$0, (%rsi)
	jne	.LBB189_26
# %bb.21:                               # %lor.end
                                        #   in Loop: Header=BB189_5 Depth=1
	cmpq	$0, 24(%rsi)
	je	.LBB189_22
.LBB189_26:                             # %for.cond53.preheader
                                        #   in Loop: Header=BB189_5 Depth=1
	cmpl	$0, 72(%rsi)
	jle	.LBB189_77
# %bb.27:                               # %for.body57.preheader
                                        #   in Loop: Header=BB189_5 Depth=1
	xorl	%ecx, %ecx
	jmp	.LBB189_28
	.p2align	4, 0x90
.LBB189_75:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit480
                                        #   in Loop: Header=BB189_28 Depth=2
	movq	%rbx, %rdi
	callq	halide_print@PLT
	movq	-72(%rbp), %rsi                 # 8-byte Reload
	movq	-96(%rbp), %rcx                 # 8-byte Reload
.LBB189_76:                             # %cleanup172
                                        #   in Loop: Header=BB189_28 Depth=2
	incq	%rcx
	movslq	72(%rsi), %rax
	cmpq	%rax, %rcx
	jge	.LBB189_77
.LBB189_28:                             # %for.body57
                                        #   Parent Loop BB189_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB189_35 Depth 3
                                        #       Child Loop BB189_43 Depth 3
                                        #       Child Loop BB189_50 Depth 3
                                        #       Child Loop BB189_56 Depth 3
                                        #       Child Loop BB189_61 Depth 3
                                        #       Child Loop BB189_63 Depth 3
	testq	%r12, %r12
	je	.LBB189_30
# %bb.29:                               # %if.then.i356
                                        #   in Loop: Header=BB189_28 Depth=2
	movb	$0, (%r12)
.LBB189_30:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
                                        #   in Loop: Header=BB189_28 Depth=2
	movq	56(%rsi), %rbx
	leaq	(%rcx,%rcx,8), %rax
	leaq	(%rbx,%rax,8), %rdx
	testq	%rcx, %rcx
	jne	.LBB189_32
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB189_28 Depth=2
	cmpq	$0, (%rdx)
	movq	%r12, %r15
	je	.LBB189_76
.LBB189_32:                             # %if.end66
                                        #   in Loop: Header=BB189_28 Depth=2
	movq	%rdx, -88(%rbp)                 # 8-byte Spill
	movq	%rcx, -96(%rbp)                 # 8-byte Spill
	movq	%r12, %rdi
	movq	%r14, %rsi
	leaq	.L.str.18.175(%rip), %rdx
	movq	%rax, %r15
	callq	halide_string_to_string@PLT
	movq	%rbx, -56(%rbp)                 # 8-byte Spill
	movq	%r15, -64(%rbp)                 # 8-byte Spill
	movq	56(%rbx,%r15,8), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%r14, %rsi
	leaq	.L.str.19.176(%rip), %rdx
	callq	halide_string_to_string@PLT
	movq	%rax, %rcx
	subq	%r12, %rcx
	cmpq	$24, %rcx
	ja	.LBB189_33
# %bb.34:                               # %while.body.preheader
                                        #   in Loop: Header=BB189_28 Depth=2
	movq	-88(%rbp), %rbx                 # 8-byte Reload
	.p2align	4, 0x90
.LBB189_35:                             # %while.body
                                        #   Parent Loop BB189_5 Depth=1
                                        #     Parent Loop BB189_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rax, %rdi
	movq	%r14, %rsi
	movq	%r13, %rdx
	callq	halide_string_to_string@PLT
	movq	%rax, %rcx
	subq	%r12, %rcx
	cmpq	$25, %rcx
	jb	.LBB189_35
# %bb.36:                               # %while.end
                                        #   in Loop: Header=BB189_28 Depth=2
	movq	(%rbx), %rcx
	testq	%rcx, %rcx
	js	.LBB189_37
.LBB189_38:                             # %while.end
                                        #   in Loop: Header=BB189_28 Depth=2
	vcvtsi2ss	%rcx, %xmm4, %xmm0
	jmp	.LBB189_39
	.p2align	4, 0x90
.LBB189_33:                             #   in Loop: Header=BB189_28 Depth=2
	movq	-88(%rbp), %rbx                 # 8-byte Reload
	movq	(%rbx), %rcx
	testq	%rcx, %rcx
	jns	.LBB189_38
.LBB189_37:                             #   in Loop: Header=BB189_28 Depth=2
	movq	%rcx, %rdx
	shrq	%rdx
	andl	$1, %ecx
	orq	%rdx, %rcx
	vcvtsi2ss	%rcx, %xmm4, %xmm0
	vaddss	%xmm0, %xmm0, %xmm0
.LBB189_39:                             # %while.end
                                        #   in Loop: Header=BB189_28 Depth=2
	movq	-72(%rbp), %rcx                 # 8-byte Reload
	vcvtsi2ssl	80(%rcx), %xmm4, %xmm1
	vmulss	.LCPI189_0(%rip), %xmm1, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	%rax, %rdi
	movq	%r14, %rsi
	xorl	%edx, %edx
	callq	halide_double_to_string@PLT
	testq	%rax, %rax
	je	.LBB189_40
# %bb.41:                               # %if.then.i379
                                        #   in Loop: Header=BB189_28 Depth=2
	addq	$-3, %rax
	cmpq	%r12, %rax
	cmovbq	%r12, %rax
	movb	$0, (%rax)
	jmp	.LBB189_42
	.p2align	4, 0x90
.LBB189_40:                             #   in Loop: Header=BB189_28 Depth=2
	xorl	%eax, %eax
.LBB189_42:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit
                                        #   in Loop: Header=BB189_28 Depth=2
	movq	%rax, %rdi
	movq	%r14, %rsi
	leaq	.L.str.21.178(%rip), %rdx
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	subq	%r12, %rax
	cmpq	$34, %rax
	ja	.LBB189_44
	.p2align	4, 0x90
.LBB189_43:                             # %while.body86
                                        #   Parent Loop BB189_5 Depth=1
                                        #     Parent Loop BB189_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%r14, %rsi
	movq	%r13, %rdx
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	subq	%r12, %rax
	cmpq	$35, %rax
	jb	.LBB189_43
.LBB189_44:                             # %while.end88
                                        #   in Loop: Header=BB189_28 Depth=2
	movq	-72(%rbp), %rax                 # 8-byte Reload
	movq	(%rax), %rcx
	testq	%rcx, %rcx
	je	.LBB189_45
# %bb.46:                               # %if.then91
                                        #   in Loop: Header=BB189_28 Depth=2
	imulq	$100, (%rbx), %rax
	movq	%rax, %rdx
	orq	%rcx, %rdx
	shrq	$32, %rdx
	je	.LBB189_47
# %bb.48:                               #   in Loop: Header=BB189_28 Depth=2
	xorl	%edx, %edx
	divq	%rcx
	movq	%rax, %r15
	jmp	.LBB189_49
	.p2align	4, 0x90
.LBB189_45:                             #   in Loop: Header=BB189_28 Depth=2
	xorl	%r15d, %r15d
	jmp	.LBB189_49
	.p2align	4, 0x90
.LBB189_47:                             #   in Loop: Header=BB189_28 Depth=2
                                        # kill: def $eax killed $eax killed $rax
	xorl	%edx, %edx
	divl	%ecx
	movl	%eax, %r15d
.LBB189_49:                             # %if.end97
                                        #   in Loop: Header=BB189_28 Depth=2
	movq	%r14, %rsi
	leaq	.L.str.22.179(%rip), %rdx
	callq	halide_string_to_string@PLT
	movslq	%r15d, %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	movq	%rax, %rdi
	movq	%r14, %rsi
	leaq	.L.str.23.180(%rip), %rdx
	callq	halide_string_to_string@PLT
	movq	%rax, %rcx
	subq	%r12, %rcx
	leaq	.L.str.4.215(%rip), %r15
	cmpq	$42, %rcx
	ja	.LBB189_51
	.p2align	4, 0x90
.LBB189_50:                             # %while.body105
                                        #   Parent Loop BB189_5 Depth=1
                                        #     Parent Loop BB189_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rax, %rdi
	movq	%r14, %rsi
	movq	%r13, %rdx
	callq	halide_string_to_string@PLT
	movq	%rax, %rcx
	subq	%r12, %rcx
	cmpq	$43, %rcx
	jb	.LBB189_50
.LBB189_51:                             # %while.end107
                                        #   in Loop: Header=BB189_28 Depth=2
	movl	$58, %ebx
	cmpb	$0, -41(%rbp)                   # 1-byte Folded Reload
	jne	.LBB189_57
# %bb.52:                               # %if.then109
                                        #   in Loop: Header=BB189_28 Depth=2
	movq	-56(%rbp), %rcx                 # 8-byte Reload
	movq	-64(%rbp), %rdx                 # 8-byte Reload
	vmovsd	40(%rcx,%rdx,8), %xmm0          # xmm0 = mem[0],zero
	vmovapd	.LCPI189_1(%rip), %xmm2         # xmm2 = [1127219200,1160773632,0,0]
	vunpcklps	%xmm2, %xmm0, %xmm0     # xmm0 = xmm0[0],xmm2[0],xmm0[1],xmm2[1]
	vmovapd	.LCPI189_2(%rip), %xmm3         # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm0, %xmm0
	vpermilpd	$1, %xmm0, %xmm1        # xmm1 = xmm0[1,0]
	vaddsd	%xmm0, %xmm1, %xmm0
	vmovsd	48(%rcx,%rdx,8), %xmm1          # xmm1 = mem[0],zero
	vunpcklps	%xmm2, %xmm1, %xmm1     # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vsubpd	%xmm3, %xmm1, %xmm1
	vpermilpd	$1, %xmm1, %xmm2        # xmm2 = xmm1[1,0]
	vaddsd	%xmm1, %xmm2, %xmm1
	vaddsd	.LCPI189_3(%rip), %xmm1, %xmm1
	vdivsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -88(%rbp)                # 4-byte Spill
	movq	%rax, %rdi
	movq	%r14, %rsi
	leaq	.L.str.24.181(%rip), %rdx
	callq	halide_string_to_string@PLT
	vmovss	-88(%rbp), %xmm0                # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	%rax, %rdi
	movq	%r14, %rsi
	xorl	%edx, %edx
	callq	halide_double_to_string@PLT
	testq	%rax, %rax
	je	.LBB189_53
# %bb.54:                               # %if.then.i418
                                        #   in Loop: Header=BB189_28 Depth=2
	addq	$-3, %rax
	cmpq	%r12, %rax
	cmovbq	%r12, %rax
	movb	$0, (%rax)
	jmp	.LBB189_55
.LBB189_53:                             #   in Loop: Header=BB189_28 Depth=2
	xorl	%eax, %eax
.LBB189_55:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit419
                                        #   in Loop: Header=BB189_28 Depth=2
	movq	-56(%rbp), %rdx                 # 8-byte Reload
	movq	-64(%rbp), %rsi                 # 8-byte Reload
	movq	%rax, %rcx
	subq	%r12, %rcx
	movl	$73, %ebx
	cmpq	$57, %rcx
	ja	.LBB189_58
	.p2align	4, 0x90
.LBB189_56:                             # %while.body124
                                        #   Parent Loop BB189_5 Depth=1
                                        #     Parent Loop BB189_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rax, %rdi
	movq	%r14, %rsi
	movq	%r13, %rdx
	callq	halide_string_to_string@PLT
	movq	%rax, %rcx
	subq	%r12, %rcx
	cmpq	$58, %rcx
	jb	.LBB189_56
.LBB189_57:                             #   in Loop: Header=BB189_28 Depth=2
	movq	-56(%rbp), %rdx                 # 8-byte Reload
	movq	-64(%rbp), %rsi                 # 8-byte Reload
.LBB189_58:                             # %if.end127
                                        #   in Loop: Header=BB189_28 Depth=2
	cmpq	$0, 16(%rdx,%rsi,8)
	je	.LBB189_71
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB189_28 Depth=2
	leaq	(%rdx,%rsi,8), %r15
	addq	$16, %r15
	movq	%rax, %rdi
	movq	%r14, %rsi
	leaq	.L.str.25.182(%rip), %rdx
	callq	halide_string_to_string@PLT
	movq	(%r15), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movl	$1, %ecx
	callq	halide_uint64_to_string@PLT
	.p2align	4, 0x90
.LBB189_61:                             # %while.body138
                                        #   Parent Loop BB189_5 Depth=1
                                        #     Parent Loop BB189_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%rax, %rcx
	subq	%r12, %rcx
	movq	%rax, %rdi
	movq	%r14, %rsi
	cmpq	%rbx, %rcx
	jae	.LBB189_62
# %bb.60:                               # %while.body138
                                        #   in Loop: Header=BB189_61 Depth=3
	movq	%r13, %rdx
	callq	halide_string_to_string@PLT
	jmp	.LBB189_61
	.p2align	4, 0x90
.LBB189_62:                             # %while.end140
                                        #   in Loop: Header=BB189_28 Depth=2
	leaq	.L.str.26.183(%rip), %rdx
	callq	halide_string_to_string@PLT
	movq	-56(%rbp), %rcx                 # 8-byte Reload
	movq	-64(%rbp), %rdx                 # 8-byte Reload
	movslq	64(%rcx,%rdx,8), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	movq	%rax, %rdi
	addq	$15, %rbx
	subq	%r12, %rax
	cmpq	%rbx, %rax
	jae	.LBB189_65
	.p2align	4, 0x90
.LBB189_63:                             # %while.body148
                                        #   Parent Loop BB189_5 Depth=1
                                        #     Parent Loop BB189_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	%r14, %rsi
	movq	%r13, %rdx
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	subq	%r12, %rax
	cmpq	%rbx, %rax
	jb	.LBB189_63
.LBB189_65:                             # %while.end150
                                        #   in Loop: Header=BB189_28 Depth=2
	movq	-56(%rbp), %rdx                 # 8-byte Reload
	movq	-64(%rbp), %rsi                 # 8-byte Reload
	leaq	(%rdx,%rsi,8), %rax
	addq	$64, %rax
	movslq	(%rax), %rcx
	testq	%rcx, %rcx
	je	.LBB189_66
# %bb.67:                               # %if.then153
                                        #   in Loop: Header=BB189_28 Depth=2
	movq	24(%rdx,%rsi,8), %rax
	movq	%rax, %rdx
	orq	%rcx, %rdx
	shrq	$32, %rdx
	je	.LBB189_68
# %bb.69:                               #   in Loop: Header=BB189_28 Depth=2
	xorl	%edx, %edx
	divq	%rcx
	movq	%rax, %r15
	jmp	.LBB189_70
	.p2align	4, 0x90
.LBB189_66:                             #   in Loop: Header=BB189_28 Depth=2
	xorl	%r15d, %r15d
	jmp	.LBB189_70
.LBB189_68:                             #   in Loop: Header=BB189_28 Depth=2
                                        # kill: def $eax killed $eax killed $rax
	xorl	%edx, %edx
	divl	%ecx
	movl	%eax, %r15d
.LBB189_70:                             # %if.end159
                                        #   in Loop: Header=BB189_28 Depth=2
	movq	%r14, %rsi
	leaq	.L.str.27.184(%rip), %rdx
	callq	halide_string_to_string@PLT
	movslq	%r15d, %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.4.215(%rip), %r15
	movq	-56(%rbp), %rdx                 # 8-byte Reload
	movq	-64(%rbp), %rsi                 # 8-byte Reload
.LBB189_71:                             # %if.end162
                                        #   in Loop: Header=BB189_28 Depth=2
	cmpq	$0, 32(%rdx,%rsi,8)
	je	.LBB189_73
# %bb.72:                               # %if.then165
                                        #   in Loop: Header=BB189_28 Depth=2
	leaq	(%rdx,%rsi,8), %rbx
	addq	$32, %rbx
	movq	%rax, %rdi
	movq	%r14, %rsi
	leaq	.L.str.28.185(%rip), %rdx
	callq	halide_string_to_string@PLT
	movq	(%rbx), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	movl	$1, %ecx
	callq	halide_uint64_to_string@PLT
.LBB189_73:                             # %if.end169
                                        #   in Loop: Header=BB189_28 Depth=2
	movq	-80(%rbp), %rbx                 # 8-byte Reload
	movq	%rax, %rdi
	movq	%r14, %rsi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	movq	%rax, %r15
	leaq	.L.str.274(%rip), %rsi
	testq	%r12, %r12
	je	.LBB189_75
# %bb.74:                               # %if.then.i478
                                        #   in Loop: Header=BB189_28 Depth=2
	movq	-104(%rbp), %rax                # 8-byte Reload
	leaq	(%rax,%r15), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r12, %rsi
	jmp	.LBB189_75
.LBB189_22:                             # %for.cond41.preheader
                                        #   in Loop: Header=BB189_5 Depth=1
	movl	72(%rsi), %ecx
	testl	%ecx, %ecx
	jle	.LBB189_77
# %bb.23:                               # %for.body44.lr.ph
                                        #   in Loop: Header=BB189_5 Depth=1
	movq	56(%rsi), %rax
	shlq	$3, %rcx
	leaq	(%rcx,%rcx,8), %rcx
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB189_25:                             # %for.body44
                                        #   Parent Loop BB189_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	$0, 32(%rax,%rdx)
	jne	.LBB189_26
# %bb.24:                               # %for.cond41
                                        #   in Loop: Header=BB189_25 Depth=2
	addq	$72, %rdx
	cmpq	%rdx, %rcx
	jne	.LBB189_25
	jmp	.LBB189_77
.LBB189_7:                              # %for.cond.cleanup
	testq	%r12, %r12
	je	.LBB189_8
# %bb.9:                                # %if.else.i
	movq	-104(%rbp), %rdx                # 8-byte Reload
	addq	%r15, %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	jmp	.LBB189_10
.LBB189_8:                              # %if.then.i
	leaq	.L.str.274(%rip), %rsi
	movq	%rbx, %rdi
	callq	halide_error@PLT
.LBB189_10:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit
	movq	%r12, %rdi
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	free@PLT                        # TAILCALL
.Lfunc_end189:
	.size	halide_profiler_report_unlocked, .Lfunc_end189-halide_profiler_report_unlocked
                                        # -- End function
	.section	.text.halide_profiler_reset_unlocked,"ax",@progbits
	.weak	halide_profiler_reset_unlocked  # -- Begin function halide_profiler_reset_unlocked
	.p2align	4, 0x90
	.type	halide_profiler_reset_unlocked,@function
halide_profiler_reset_unlocked:         # @halide_profiler_reset_unlocked
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	%rdi, %r14
	movq	24(%rdi), %rbx
	testq	%rbx, %rbx
	je	.LBB190_3
	.p2align	4, 0x90
.LBB190_1:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	64(%rbx), %rax
	movq	%rax, 24(%r14)
	movq	56(%rbx), %rdi
	callq	free@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movq	24(%r14), %rbx
	testq	%rbx, %rbx
	jne	.LBB190_1
.LBB190_3:                              # %while.end
	movl	$0, 12(%r14)
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end190:
	.size	halide_profiler_reset_unlocked, .Lfunc_end190-halide_profiler_reset_unlocked
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy # -- Begin function _ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy,@function
_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy: # @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rdx, %r12
	movl	%esi, %r14d
	movq	%rdi, %r13
	callq	halide_profiler_get_state@PLT
	movq	%rax, %r15
	movq	24(%rax), %rbx
	jmp	.LBB191_1
	.p2align	4, 0x90
.LBB191_4:                              # %for.inc
                                        #   in Loop: Header=BB191_1 Depth=1
	movq	64(%rbx), %rbx
.LBB191_1:                              # %entry
                                        # =>This Inner Loop Header: Depth=1
	testq	%rbx, %rbx
	je	.LBB191_5
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB191_1 Depth=1
	cmpq	%r13, 48(%rbx)
	jne	.LBB191_4
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB191_1 Depth=1
	cmpl	%r14d, 72(%rbx)
	jne	.LBB191_4
	jmp	.LBB191_17
.LBB191_5:                              # %for.end
	movl	$96, %edi
	callq	malloc@PLT
	testq	%rax, %rax
	je	.LBB191_16
# %bb.6:                                # %if.end7
	movq	%rax, %rbx
	movq	24(%r15), %rax
	movq	%rax, 64(%rbx)
	movq	%r13, 48(%rbx)
	movl	12(%r15), %eax
	movl	%eax, 76(%rbx)
	movl	%r14d, 72(%rbx)
	movl	$0, 80(%rbx)
	movq	$0, (%rbx)
	movq	$0, 84(%rbx)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, 8(%rbx)
	movq	$0, 24(%rbx)
	vmovups	%xmm0, 32(%rbx)
	movslq	%r14d, %rax
	shlq	$3, %rax
	leaq	(%rax,%rax,8), %rdi
	callq	malloc@PLT
	movq	%rax, 56(%rbx)
	testq	%rax, %rax
	je	.LBB191_15
# %bb.7:                                # %for.cond17.preheader
	testl	%r14d, %r14d
	jle	.LBB191_12
# %bb.8:                                # %for.body20.lr.ph
	movl	%r14d, %r8d
	cmpl	$1, %r14d
	jne	.LBB191_13
# %bb.9:
	xorl	%edx, %edx
	jmp	.LBB191_10
.LBB191_15:                             # %if.then15
	movq	%rbx, %rdi
	callq	free@PLT
.LBB191_16:                             # %cleanup62
	xorl	%ebx, %ebx
	jmp	.LBB191_17
.LBB191_13:                             # %for.body20.lr.ph.new
	movl	%r8d, %esi
	andl	$-2, %esi
	leaq	136(%rax), %rdi
	xorl	%edx, %edx
	vxorps	%xmm0, %xmm0, %xmm0
	.p2align	4, 0x90
.LBB191_14:                             # %for.body20
                                        # =>This Inner Loop Header: Depth=1
	movq	$0, -136(%rdi)
	movq	(%r12,%rdx,8), %rcx
	movq	%rcx, -80(%rdi)
	vmovups	%xmm0, -128(%rdi)
	movq	$0, -112(%rdi)
	movl	$0, -72(%rdi)
	vmovups	%xmm0, -104(%rdi)
	movq	$0, -88(%rdi)
	movq	$0, -64(%rdi)
	movq	8(%r12,%rdx,8), %rcx
	movq	%rcx, -8(%rdi)
	vmovups	%xmm0, -56(%rdi)
	movq	$0, -40(%rdi)
	movl	$0, (%rdi)
	vmovups	%xmm0, -32(%rdi)
	movq	$0, -16(%rdi)
	addq	$2, %rdx
	addq	$144, %rdi
	cmpq	%rdx, %rsi
	jne	.LBB191_14
.LBB191_10:                             # %for.cond.cleanup19.loopexit.unr-lcssa
	testb	$1, %r8b
	je	.LBB191_12
# %bb.11:                               # %for.body20.epil
	leaq	(%rdx,%rdx,8), %rcx
	movq	$0, (%rax,%rcx,8)
	movq	(%r12,%rdx,8), %rdx
	movq	%rdx, 56(%rax,%rcx,8)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, 8(%rax,%rcx,8)
	movq	$0, 24(%rax,%rcx,8)
	movl	$0, 64(%rax,%rcx,8)
	vmovups	%xmm0, 32(%rax,%rcx,8)
	movq	$0, 48(%rax,%rcx,8)
.LBB191_12:                             # %for.cond.cleanup19
	addl	%r14d, 12(%r15)
	movq	%rbx, 24(%r15)
.LBB191_17:                             # %cleanup62
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end191:
	.size	_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy, .Lfunc_end191-_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4                               # -- Begin function _ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi
.LCPI192_0:
	.zero	8
	.quad	1                               # 0x1
	.section	.text._ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi,@function
_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi: # @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	24(%rdi), %r8
	testq	%r8, %r8
	je	.LBB192_8
# %bb.1:                                # %for.body.preheader
	xorl	%r9d, %r9d
	movq	%r8, %rax
	jmp	.LBB192_3
	.p2align	4, 0x90
.LBB192_2:                              # %if.end23
                                        #   in Loop: Header=BB192_3 Depth=1
	movq	64(%r11), %rax
	movq	%r11, %r9
	testq	%rax, %rax
	je	.LBB192_8
.LBB192_3:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %r11
	movslq	76(%rax), %r10
	cmpl	%esi, %r10d
	jg	.LBB192_2
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB192_3 Depth=1
	movl	72(%r11), %eax
	addl	%r10d, %eax
	cmpl	%esi, %eax
	jle	.LBB192_2
# %bb.5:                                # %if.then
	testq	%r9, %r9
	je	.LBB192_7
# %bb.6:                                # %if.then4
	movq	64(%r11), %rax
	movq	%rax, 64(%r9)
	movq	%r8, 64(%r11)
	movq	%r11, 24(%rdi)
.LBB192_7:                              # %if.end
	movq	56(%r11), %rax
	movslq	%esi, %rsi
	subq	%r10, %rsi
	leaq	(%rsi,%rsi,8), %rsi
	addq	%rdx, (%rax,%rsi,8)
	movslq	%ecx, %rcx
	vmovdqa	.LCPI192_0(%rip), %xmm0         # xmm0 = <u,1>
	vpinsrq	$0, %rcx, %xmm0, %xmm0
	vpaddq	40(%rax,%rsi,8), %xmm0, %xmm1
	vmovdqu	%xmm1, 40(%rax,%rsi,8)
	addq	%rdx, (%r11)
	incl	84(%r11)
	vpaddq	32(%r11), %xmm0, %xmm0
	vmovdqu	%xmm0, 32(%r11)
.LBB192_8:                              # %cleanup25
	popq	%rbp
	retq
.Lfunc_end192:
	.size	_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi, .Lfunc_end192-_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi
                                        # -- End function
	.section	.text.halide_profiler_sample,"ax",@progbits
	.weak	halide_profiler_sample          # -- Begin function halide_profiler_sample
	.p2align	4, 0x90
	.type	halide_profiler_sample,@function
halide_profiler_sample:                 # @halide_profiler_sample
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	movq	%rsi, %r14
	movq	%rdi, %rbx
	movq	32(%rdi), %rax
	testq	%rax, %rax
	je	.LBB193_2
# %bb.1:                                # %if.then
	leaq	-32(%rbp), %rdi
	leaq	-28(%rbp), %rsi
	callq	*%rax
	jmp	.LBB193_3
.LBB193_2:                              # %if.else
	movl	16(%rbx), %eax
	movl	%eax, -32(%rbp)
	movl	20(%rbx), %eax
	movl	%eax, -28(%rbp)
.LBB193_3:                              # %if.end
	xorl	%edi, %edi
	callq	halide_current_time_ns@PLT
	movq	%rax, %r15
	movl	-32(%rbp), %esi
	movl	$-1, %eax
	cmpl	$-2, %esi
	je	.LBB193_7
# %bb.4:                                # %if.else4
	testl	%esi, %esi
	js	.LBB193_6
# %bb.5:                                # %if.then6
	movq	%r15, %rdx
	subq	(%r14), %rdx
	movl	-28(%rbp), %ecx
	movq	%rbx, %rdi
	callq	_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi@PLT
.LBB193_6:                              # %if.end8
	movq	%r15, (%r14)
	movl	8(%rbx), %eax
.LBB193_7:                              # %cleanup
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end193:
	.size	halide_profiler_sample, .Lfunc_end193-halide_profiler_sample
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv # -- Begin function _ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv,@function
_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv: # @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	callq	halide_profiler_get_state@PLT
	movq	%rax, %r15
	movq	%rax, %rdi
	callq	halide_mutex_lock@PLT
	cmpl	$-2, 16(%r15)
	jne	.LBB194_1
.LBB194_6:                              # %while.end8
	movq	%r15, %rdi
	callq	halide_mutex_unlock@PLT
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB194_1:                              # %while.body.preheader
	leaq	-32(%rbp), %r14
	jmp	.LBB194_2
	.p2align	4, 0x90
.LBB194_5:                              # %while.end
                                        #   in Loop: Header=BB194_2 Depth=1
	cmpl	$-2, 16(%r15)
	je	.LBB194_6
.LBB194_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB194_4 Depth 2
	xorl	%edi, %edi
	callq	halide_current_time_ns@PLT
	movq	%rax, -32(%rbp)
	movq	%r15, %rdi
	movq	%r14, %rsi
	callq	halide_profiler_sample@PLT
	testl	%eax, %eax
	js	.LBB194_5
# %bb.3:                                # %if.end.preheader
                                        #   in Loop: Header=BB194_2 Depth=1
	movl	%eax, %ebx
	.p2align	4, 0x90
.LBB194_4:                              # %if.end
                                        #   Parent Loop BB194_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%r15, %rdi
	callq	halide_mutex_unlock@PLT
	xorl	%edi, %edi
	movl	%ebx, %esi
	callq	halide_sleep_ms@PLT
	movq	%r15, %rdi
	callq	halide_mutex_lock@PLT
	movq	%r15, %rdi
	movq	%r14, %rsi
	callq	halide_profiler_sample@PLT
	movl	%eax, %ebx
	testl	%eax, %eax
	jns	.LBB194_4
	jmp	.LBB194_5
.Lfunc_end194:
	.size	_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv, .Lfunc_end194-_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv
                                        # -- End function
	.section	.text.halide_profiler_get_pipeline_state,"ax",@progbits
	.weak	halide_profiler_get_pipeline_state # -- Begin function halide_profiler_get_pipeline_state
	.p2align	4, 0x90
	.type	halide_profiler_get_pipeline_state,@function
halide_profiler_get_pipeline_state:     # @halide_profiler_get_pipeline_state
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	movq	%rdi, %r15
	callq	halide_profiler_get_state@PLT
	movq	%rax, %r14
	movq	%rax, %rdi
	callq	halide_mutex_lock@PLT
	movq	24(%r14), %rbx
	testq	%rbx, %rbx
	je	.LBB195_4
	.p2align	4, 0x90
.LBB195_2:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	cmpq	%r15, 48(%rbx)
	je	.LBB195_5
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB195_2 Depth=1
	movq	64(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.LBB195_2
.LBB195_4:
	xorl	%ebx, %ebx
.LBB195_5:                              # %cleanup
	movq	%r14, %rdi
	callq	halide_mutex_unlock@PLT
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end195:
	.size	halide_profiler_get_pipeline_state, .Lfunc_end195-halide_profiler_get_pipeline_state
                                        # -- End function
	.section	.text.halide_profiler_pipeline_start,"ax",@progbits
	.weak	halide_profiler_pipeline_start  # -- Begin function halide_profiler_pipeline_start
	.p2align	4, 0x90
	.type	halide_profiler_pipeline_start,@function
halide_profiler_pipeline_start:         # @halide_profiler_pipeline_start
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rcx, %r15
	movl	%edx, %r12d
	movq	%rsi, %r13
	movq	%rdi, %r14
	callq	halide_profiler_get_state@PLT
	movq	%rax, %rbx
	movq	%rax, %rdi
	callq	halide_mutex_lock@PLT
	cmpq	$0, 40(%rbx)
	jne	.LBB196_2
# %bb.1:                                # %if.then
	movq	%r14, %rdi
	callq	halide_start_clock@PLT
	movq	_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv@GOTPCREL(%rip), %rdi
	xorl	%esi, %esi
	callq	halide_spawn_thread@PLT
	movq	%rax, 40(%rbx)
.LBB196_2:                              # %if.end
	movq	%r13, %rdi
	movl	%r12d, %esi
	movq	%r15, %rdx
	callq	_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy@PLT
	testq	%rax, %rax
	je	.LBB196_3
# %bb.4:                                # %if.end8
	incl	80(%rax)
	movl	76(%rax), %r14d
	jmp	.LBB196_5
.LBB196_3:                              # %if.then6
	movq	%r14, %rdi
	callq	halide_error_out_of_memory@PLT
	movl	%eax, %r14d
.LBB196_5:                              # %cleanup
	movq	%rbx, %rdi
	callq	halide_mutex_unlock@PLT
	movl	%r14d, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end196:
	.size	halide_profiler_pipeline_start, .Lfunc_end196-halide_profiler_pipeline_start
                                        # -- End function
	.section	.text.halide_profiler_stack_peak_update,"ax",@progbits
	.weak	halide_profiler_stack_peak_update # -- Begin function halide_profiler_stack_peak_update
	.p2align	4, 0x90
	.type	halide_profiler_stack_peak_update,@function
halide_profiler_stack_peak_update:      # @halide_profiler_stack_peak_update
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	%rdx, %r14
	movq	%rsi, %rbx
	testq	%rsi, %rsi
	je	.LBB197_1
# %bb.2:                                # %do.end
	movl	72(%rbx), %eax
	testl	%eax, %eax
	jg	.LBB197_3
	jmp	.LBB197_10
.LBB197_1:                              # %if.then
	leaq	.L.str.186(%rip), %rsi
	callq	halide_print@PLT
	callq	abort@PLT
	movl	72(%rbx), %eax
	testl	%eax, %eax
	jle	.LBB197_10
.LBB197_3:                              # %for.body.preheader
	xorl	%edx, %edx
	jmp	.LBB197_4
	.p2align	4, 0x90
.LBB197_8:                              # %for.inc.loopexit
                                        #   in Loop: Header=BB197_4 Depth=1
	movl	72(%rbx), %eax
.LBB197_9:                              # %for.inc
                                        #   in Loop: Header=BB197_4 Depth=1
	incq	%rdx
	movslq	%eax, %rcx
	cmpq	%rcx, %rdx
	jge	.LBB197_10
.LBB197_4:                              # %for.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB197_6 Depth 2
	movq	(%r14,%rdx,8), %rsi
	testq	%rsi, %rsi
	je	.LBB197_9
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB197_4 Depth=1
	movq	56(%rbx), %rax
	leaq	(%rdx,%rdx,8), %rcx
	leaq	(%rax,%rcx,8), %rdi
	addq	$32, %rdi
	movq	32(%rax,%rcx,8), %rcx
	.p2align	4, 0x90
.LBB197_6:                              # %while.cond.i
                                        #   Parent Loop BB197_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpq	%rsi, %rcx
	jae	.LBB197_8
# %bb.7:                                # %while.body.i
                                        #   in Loop: Header=BB197_6 Depth=2
	movq	%rcx, %rax
	lock		cmpxchgq	%rsi, (%rdi)
	cmpq	%rax, %rcx
	movq	%rax, %rcx
	jne	.LBB197_6
	jmp	.LBB197_8
.LBB197_10:                             # %for.cond.cleanup
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end197:
	.size	halide_profiler_stack_peak_update, .Lfunc_end197-halide_profiler_stack_peak_update
                                        # -- End function
	.section	.text.halide_profiler_memory_allocate,"ax",@progbits
	.weak	halide_profiler_memory_allocate # -- Begin function halide_profiler_memory_allocate
	.p2align	4, 0x90
	.type	halide_profiler_memory_allocate,@function
halide_profiler_memory_allocate:        # @halide_profiler_memory_allocate
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	testq	%rcx, %rcx
	je	.LBB198_13
# %bb.1:                                # %if.end
	movq	%rcx, %r14
	movl	%edx, %r15d
	movq	%rsi, %rbx
	movq	%rdi, %r12
	testq	%rsi, %rsi
	je	.LBB198_2
# %bb.3:                                # %do.body4
	testl	%r15d, %r15d
	js	.LBB198_4
.LBB198_5:                              # %do.body10
	cmpl	%r15d, 72(%rbx)
	jg	.LBB198_7
.LBB198_6:                              # %if.then12
	leaq	.L.str.3.189(%rip), %rsi
	movq	%r12, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
.LBB198_7:                              # %do.end15
	movq	56(%rbx), %rdx
	lock		incl	88(%rbx)
	lock		addq	%r14, 24(%rbx)
	movq	%r14, %rsi
	lock		xaddq	%rsi, 8(%rbx)
	movslq	%r15d, %rdi
	addq	%r14, %rsi
	movq	16(%rbx), %rcx
	.p2align	4, 0x90
.LBB198_8:                              # %while.cond.i
                                        # =>This Inner Loop Header: Depth=1
	cmpq	%rsi, %rcx
	jae	.LBB198_10
# %bb.9:                                # %while.body.i
                                        #   in Loop: Header=BB198_8 Depth=1
	movq	%rcx, %rax
	lock		cmpxchgq	%rsi, 16(%rbx)
	cmpq	%rax, %rcx
	movq	%rax, %rcx
	jne	.LBB198_8
.LBB198_10:                             # %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit
	leaq	(%rdi,%rdi,8), %rax
	lock		incl	64(%rdx,%rax,8)
	lock		addq	%r14, 24(%rdx,%rax,8)
	movq	%r14, %rsi
	lock		xaddq	%rsi, 8(%rdx,%rax,8)
	addq	%r14, %rsi
	leaq	(%rdx,%rax,8), %rdi
	addq	$16, %rdi
	movq	16(%rdx,%rax,8), %rcx
	.p2align	4, 0x90
.LBB198_11:                             # %while.cond.i43
                                        # =>This Inner Loop Header: Depth=1
	cmpq	%rsi, %rcx
	jae	.LBB198_13
# %bb.12:                               # %while.body.i45
                                        #   in Loop: Header=BB198_11 Depth=1
	movq	%rcx, %rax
	lock		cmpxchgq	%rsi, (%rdi)
	cmpq	%rax, %rcx
	movq	%rax, %rcx
	jne	.LBB198_11
.LBB198_13:                             # %return
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB198_2:                              # %if.then2
	leaq	.L.str.1.187(%rip), %rsi
	movq	%r12, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
	testl	%r15d, %r15d
	jns	.LBB198_5
.LBB198_4:                              # %if.then6
	leaq	.L.str.2.188(%rip), %rsi
	movq	%r12, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
	cmpl	%r15d, 72(%rbx)
	jle	.LBB198_6
	jmp	.LBB198_7
.Lfunc_end198:
	.size	halide_profiler_memory_allocate, .Lfunc_end198-halide_profiler_memory_allocate
                                        # -- End function
	.section	.text.halide_profiler_memory_free,"ax",@progbits
	.weak	halide_profiler_memory_free     # -- Begin function halide_profiler_memory_free
	.p2align	4, 0x90
	.type	halide_profiler_memory_free,@function
halide_profiler_memory_free:            # @halide_profiler_memory_free
# %bb.0:                                # %entry
	testq	%rcx, %rcx
	je	.LBB199_8
# %bb.1:                                # %if.end
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	movq	%rcx, %r14
	movl	%edx, %r15d
	movq	%rsi, %rbx
	movq	%rdi, %r12
	testq	%rsi, %rsi
	je	.LBB199_2
# %bb.3:                                # %do.body4
	testl	%r15d, %r15d
	js	.LBB199_4
.LBB199_5:                              # %do.body10
	cmpl	%r15d, 72(%rbx)
	jg	.LBB199_7
.LBB199_6:                              # %if.then12
	leaq	.L.str.6.192(%rip), %rsi
	movq	%r12, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
.LBB199_7:                              # %do.end15
	movq	56(%rbx), %rax
	movslq	%r15d, %rcx
	lock		subq	%r14, 8(%rbx)
	leaq	(%rcx,%rcx,8), %rcx
	lock		subq	%r14, 8(%rax,%rcx,8)
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
.LBB199_8:                              # %return
	retq
.LBB199_2:                              # %if.then2
	leaq	.L.str.4.190(%rip), %rsi
	movq	%r12, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
	testl	%r15d, %r15d
	jns	.LBB199_5
.LBB199_4:                              # %if.then6
	leaq	.L.str.5.191(%rip), %rsi
	movq	%r12, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
	cmpl	%r15d, 72(%rbx)
	jle	.LBB199_6
	jmp	.LBB199_7
.Lfunc_end199:
	.size	halide_profiler_memory_free, .Lfunc_end199-halide_profiler_memory_free
                                        # -- End function
	.section	.text.halide_profiler_report,"ax",@progbits
	.weak	halide_profiler_report          # -- Begin function halide_profiler_report
	.p2align	4, 0x90
	.type	halide_profiler_report,@function
halide_profiler_report:                 # @halide_profiler_report
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	%rdi, %r14
	callq	halide_profiler_get_state@PLT
	movq	%rax, %rbx
	movq	%rax, %rdi
	callq	halide_mutex_lock@PLT
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	halide_profiler_report_unlocked@PLT
	movq	%rbx, %rdi
	popq	%rbx
	popq	%r14
	popq	%rbp
	jmp	halide_mutex_unlock@PLT         # TAILCALL
.Lfunc_end200:
	.size	halide_profiler_report, .Lfunc_end200-halide_profiler_report
                                        # -- End function
	.section	.text.halide_profiler_reset,"ax",@progbits
	.weak	halide_profiler_reset           # -- Begin function halide_profiler_reset
	.p2align	4, 0x90
	.type	halide_profiler_reset,@function
halide_profiler_reset:                  # @halide_profiler_reset
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%rax
	callq	halide_profiler_get_state@PLT
	movq	%rax, %rbx
	movq	%rax, %rdi
	callq	halide_mutex_lock@PLT
	movq	%rbx, %rdi
	callq	halide_profiler_reset_unlocked@PLT
	movq	%rbx, %rdi
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	jmp	halide_mutex_unlock@PLT         # TAILCALL
.Lfunc_end201:
	.size	halide_profiler_reset, .Lfunc_end201-halide_profiler_reset
                                        # -- End function
	.section	.text.halide_profiler_pipeline_end,"ax",@progbits
	.weak	halide_profiler_pipeline_end    # -- Begin function halide_profiler_pipeline_end
	.p2align	4, 0x90
	.type	halide_profiler_pipeline_end,@function
halide_profiler_pipeline_end:           # @halide_profiler_pipeline_end
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movl	$-1, 16(%rsi)
	popq	%rbp
	retq
.Lfunc_end202:
	.size	halide_profiler_pipeline_end, .Lfunc_end202-halide_profiler_pipeline_end
                                        # -- End function
	.section	.text.halide_msan_annotate_memory_is_initialized,"ax",@progbits
	.weak	halide_msan_annotate_memory_is_initialized # -- Begin function halide_msan_annotate_memory_is_initialized
	.p2align	4, 0x90
	.type	halide_msan_annotate_memory_is_initialized,@function
halide_msan_annotate_memory_is_initialized: # @halide_msan_annotate_memory_is_initialized
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	xorl	%eax, %eax
	popq	%rbp
	retq
.Lfunc_end203:
	.size	halide_msan_annotate_memory_is_initialized, .Lfunc_end203-halide_msan_annotate_memory_is_initialized
                                        # -- End function
	.section	.text.halide_msan_check_memory_is_initialized,"ax",@progbits
	.weak	halide_msan_check_memory_is_initialized # -- Begin function halide_msan_check_memory_is_initialized
	.p2align	4, 0x90
	.type	halide_msan_check_memory_is_initialized,@function
halide_msan_check_memory_is_initialized: # @halide_msan_check_memory_is_initialized
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	xorl	%eax, %eax
	popq	%rbp
	retq
.Lfunc_end204:
	.size	halide_msan_check_memory_is_initialized, .Lfunc_end204-halide_msan_check_memory_is_initialized
                                        # -- End function
	.section	.text.halide_msan_check_buffer_is_initialized,"ax",@progbits
	.weak	halide_msan_check_buffer_is_initialized # -- Begin function halide_msan_check_buffer_is_initialized
	.p2align	4, 0x90
	.type	halide_msan_check_buffer_is_initialized,@function
halide_msan_check_buffer_is_initialized: # @halide_msan_check_buffer_is_initialized
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	xorl	%eax, %eax
	popq	%rbp
	retq
.Lfunc_end205:
	.size	halide_msan_check_buffer_is_initialized, .Lfunc_end205-halide_msan_check_buffer_is_initialized
                                        # -- End function
	.section	.text.halide_msan_annotate_buffer_is_initialized,"ax",@progbits
	.weak	halide_msan_annotate_buffer_is_initialized # -- Begin function halide_msan_annotate_buffer_is_initialized
	.p2align	4, 0x90
	.type	halide_msan_annotate_buffer_is_initialized,@function
halide_msan_annotate_buffer_is_initialized: # @halide_msan_annotate_buffer_is_initialized
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	xorl	%eax, %eax
	popq	%rbp
	retq
.Lfunc_end206:
	.size	halide_msan_annotate_buffer_is_initialized, .Lfunc_end206-halide_msan_annotate_buffer_is_initialized
                                        # -- End function
	.section	.text.halide_msan_annotate_buffer_is_initialized_as_destructor,"ax",@progbits
	.weak	halide_msan_annotate_buffer_is_initialized_as_destructor # -- Begin function halide_msan_annotate_buffer_is_initialized_as_destructor
	.p2align	4, 0x90
	.type	halide_msan_annotate_buffer_is_initialized_as_destructor,@function
halide_msan_annotate_buffer_is_initialized_as_destructor: # @halide_msan_annotate_buffer_is_initialized_as_destructor
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	popq	%rbp
	retq
.Lfunc_end207:
	.size	halide_msan_annotate_buffer_is_initialized_as_destructor, .Lfunc_end207-halide_msan_annotate_buffer_is_initialized_as_destructor
                                        # -- End function
	.section	.text.halide_default_can_use_target_features,"ax",@progbits
	.weak	halide_default_can_use_target_features # -- Begin function halide_default_can_use_target_features
	.p2align	4, 0x90
	.type	halide_default_can_use_target_features,@function
halide_default_can_use_target_features: # @halide_default_can_use_target_features
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$32, %rsp
	movq	%rsi, %r14
	movl	%edi, %ebx
	movq	_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_lock@PLT
	movq	_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE@GOTPCREL(%rip), %r12
	cmpb	$0, (%r12)
	je	.LBB208_1
# %bb.2:                                # %if.end
	movq	_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_unlock@PLT
	cmpl	$2, %ebx
	jne	.LBB208_3
.LBB208_4:                              # %if.end2
	movq	_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rdx
	andq	(%r14), %rdx
	jne	.LBB208_5
	jmp	.LBB208_6
.LBB208_1:                              # %if.then
	leaq	-64(%rbp), %r15
	movq	%r15, %rdi
	callq	_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv@PLT
	movq	_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE@GOTPCREL(%rip), %rdi
	movl	$32, %edx
	movq	%r15, %rsi
	callq	memcpy@PLT
	movb	$1, (%r12)
	movq	_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_unlock@PLT
	cmpl	$2, %ebx
	je	.LBB208_4
.LBB208_3:                              # %if.then1
	leaq	.L.str.197(%rip), %rsi
	xorl	%edi, %edi
	callq	halide_error@PLT
	movq	_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rdx
	andq	(%r14), %rdx
	je	.LBB208_6
.LBB208_5:                              # %if.then7
	movq	16(%rcx), %rsi
	xorl	%eax, %eax
	andnq	%rdx, %rsi, %rdx
	jne	.LBB208_9
.LBB208_6:                              # %for.inc.critedge
	movq	8(%rcx), %rdx
	andq	8(%r14), %rdx
	je	.LBB208_8
# %bb.7:                                # %if.then7.1
	movq	24(%rcx), %rcx
	xorl	%eax, %eax
	andnq	%rdx, %rcx, %rcx
	jne	.LBB208_9
.LBB208_8:                              # %for.inc.critedge.1
	movl	$1, %eax
.LBB208_9:                              # %cleanup15
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end208:
	.size	halide_default_can_use_target_features, .Lfunc_end208-halide_default_can_use_target_features
                                        # -- End function
	.section	.text.halide_set_custom_can_use_target_features,"ax",@progbits
	.weak	halide_set_custom_can_use_target_features # -- Begin function halide_set_custom_can_use_target_features
	.p2align	4, 0x90
	.type	halide_set_custom_can_use_target_features,@function
halide_set_custom_can_use_target_features: # @halide_set_custom_can_use_target_features
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rax
	movq	%rdi, (%rcx)
	popq	%rbp
	retq
.Lfunc_end209:
	.size	halide_set_custom_can_use_target_features, .Lfunc_end209-halide_set_custom_can_use_target_features
                                        # -- End function
	.section	.text.halide_can_use_target_features,"ax",@progbits
	.weak	halide_can_use_target_features  # -- Begin function halide_can_use_target_features
	.p2align	4, 0x90
	.type	halide_can_use_target_features,@function
halide_can_use_target_features:         # @halide_can_use_target_features
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	popq	%rbp
	jmpq	*%rax                           # TAILCALL
.Lfunc_end210:
	.size	halide_can_use_target_features, .Lfunc_end210-halide_can_use_target_features
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4                               # -- Begin function _ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv
.LCPI211_0:
	.quad	34084860461808                  # 0x1f00000002f0
	.quad	0                               # 0x0
	.section	.text._ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv,@function
_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv: # @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	movq	%rdi, %r8
	vmovaps	.LCPI211_0(%rip), %xmm0         # xmm0 = [34084860461808,0]
	vmovups	%ymm0, (%rdi)
	movq	$1, -56(%rbp)
	#APP

	xchgq	%rsi, %rbx
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %ecx
	cpuid
	movl	%eax, -56(%rbp)
	movl	%ebx, -52(%rbp)
	movl	%ecx, -48(%rbp)
	movl	%edx, -44(%rbp)
	xchgq	%rsi, %rbx

	#NO_APP
	movl	-48(%rbp), %eax
	movq	%rax, %rcx
	shrq	$15, %rcx
	andl	$16, %ecx
	movq	%rax, %rdx
	shrq	$23, %rdx
	andl	$32, %edx
	orq	%rcx, %rdx
	movq	%rax, %rcx
	shrq	$20, %rcx
	andl	$512, %ecx                      # imm = 0x200
	orq	%rdx, %rcx
	movq	%rax, %rdi
	shrq	$5, %rdi
	andl	$128, %edi
	orq	%rcx, %rdi
	testl	$805834752, %eax                # imm = 0x30081000
	je	.LBB211_2
# %bb.1:
	movq	%rdi, 16(%r8)
.LBB211_2:
	notl	%eax
	testl	$1879048192, %eax               # imm = 0x70000000
	jne	.LBB211_10
# %bb.3:                                # %if.then30
	movq	$7, -24(%rbp)
	#APP

	xchgq	%rsi, %rbx
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %ecx
	cpuid
	movl	%eax, -24(%rbp)
	movl	%ebx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%edx, -12(%rbp)
	xchgq	%rsi, %rbx

	#NO_APP
	movl	-20(%rbp), %eax
	testb	$32, %al
	je	.LBB211_5
# %bb.4:                                # %if.then35
	orq	$64, %rdi
	movq	%rdi, 16(%r8)
.LBB211_5:                              # %if.end36
	notl	%eax
	testl	$268500992, %eax                # imm = 0x10010000
	jne	.LBB211_10
# %bb.6:                                # %if.then40
	xorl	%ecx, %ecx
	testl	$469827584, %eax                # imm = 0x1C010000
	sete	%cl
	shlq	$41, %rcx
	orq	%rdi, %rcx
	xorl	%edx, %edx
	testl	$-805109760, %eax               # imm = 0xD0030000
	sete	%dl
	shlq	$42, %rdx
	orq	%rcx, %rdx
	movabsq	$1099511627776, %rdi            # imm = 0x10000000000
	orq	%rdx, %rdi
	movq	%rdi, 16(%r8)
	testl	$-803012608, %eax               # imm = 0xD0230000
	jne	.LBB211_10
# %bb.7:                                # %if.then54
	movabsq	$8796093022208, %rax            # imm = 0x80000000000
	orq	%rdi, %rax
	movq	%rax, 16(%r8)
	movabsq	$4294967303, %rax               # imm = 0x100000007
	movq	%rax, -40(%rbp)
	#APP

	xchgq	%rsi, %rbx
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	cpuid
	movl	%eax, -40(%rbp)
	movl	%ebx, -36(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%edx, -28(%rbp)
	xchgq	%rsi, %rbx

	#NO_APP
	testb	$8, -15(%rbp)
	je	.LBB211_10
# %bb.8:                                # %land.lhs.true59
	testb	$32, -40(%rbp)
	je	.LBB211_10
# %bb.9:                                # %if.then63
	movabsq	$26388279066624, %rax           # imm = 0x180000000000
	orq	%rax, %rdi
	movq	%rdi, 16(%r8)
.LBB211_10:                             # %if.end67
	movq	%r8, %rax
	popq	%rbx
	popq	%rbp
	vzeroupper
	retq
.Lfunc_end211:
	.size	_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv, .Lfunc_end211-_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv
                                        # -- End function
	.section	.text.halide_use_jit_module,"ax",@progbits
	.weak	halide_use_jit_module           # -- Begin function halide_use_jit_module
	.p2align	4, 0x90
	.type	halide_use_jit_module,@function
halide_use_jit_module:                  # @halide_use_jit_module
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	popq	%rbp
	retq
.Lfunc_end212:
	.size	halide_use_jit_module, .Lfunc_end212-halide_use_jit_module
                                        # -- End function
	.section	.text.halide_release_jit_module,"ax",@progbits
	.weak	halide_release_jit_module       # -- Begin function halide_release_jit_module
	.p2align	4, 0x90
	.type	halide_release_jit_module,@function
halide_release_jit_module:              # @halide_release_jit_module
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	popq	%rbp
	retq
.Lfunc_end213:
	.size	halide_release_jit_module, .Lfunc_end213-halide_release_jit_module
                                        # -- End function
	.section	.text.halide_opencl_compute_capability,"ax",@progbits
	.weak	halide_opencl_compute_capability # -- Begin function halide_opencl_compute_capability
	.p2align	4, 0x90
	.type	halide_opencl_compute_capability,@function
halide_opencl_compute_capability:       # @halide_opencl_compute_capability
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	andq	$-32, %rsp
	subq	$352, %rsp                      # imm = 0x160
	movq	%rdx, %r15
	movq	%rsi, %r12
	movq	%rdi, %r14
	movq	_ZN6Halide7Runtime8Internal6OpenCL10lib_openclE@GOTPCREL(%rip), %rax
	cmpq	$0, (%rax)
	jne	.LBB214_2
# %bb.1:                                # %if.then
	leaq	.L.str.15.222(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	testq	%rax, %rax
	je	.LBB214_15
.LBB214_2:                              # %if.end3
	movq	%r14, 24(%rsp)
	leaq	32(%rsp), %r13
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, 32(%rsp)
	leaq	40(%rsp), %rbx
	movl	$0, 48(%rsp)
	movq	_ZN6Halide7Runtime8Internal6OpenCL15clCreateContextE@GOTPCREL(%rip), %rax
	cmpq	$0, (%rax)
	jne	.LBB214_4
# %bb.3:                                # %if.then.i
	movq	%r14, %rdi
	callq	_ZN6Halide7Runtime8Internal6OpenCL14load_libopenclEPv@PLT
.LBB214_4:                              # %if.end.i
	movq	%r14, %rdi
	movq	%r13, %rsi
	movq	%rbx, %rdx
	movl	$1, %ecx
	callq	halide_acquire_cl_context@PLT
	movl	%eax, 48(%rsp)
	movq	32(%rsp), %rdi
	testq	%rdi, %rdi
	je	.LBB214_10
# %bb.5:                                # %if.end.i
	cmpq	$0, 40(%rsp)
	je	.LBB214_10
# %bb.6:                                # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit
	movl	%eax, %r13d
	testl	%eax, %eax
	jne	.LBB214_28
# %bb.7:                                # %if.end6
	movq	_ZN6Halide7Runtime8Internal6OpenCL16clGetContextInfoE@GOTPCREL(%rip), %rax
	leaq	56(%rsp), %rcx
	movl	$8, %edx
	movl	$4225, %esi                     # imm = 0x1081
	xorl	%r8d, %r8d
	callq	*(%rax)
	testl	%eax, %eax
	je	.LBB214_16
# %bb.8:                                # %if.then9
	movl	%eax, %r13d
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	je	.LBB214_19
# %bb.9:                                # %if.then6.i
	leaq	1023(%r15), %r12
	movb	$0, 1023(%r15)
	leaq	.L.str.108(%rip), %rdx
	movq	%r15, %rdi
	movq	%r12, %rsi
	jmp	.LBB214_21
.LBB214_10:                             # %if.then9.i
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB214_12
# %bb.11:                               # %if.else.i.i
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.272(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB214_13
.LBB214_12:                             # %if.then.i.i
	leaq	.L.str.272(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB214_13:                             # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit.thread
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-1, 48(%rsp)
.LBB214_14:
	movl	$1, %ebx
	movl	$-1, %r13d
	jmp	.LBB214_29
.LBB214_15:                             # %if.then2
	movl	$0, (%r15)
	movl	$0, (%r12)
	xorl	%r13d, %r13d
	jmp	.LBB214_30
.LBB214_16:                             # %if.end13
	vxorps	%xmm0, %xmm0, %xmm0
	vmovaps	%ymm0, 288(%rsp)
	vmovaps	%ymm0, 256(%rsp)
	vmovaps	%ymm0, 224(%rsp)
	vmovaps	%ymm0, 192(%rsp)
	vmovaps	%ymm0, 160(%rsp)
	vmovaps	%ymm0, 128(%rsp)
	vmovaps	%ymm0, 96(%rsp)
	vmovaps	%ymm0, 64(%rsp)
	movq	_ZN6Halide7Runtime8Internal6OpenCL15clGetDeviceInfoE@GOTPCREL(%rip), %rax
	movq	56(%rsp), %rdi
	leaq	64(%rsp), %rcx
	movl	$256, %edx                      # imm = 0x100
	movl	$4143, %esi                     # imm = 0x102F
	xorl	%r8d, %r8d
	vzeroupper
	callq	*(%rax)
	testl	%eax, %eax
	je	.LBB214_23
# %bb.17:                               # %if.then17
	movl	%eax, %r13d
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	je	.LBB214_25
# %bb.18:                               # %if.then6.i79
	leaq	1023(%r15), %r12
	movb	$0, 1023(%r15)
	leaq	.L.str.109(%rip), %rdx
	movq	%r15, %rdi
	movq	%r12, %rsi
	jmp	.LBB214_21
.LBB214_19:                             # %if.then9.split
	leaq	.L.str.108(%rip), %rdx
	jmp	.LBB214_20
.LBB214_23:                             # %if.end22
	leaq	64(%rsp), %rdi
	callq	strlen@PLT
	cmpq	$10, %rax
	jb	.LBB214_14
# %bb.24:                               # %if.end27
	movsbl	71(%rsp), %eax
	addl	$-48, %eax
	movl	%eax, (%r12)
	movsbl	73(%rsp), %eax
	addl	$-48, %eax
	movl	%eax, (%r15)
	xorl	%r13d, %r13d
	xorl	%ebx, %ebx
	jmp	.LBB214_29
.LBB214_25:                             # %if.then17.split
	leaq	.L.str.109(%rip), %rdx
.LBB214_20:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB214_21:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rbx
	movl	%r13d, %edi
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	callq	halide_string_to_string@PLT
	testq	%r15, %r15
	je	.LBB214_22
# %bb.26:                               # %if.else.i
	subq	%r15, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r15, %rsi
	jmp	.LBB214_27
.LBB214_22:
	leaq	.L.str.274(%rip), %rsi
.LBB214_27:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%r15, %rdi
	callq	free@PLT
.LBB214_28:                             # %cleanup35
	movl	$1, %ebx
.LBB214_29:                             # %cleanup35
	movq	24(%rsp), %rdi
	callq	halide_release_cl_context@PLT
	testl	%ebx, %ebx
	cmovel	%ebx, %r13d
.LBB214_30:                             # %return
	movl	%r13d, %eax
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end214:
	.size	halide_opencl_compute_capability, .Lfunc_end214-halide_opencl_compute_capability
                                        # -- End function
	.section	.text.halide_opencl_device_malloc,"ax",@progbits
	.weak	halide_opencl_device_malloc     # -- Begin function halide_opencl_device_malloc
	.p2align	4, 0x90
	.type	halide_opencl_device_malloc,@function
halide_opencl_device_malloc:            # @halide_opencl_device_malloc
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	movq	%rsi, %r14
	movq	%rdi, %r15
	movq	%rdi, -80(%rbp)
	leaq	-72(%rbp), %r12
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, -72(%rbp)
	leaq	-64(%rbp), %rbx
	movl	$0, -56(%rbp)
	movq	_ZN6Halide7Runtime8Internal6OpenCL15clCreateContextE@GOTPCREL(%rip), %rax
	cmpq	$0, (%rax)
	jne	.LBB215_2
# %bb.1:                                # %if.then.i
	movq	%r15, %rdi
	callq	_ZN6Halide7Runtime8Internal6OpenCL14load_libopenclEPv@PLT
.LBB215_2:                              # %if.end.i
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movl	$1, %ecx
	callq	halide_acquire_cl_context@PLT
	movl	%eax, -56(%rbp)
	cmpq	$0, -72(%rbp)
	je	.LBB215_4
# %bb.3:                                # %if.end.i
	cmpq	$0, -64(%rbp)
	je	.LBB215_4
# %bb.8:                                # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB215_70
# %bb.9:                                # %if.end
	movl	36(%r14), %r10d
	testl	%r10d, %r10d
	jle	.LBB215_10
# %bb.11:                               # %for.body.preheader.i.i
	movq	40(%r14), %r8
	leaq	-1(%r10), %r9
	movl	%r10d, %r11d
	andl	$3, %r11d
	cmpq	$3, %r9
	jae	.LBB215_36
# %bb.12:
	xorl	%ebx, %ebx
	xorl	%eax, %eax
.LBB215_13:                             # %for.body.i12.i.preheader.unr-lcssa
	testq	%r11, %r11
	je	.LBB215_18
# %bb.14:                               # %for.body.i.i.epil.preheader
	shlq	$4, %rbx
	leaq	(%r8,%rbx), %rdx
	addq	$8, %rdx
	shlq	$4, %r11
	xorl	%esi, %esi
	jmp	.LBB215_15
	.p2align	4, 0x90
.LBB215_17:                             # %if.end.i.i.epil
                                        #   in Loop: Header=BB215_15 Depth=1
	addq	$16, %rsi
	cmpq	%rsi, %r11
	je	.LBB215_18
.LBB215_15:                             # %for.body.i.i.epil
                                        # =>This Inner Loop Header: Depth=1
	movl	(%rdx,%rsi), %ecx
	testl	%ecx, %ecx
	jle	.LBB215_17
# %bb.16:                               # %if.then.i.i118.epil
                                        #   in Loop: Header=BB215_15 Depth=1
	movslq	-4(%rdx,%rsi), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rax
	jmp	.LBB215_17
.LBB215_4:                              # %if.then9.i
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB215_5
# %bb.6:                                # %if.else.i.i
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.272(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	%r15, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB215_7
.LBB215_5:                              # %if.then.i.i
	leaq	.L.str.272(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB215_7:                              # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit.thread
	movq	%r15, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-1, -56(%rbp)
	movl	$-1, %ebx
.LBB215_70:                             # %cleanup72
	movq	-80(%rbp), %rdi
	callq	halide_release_cl_context@PLT
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB215_18:                             # %for.body.i12.i.preheader
	movl	%r10d, %r11d
	andl	$3, %r11d
	cmpq	$3, %r9
	jae	.LBB215_46
# %bb.19:
	xorl	%ebx, %ebx
	xorl	%esi, %esi
.LBB215_20:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa
	testq	%r11, %r11
	je	.LBB215_25
# %bb.21:                               # %for.body.i12.i.epil.preheader
	shlq	$4, %rbx
	leaq	(%r8,%rbx), %rcx
	addq	$8, %rcx
	shlq	$4, %r11
	xorl	%edx, %edx
	jmp	.LBB215_22
	.p2align	4, 0x90
.LBB215_24:                             # %if.end.i22.i.epil
                                        #   in Loop: Header=BB215_22 Depth=1
	addq	$16, %rdx
	cmpq	%rdx, %r11
	je	.LBB215_25
.LBB215_22:                             # %for.body.i12.i.epil
                                        # =>This Inner Loop Header: Depth=1
	movslq	(%rcx,%rdx), %rbx
	testq	%rbx, %rbx
	jns	.LBB215_24
# %bb.23:                               # %if.then.i18.i.epil
                                        #   in Loop: Header=BB215_22 Depth=1
	movslq	-4(%rcx,%rdx), %rdi
	decq	%rdi
	imulq	%rbx, %rdi
	addq	%rdi, %rsi
	jmp	.LBB215_24
.LBB215_25:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
	incq	%rax
	jmp	.LBB215_26
.LBB215_10:
	movl	$1, %eax
	xorl	%esi, %esi
.LBB215_26:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit
	subq	%rsi, %rax
	movzbl	33(%r14), %r13d
	addq	$7, %r13
	shrq	$3, %r13
	imulq	%rax, %r13
	testq	%r13, %r13
	je	.LBB215_27
# %bb.28:                               # %do.end
	cmpq	$0, (%r14)
	je	.LBB215_29
.LBB215_56:                             # %do.body10
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%r13, %rdx
	callq	_ZN6Halide7Runtime8Internal6OpenCL23validate_device_pointerEPvP15halide_buffer_tm@PLT
	xorl	%ebx, %ebx
	testb	%al, %al
	jne	.LBB215_70
# %bb.57:                               # %if.then12
	leaq	.L.str.127(%rip), %rsi
.LBB215_69:                             # %cleanup72
	movq	%r15, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
	jmp	.LBB215_70
.LBB215_27:                             # %if.then7
	leaq	.L.str.126(%rip), %rsi
	movq	%r15, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
	cmpq	$0, (%r14)
	jne	.LBB215_56
.LBB215_29:                             # %for.cond.preheader
	movl	36(%r14), %eax
	testl	%eax, %eax
	jle	.LBB215_34
# %bb.30:                               # %do.body18.preheader
	movl	$8, %ebx
	xorl	%r12d, %r12d
	jmp	.LBB215_31
	.p2align	4, 0x90
.LBB215_33:                             # %for.inc
                                        #   in Loop: Header=BB215_31 Depth=1
	incq	%r12
	movslq	%eax, %rcx
	addq	$16, %rbx
	cmpq	%rcx, %r12
	jge	.LBB215_34
.LBB215_31:                             # %do.body18
                                        # =>This Inner Loop Header: Depth=1
	movq	40(%r14), %rcx
	cmpl	$0, (%rcx,%rbx)
	jns	.LBB215_33
# %bb.32:                               # %if.then20
                                        #   in Loop: Header=BB215_31 Depth=1
	movq	%r15, %rdi
	leaq	.L.str.128(%rip), %rsi
	callq	halide_print@PLT
	callq	abort@PLT
	movl	36(%r14), %eax
	jmp	.LBB215_33
.LBB215_34:                             # %for.cond.cleanup
	movl	$16, %edi
	callq	malloc@PLT
	testq	%rax, %rax
	je	.LBB215_35
# %bb.58:                               # %if.end31
	movq	%rax, %r12
	movq	_ZN6Halide7Runtime8Internal6OpenCL14clCreateBufferE@GOTPCREL(%rip), %rax
	movq	-72(%rbp), %rdi
	leaq	-44(%rbp), %r8
	movl	$1, %esi
	movq	%r13, %rdx
	xorl	%ecx, %ecx
	callq	*(%rax)
	movl	-44(%rbp), %edi
	testl	%edi, %edi
	jne	.LBB215_60
# %bb.59:                               # %if.end31
	testq	%rax, %rax
	je	.LBB215_60
# %bb.67:                               # %if.else
	movq	%rax, 8(%r12)
	movq	$0, (%r12)
	movq	%r12, (%r14)
	movq	_ZN6Halide7Runtime8Internal6OpenCL23opencl_device_interfaceE@GOTPCREL(%rip), %rax
	movq	%rax, 8(%r14)
	movq	120(%rax), %rax
	callq	*(%rax)
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%r13, %rdx
	callq	_ZN6Halide7Runtime8Internal6OpenCL23validate_device_pointerEPvP15halide_buffer_tm@PLT
	xorl	%ebx, %ebx
	testb	%al, %al
	jne	.LBB215_70
# %bb.68:                               # %if.then65
	leaq	.L.str.135(%rip), %rsi
	jmp	.LBB215_69
.LBB215_36:                             # %for.body.preheader.i.i.new
	movl	%r10d, %edx
	andl	$-4, %edx
	leaq	56(%r8), %rsi
	xorl	%ebx, %ebx
	xorl	%eax, %eax
	jmp	.LBB215_37
	.p2align	4, 0x90
.LBB215_45:                             # %if.end.i.i.3
                                        #   in Loop: Header=BB215_37 Depth=1
	addq	$4, %rbx
	addq	$64, %rsi
	cmpq	%rbx, %rdx
	je	.LBB215_13
.LBB215_37:                             # %for.body.i.i
                                        # =>This Inner Loop Header: Depth=1
	movl	-48(%rsi), %ecx
	testl	%ecx, %ecx
	jle	.LBB215_39
# %bb.38:                               # %if.then.i.i118
                                        #   in Loop: Header=BB215_37 Depth=1
	movslq	-52(%rsi), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rax
.LBB215_39:                             # %if.end.i.i
                                        #   in Loop: Header=BB215_37 Depth=1
	movl	-32(%rsi), %ecx
	testl	%ecx, %ecx
	jle	.LBB215_41
# %bb.40:                               # %if.then.i.i118.1
                                        #   in Loop: Header=BB215_37 Depth=1
	movslq	-36(%rsi), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rax
.LBB215_41:                             # %if.end.i.i.1
                                        #   in Loop: Header=BB215_37 Depth=1
	movl	-16(%rsi), %ecx
	testl	%ecx, %ecx
	jle	.LBB215_43
# %bb.42:                               # %if.then.i.i118.2
                                        #   in Loop: Header=BB215_37 Depth=1
	movslq	-20(%rsi), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rax
.LBB215_43:                             # %if.end.i.i.2
                                        #   in Loop: Header=BB215_37 Depth=1
	movl	(%rsi), %ecx
	testl	%ecx, %ecx
	jle	.LBB215_45
# %bb.44:                               # %if.then.i.i118.3
                                        #   in Loop: Header=BB215_37 Depth=1
	movslq	-4(%rsi), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rax
	jmp	.LBB215_45
.LBB215_46:                             # %for.body.i12.i.preheader.new
	andl	$-4, %r10d
	leaq	56(%r8), %rdx
	xorl	%ebx, %ebx
	xorl	%esi, %esi
	jmp	.LBB215_47
	.p2align	4, 0x90
.LBB215_55:                             # %if.end.i22.i.3
                                        #   in Loop: Header=BB215_47 Depth=1
	addq	$4, %rbx
	addq	$64, %rdx
	cmpq	%rbx, %r10
	je	.LBB215_20
.LBB215_47:                             # %for.body.i12.i
                                        # =>This Inner Loop Header: Depth=1
	movslq	-48(%rdx), %rcx
	testq	%rcx, %rcx
	js	.LBB215_48
# %bb.49:                               # %if.end.i22.i
                                        #   in Loop: Header=BB215_47 Depth=1
	movslq	-32(%rdx), %rcx
	testq	%rcx, %rcx
	js	.LBB215_50
.LBB215_51:                             # %if.end.i22.i.1
                                        #   in Loop: Header=BB215_47 Depth=1
	movslq	-16(%rdx), %rcx
	testq	%rcx, %rcx
	js	.LBB215_52
.LBB215_53:                             # %if.end.i22.i.2
                                        #   in Loop: Header=BB215_47 Depth=1
	movslq	(%rdx), %rcx
	testq	%rcx, %rcx
	jns	.LBB215_55
	jmp	.LBB215_54
	.p2align	4, 0x90
.LBB215_48:                             # %if.then.i18.i
                                        #   in Loop: Header=BB215_47 Depth=1
	movslq	-52(%rdx), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rsi
	movslq	-32(%rdx), %rcx
	testq	%rcx, %rcx
	jns	.LBB215_51
.LBB215_50:                             # %if.then.i18.i.1
                                        #   in Loop: Header=BB215_47 Depth=1
	movslq	-36(%rdx), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rdx), %rcx
	testq	%rcx, %rcx
	jns	.LBB215_53
.LBB215_52:                             # %if.then.i18.i.2
                                        #   in Loop: Header=BB215_47 Depth=1
	movslq	-20(%rdx), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rsi
	movslq	(%rdx), %rcx
	testq	%rcx, %rcx
	jns	.LBB215_55
.LBB215_54:                             # %if.then.i18.i.3
                                        #   in Loop: Header=BB215_47 Depth=1
	movslq	-4(%rdx), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rsi
	jmp	.LBB215_55
.LBB215_35:
	movl	$-6, %ebx
	jmp	.LBB215_70
.LBB215_60:                             # %if.then39
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB215_61
# %bb.62:                               # %if.then6.i
	leaq	1023(%rbx), %r14
	movb	$0, 1023(%rbx)
	leaq	.L.str.131(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r14, %rsi
	jmp	.LBB215_63
.LBB215_61:                             # %if.then39.split
	leaq	.L.str.131(%rip), %rdx
	xorl	%r14d, %r14d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB215_63:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %r13
	movl	-44(%rbp), %edi
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	%r13, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB215_64
# %bb.65:                               # %if.else.i
	subq	%rbx, %rax
	incq	%rax
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB215_66
.LBB215_64:
	leaq	.L.str.274(%rip), %rsi
.LBB215_66:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r15, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movq	%r12, %rdi
	callq	free@PLT
	movl	-44(%rbp), %ebx
	jmp	.LBB215_70
.Lfunc_end215:
	.size	halide_opencl_device_malloc, .Lfunc_end215-halide_opencl_device_malloc
                                        # -- End function
	.section	.text.halide_opencl_device_free,"ax",@progbits
	.weak	halide_opencl_device_free       # -- Begin function halide_opencl_device_free
	.p2align	4, 0x90
	.type	halide_opencl_device_free,@function
halide_opencl_device_free:              # @halide_opencl_device_free
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	movq	(%rsi), %rax
	testq	%rax, %rax
	je	.LBB216_1
# %bb.2:                                # %if.end
	movq	%rsi, %r14
	movq	%rdi, %r12
	movq	8(%rax), %r15
	cmpq	$0, (%rax)
	je	.LBB216_4
# %bb.3:                                # %if.then4
	leaq	.L.str.102(%rip), %rsi
	movq	%r12, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
.LBB216_4:                              # %do.end
	movq	%r12, -72(%rbp)
	leaq	-64(%rbp), %r13
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, -64(%rbp)
	leaq	-56(%rbp), %rbx
	movl	$0, -48(%rbp)
	movq	_ZN6Halide7Runtime8Internal6OpenCL15clCreateContextE@GOTPCREL(%rip), %rax
	cmpq	$0, (%rax)
	jne	.LBB216_6
# %bb.5:                                # %if.then.i
	movq	%r12, %rdi
	callq	_ZN6Halide7Runtime8Internal6OpenCL14load_libopenclEPv@PLT
.LBB216_6:                              # %if.end.i
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	%rbx, %rdx
	movl	$1, %ecx
	callq	halide_acquire_cl_context@PLT
	movl	%eax, -48(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB216_8
# %bb.7:                                # %if.end.i
	cmpq	$0, -56(%rbp)
	je	.LBB216_8
# %bb.12:                               # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB216_16
# %bb.13:                               # %do.body16
	movq	%r12, %rdi
	movq	%r14, %rsi
	xorl	%edx, %edx
	callq	_ZN6Halide7Runtime8Internal6OpenCL23validate_device_pointerEPvP15halide_buffer_tm@PLT
	testb	%al, %al
	jne	.LBB216_15
# %bb.14:                               # %if.then17
	leaq	.L.str.106(%rip), %rsi
	movq	%r12, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
.LBB216_15:                             # %do.end20
	movq	_ZN6Halide7Runtime8Internal6OpenCL18clReleaseMemObjectE@GOTPCREL(%rip), %rax
	movq	%r15, %rdi
	callq	*(%rax)
	movl	%eax, %ebx
	movq	(%r14), %rdi
	callq	free@PLT
	movq	$0, (%r14)
	movq	8(%r14), %rax
	movq	120(%rax), %rax
	callq	*8(%rax)
	movq	$0, 8(%r14)
	jmp	.LBB216_16
.LBB216_1:
	xorl	%ebx, %ebx
	jmp	.LBB216_17
.LBB216_8:                              # %if.then9.i
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB216_9
# %bb.10:                               # %if.else.i.i
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.272(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	%r12, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB216_11
.LBB216_9:                              # %if.then.i.i
	leaq	.L.str.272(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB216_11:                             # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit.thread
	movq	%r12, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-1, -48(%rbp)
	movl	$-1, %ebx
.LBB216_16:                             # %cleanup32
	movq	-72(%rbp), %rdi
	callq	halide_release_cl_context@PLT
.LBB216_17:                             # %return
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end216:
	.size	halide_opencl_device_free, .Lfunc_end216-halide_opencl_device_free
                                        # -- End function
	.section	.text.halide_opencl_device_sync,"ax",@progbits
	.weak	halide_opencl_device_sync       # -- Begin function halide_opencl_device_sync
	.p2align	4, 0x90
	.type	halide_opencl_device_sync,@function
halide_opencl_device_sync:              # @halide_opencl_device_sync
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	movq	%rdi, %r14
	movq	%rdi, -72(%rbp)
	leaq	-64(%rbp), %r15
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, -64(%rbp)
	leaq	-56(%rbp), %rbx
	movl	$0, -48(%rbp)
	movq	_ZN6Halide7Runtime8Internal6OpenCL15clCreateContextE@GOTPCREL(%rip), %rax
	cmpq	$0, (%rax)
	jne	.LBB217_2
# %bb.1:                                # %if.then.i
	movq	%r14, %rdi
	callq	_ZN6Halide7Runtime8Internal6OpenCL14load_libopenclEPv@PLT
.LBB217_2:                              # %if.end.i
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	%rbx, %rdx
	movl	$1, %ecx
	callq	halide_acquire_cl_context@PLT
	movl	%eax, -48(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB217_4
# %bb.3:                                # %if.end.i
	movq	-56(%rbp), %rdi
	testq	%rdi, %rdi
	je	.LBB217_4
# %bb.8:                                # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB217_18
# %bb.9:                                # %if.end
	movq	_ZN6Halide7Runtime8Internal6OpenCL8clFinishE@GOTPCREL(%rip), %rax
	callq	*(%rax)
	testl	%eax, %eax
	je	.LBB217_10
# %bb.11:                               # %if.then5
	movl	%eax, %ebx
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	je	.LBB217_12
# %bb.13:                               # %if.then6.i
	leaq	1023(%r15), %r12
	movb	$0, 1023(%r15)
	leaq	.L.str.118(%rip), %rdx
	movq	%r15, %rdi
	movq	%r12, %rsi
	jmp	.LBB217_14
.LBB217_4:                              # %if.then9.i
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB217_5
# %bb.6:                                # %if.else.i.i
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.272(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB217_7
.LBB217_5:                              # %if.then.i.i
	leaq	.L.str.272(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB217_7:                              # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit.thread
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-1, -48(%rbp)
	movl	$-1, %ebx
.LBB217_18:                             # %cleanup11
	movq	-72(%rbp), %rdi
	callq	halide_release_cl_context@PLT
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB217_10:
	xorl	%ebx, %ebx
	jmp	.LBB217_18
.LBB217_12:                             # %if.then5.split
	leaq	.L.str.118(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB217_14:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %r13
	movl	%ebx, %edi
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	%r13, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	callq	halide_string_to_string@PLT
	testq	%r15, %r15
	je	.LBB217_15
# %bb.16:                               # %if.else.i
	subq	%r15, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r15, %rsi
	jmp	.LBB217_17
.LBB217_15:
	leaq	.L.str.274(%rip), %rsi
.LBB217_17:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%r15, %rdi
	callq	free@PLT
	jmp	.LBB217_18
.Lfunc_end217:
	.size	halide_opencl_device_sync, .Lfunc_end217-halide_opencl_device_sync
                                        # -- End function
	.section	.text.halide_opencl_device_release,"ax",@progbits
	.weak	halide_opencl_device_release    # -- Begin function halide_opencl_device_release
	.p2align	4, 0x90
	.type	halide_opencl_device_release,@function
halide_opencl_device_release:           # @halide_opencl_device_release
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	movq	%rdi, %r15
	leaq	-48(%rbp), %rsi
	leaq	-64(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	halide_acquire_cl_context@PLT
	testl	%eax, %eax
	jne	.LBB218_19
# %bb.1:                                # %if.end
	cmpq	$0, -48(%rbp)
	je	.LBB218_18
# %bb.2:                                # %if.then3
	movq	_ZN6Halide7Runtime8Internal6OpenCL8clFinishE@GOTPCREL(%rip), %rax
	movq	-64(%rbp), %rdi
	callq	*(%rax)
	testl	%eax, %eax
	je	.LBB218_4
# %bb.3:                                # %if.then6
	leaq	.L.str.120(%rip), %rsi
	movq	%r15, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
.LBB218_4:                              # %do.end
	movq	-48(%rbp), %r12
	movq	_ZN6Halide7Runtime8Internal6OpenCL17compilation_cacheE@GOTPCREL(%rip), %rbx
	movq	%rbx, %rdi
	callq	halide_mutex_lock@PLT
	cmpl	$0, 24(%rbx)
	je	.LBB218_12
# %bb.5:                                # %for.cond.preheader.i.i
	movq	%rbx, %rsi
	movl	8(%rbx), %ecx
	cmpl	$31, %ecx
	jne	.LBB218_6
.LBB218_12:                             # %_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE14delete_contextIPFiS5_EEEvPvS3_RT_.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL17compilation_cacheE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_unlock@PLT
	movq	-48(%rbp), %rax
	movq	_ZN6Halide7Runtime8Internal6OpenCL7contextE@GOTPCREL(%rip), %rbx
	cmpq	(%rbx), %rax
	jne	.LBB218_18
# %bb.13:                               # %if.then9
	movq	_ZN6Halide7Runtime8Internal6OpenCL21clReleaseCommandQueueE@GOTPCREL(%rip), %rax
	movq	_ZN6Halide7Runtime8Internal6OpenCL13command_queueE@GOTPCREL(%rip), %r14
	movq	(%r14), %rdi
	callq	*(%rax)
	testl	%eax, %eax
	je	.LBB218_15
# %bb.14:                               # %if.then17
	leaq	.L.str.122(%rip), %rsi
	movq	%r15, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
.LBB218_15:                             # %do.end20
	movq	$0, (%r14)
	movq	_ZN6Halide7Runtime8Internal6OpenCL16clReleaseContextE@GOTPCREL(%rip), %rax
	movq	(%rbx), %rdi
	callq	*(%rax)
	testl	%eax, %eax
	je	.LBB218_17
# %bb.16:                               # %if.then28
	leaq	.L.str.124(%rip), %rsi
	movq	%r15, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
.LBB218_17:                             # %do.end31
	movq	$0, (%rbx)
.LBB218_18:                             # %if.end33
	movq	%r15, %rdi
	callq	halide_release_cl_context@PLT
	xorl	%eax, %eax
.LBB218_19:                             # %cleanup
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB218_6:                              # %for.body.lr.ph.i.i
	movq	16(%rsi), %rax
	movl	$16, %ebx
	xorl	%r13d, %r13d
	movl	$1, %r14d
	movq	%r15, -56(%rbp)                 # 8-byte Spill
	jmp	.LBB218_7
	.p2align	4, 0x90
.LBB218_11:                             # %for.inc.i.i
                                        #   in Loop: Header=BB218_7 Depth=1
	incq	%r13
	shlxl	%ecx, %r14d, %edx
	movslq	%edx, %rdx
	addq	$24, %rbx
	cmpq	%rdx, %r13
	jge	.LBB218_12
.LBB218_7:                              # %for.body.i.i
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, (%rax,%rbx)
	je	.LBB218_11
# %bb.8:                                # %land.lhs.true.i.i
                                        #   in Loop: Header=BB218_7 Depth=1
	cmpq	%r12, -16(%rax,%rbx)
	jne	.LBB218_11
# %bb.9:                                # %land.lhs.true9.i.i
                                        #   in Loop: Header=BB218_7 Depth=1
	cmpl	$0, 4(%rax,%rbx)
	jne	.LBB218_11
# %bb.10:                               # %if.then14.i.i
                                        #   in Loop: Header=BB218_7 Depth=1
	movq	%rsi, %r15
	movq	-8(%rax,%rbx), %rdi
	movq	_ZN6Halide7Runtime8Internal6OpenCL16clReleaseProgramE@GOTPCREL(%rip), %rax
	callq	*(%rax)
	movq	%r15, %rsi
	movq	-56(%rbp), %r15                 # 8-byte Reload
	movq	16(%rsi), %rax
	movq	$0, -8(%rax,%rbx)
	movl	$1, (%rax,%rbx)
	decl	24(%rsi)
	movl	8(%rsi), %ecx
	jmp	.LBB218_11
.Lfunc_end218:
	.size	halide_opencl_device_release, .Lfunc_end218-halide_opencl_device_release
                                        # -- End function
	.section	.text.halide_opencl_copy_to_host,"ax",@progbits
	.weak	halide_opencl_copy_to_host      # -- Begin function halide_opencl_copy_to_host
	.p2align	4, 0x90
	.type	halide_opencl_copy_to_host,@function
halide_opencl_copy_to_host:             # @halide_opencl_copy_to_host
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	xorl	%edx, %edx
	movq	%rsi, %rcx
	popq	%rbp
	jmp	halide_opencl_buffer_copy@PLT   # TAILCALL
.Lfunc_end219:
	.size	halide_opencl_copy_to_host, .Lfunc_end219-halide_opencl_copy_to_host
                                        # -- End function
	.section	.text.halide_opencl_copy_to_device,"ax",@progbits
	.weak	halide_opencl_copy_to_device    # -- Begin function halide_opencl_copy_to_device
	.p2align	4, 0x90
	.type	halide_opencl_copy_to_device,@function
halide_opencl_copy_to_device:           # @halide_opencl_copy_to_device
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal6OpenCL23opencl_device_interfaceE@GOTPCREL(%rip), %rdx
	movq	%rsi, %rcx
	popq	%rbp
	jmp	halide_opencl_buffer_copy@PLT   # TAILCALL
.Lfunc_end220:
	.size	halide_opencl_copy_to_device, .Lfunc_end220-halide_opencl_copy_to_device
                                        # -- End function
	.section	.text.halide_opencl_device_and_host_malloc,"ax",@progbits
	.weak	halide_opencl_device_and_host_malloc # -- Begin function halide_opencl_device_and_host_malloc
	.p2align	4, 0x90
	.type	halide_opencl_device_and_host_malloc,@function
halide_opencl_device_and_host_malloc:   # @halide_opencl_device_and_host_malloc
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal6OpenCL23opencl_device_interfaceE@GOTPCREL(%rip), %rdx
	popq	%rbp
	jmp	halide_default_device_and_host_malloc@PLT # TAILCALL
.Lfunc_end221:
	.size	halide_opencl_device_and_host_malloc, .Lfunc_end221-halide_opencl_device_and_host_malloc
                                        # -- End function
	.section	.text.halide_opencl_device_and_host_free,"ax",@progbits
	.weak	halide_opencl_device_and_host_free # -- Begin function halide_opencl_device_and_host_free
	.p2align	4, 0x90
	.type	halide_opencl_device_and_host_free,@function
halide_opencl_device_and_host_free:     # @halide_opencl_device_and_host_free
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal6OpenCL23opencl_device_interfaceE@GOTPCREL(%rip), %rdx
	popq	%rbp
	jmp	halide_default_device_and_host_free@PLT # TAILCALL
.Lfunc_end222:
	.size	halide_opencl_device_and_host_free, .Lfunc_end222-halide_opencl_device_and_host_free
                                        # -- End function
	.section	.text.halide_opencl_buffer_copy,"ax",@progbits
	.weak	halide_opencl_buffer_copy       # -- Begin function halide_opencl_buffer_copy
	.p2align	4, 0x90
	.type	halide_opencl_buffer_copy,@function
halide_opencl_buffer_copy:              # @halide_opencl_buffer_copy
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$456, %rsp                      # imm = 0x1C8
	movq	%rcx, %r13
	movq	%rdx, %r12
	movq	%rsi, %rbx
	movq	%rdi, %r15
	testq	%rdx, %rdx
	je	.LBB223_3
# %bb.1:                                # %entry
	cmpq	_ZN6Halide7Runtime8Internal6OpenCL23opencl_device_interfaceE@GOTPCREL(%rip), %r12
	je	.LBB223_3
# %bb.2:                                # %if.then
	leaq	.L.str.146(%rip), %rsi
	movq	%r15, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
.LBB223_3:                              # %do.end
	movq	24(%rbx), %rax
	testb	$2, %al
	jne	.LBB223_5
# %bb.4:                                # %lor.lhs.false2
	cmpq	$0, 16(%rbx)
	je	.LBB223_5
# %bb.8:                                # %if.end11
	movq	8(%rbx), %rcx
	movb	$1, %r14b
	cmpq	_ZN6Halide7Runtime8Internal6OpenCL23opencl_device_interfaceE@GOTPCREL(%rip), %rcx
	jne	.LBB223_13
	jmp	.LBB223_9
.LBB223_5:                              # %land.lhs.true
	movq	8(%rbx), %rcx
	cmpq	_ZN6Halide7Runtime8Internal6OpenCL23opencl_device_interfaceE@GOTPCREL(%rip), %rcx
	je	.LBB223_9
# %bb.6:                                # %do.body6
	movl	$-42, %ebx
	cmpq	_ZN6Halide7Runtime8Internal6OpenCL23opencl_device_interfaceE@GOTPCREL(%rip), %r12
	je	.LBB223_27
# %bb.7:                                # %if.then8
	leaq	.L.str.147(%rip), %rsi
	movq	%r15, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
	jmp	.LBB223_27
.LBB223_9:                              # %lor.lhs.false14
	movb	$1, %r14b
	cmpq	$0, (%rbx)
	je	.LBB223_13
# %bb.10:                               # %lor.rhs
	testb	$1, %al
	je	.LBB223_12
# %bb.11:                               # %lor.end
	cmpq	$0, 16(%rbx)
	jne	.LBB223_13
.LBB223_12:                             # %lor.lhs.false22
	xorl	%r14d, %r14d
.LBB223_13:                             # %do.body28
	testq	%r12, %r12
	je	.LBB223_16
# %bb.14:                               # %lor.lhs.false30
	cmpq	$0, (%r13)
	jne	.LBB223_16
# %bb.15:                               # %if.then33
	leaq	.L.str.149(%rip), %rsi
	movq	%r15, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
.LBB223_16:                             # %do.end36
	xorl	%r8d, %r8d
	testq	%r12, %r12
	sete	%r8b
	movq	%r13, %rcx
	movzbl	%r14b, %r13d
	leaq	-496(%rbp), %rdi
	movq	%rbx, %rsi
	movl	%r13d, %edx
	movq	%rcx, -80(%rbp)                 # 8-byte Spill
	callq	_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b@PLT
	movq	%r15, -72(%rbp)
	leaq	-64(%rbp), %rbx
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, -64(%rbp)
	leaq	-56(%rbp), %r14
	movl	$0, -48(%rbp)
	movq	_ZN6Halide7Runtime8Internal6OpenCL15clCreateContextE@GOTPCREL(%rip), %rax
	cmpq	$0, (%rax)
	jne	.LBB223_18
# %bb.17:                               # %if.then.i
	movq	%r15, %rdi
	callq	_ZN6Halide7Runtime8Internal6OpenCL14load_libopenclEPv@PLT
.LBB223_18:                             # %if.end.i
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	movl	$1, %ecx
	callq	halide_acquire_cl_context@PLT
	movl	%eax, -48(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB223_20
# %bb.19:                               # %if.end.i
	cmpq	$0, -56(%rbp)
	je	.LBB223_20
# %bb.24:                               # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB223_26
# %bb.25:                               # %if.end42
	xorl	%eax, %eax
	testq	%r12, %r12
	sete	%al
	movq	-480(%rbp), %rcx
	movq	-80(%rbp), %rdx                 # 8-byte Reload
	movl	36(%rdx), %r9d
	leaq	-72(%rbp), %rsi
	leaq	-496(%rbp), %rdx
	movq	%r15, %rdi
	xorl	%r8d, %r8d
	pushq	%rax
	pushq	%r13
	callq	opencl_do_multidimensional_copy@PLT
	addq	$16, %rsp
	movl	%eax, %ebx
	movq	_ZN6Halide7Runtime8Internal6OpenCL8clFinishE@GOTPCREL(%rip), %rax
	movq	-56(%rbp), %rdi
	callq	*(%rax)
	jmp	.LBB223_26
.LBB223_20:                             # %if.then9.i
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB223_21
# %bb.22:                               # %if.else.i.i
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.272(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	%r15, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB223_23
.LBB223_21:                             # %if.then.i.i
	leaq	.L.str.272(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB223_23:                             # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit.thread
	movq	%r15, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-1, -48(%rbp)
	movl	$-1, %ebx
.LBB223_26:                             # %cleanup
	movq	-72(%rbp), %rdi
	callq	halide_release_cl_context@PLT
.LBB223_27:                             # %return
	movl	%ebx, %eax
	addq	$456, %rsp                      # imm = 0x1C8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end223:
	.size	halide_opencl_buffer_copy, .Lfunc_end223-halide_opencl_buffer_copy
                                        # -- End function
	.section	.text.halide_opencl_device_crop,"ax",@progbits
	.weak	halide_opencl_device_crop       # -- Begin function halide_opencl_device_crop
	.p2align	4, 0x90
	.type	halide_opencl_device_crop,@function
halide_opencl_device_crop:              # @halide_opencl_device_crop
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	movq	%rdx, %rcx
	movl	36(%rsi), %r10d
	testl	%r10d, %r10d
	jle	.LBB224_1
# %bb.2:                                # %for.body.lr.ph.i
	movq	40(%rcx), %r9
	movq	40(%rsi), %r11
	leaq	-1(%r10), %rax
	movl	%r10d, %r8d
	andl	$3, %r8d
	cmpq	$3, %rax
	jae	.LBB224_4
# %bb.3:
	xorl	%r14d, %r14d
	xorl	%eax, %eax
	jmp	.LBB224_6
.LBB224_1:
	xorl	%eax, %eax
	jmp	.LBB224_9
.LBB224_4:                              # %for.body.lr.ph.i.new
	andl	$-4, %r10d
	movl	$48, %ebx
	xorl	%r14d, %r14d
	xorl	%eax, %eax
	.p2align	4, 0x90
.LBB224_5:                              # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movslq	-48(%r9,%rbx), %r15
	movslq	-48(%r11,%rbx), %rdx
	subq	%rdx, %r15
	movslq	-40(%r11,%rbx), %rdx
	imulq	%r15, %rdx
	addq	%rax, %rdx
	movslq	-32(%r9,%rbx), %r15
	movslq	-32(%r11,%rbx), %rax
	subq	%rax, %r15
	movslq	-24(%r11,%rbx), %rax
	imulq	%r15, %rax
	addq	%rdx, %rax
	movslq	-16(%r9,%rbx), %r15
	movslq	-16(%r11,%rbx), %rdx
	subq	%rdx, %r15
	movslq	-8(%r11,%rbx), %rdx
	imulq	%r15, %rdx
	addq	%rax, %rdx
	movslq	(%r9,%rbx), %r15
	movslq	(%r11,%rbx), %rax
	subq	%rax, %r15
	movslq	8(%r11,%rbx), %rax
	imulq	%r15, %rax
	addq	%rdx, %rax
	addq	$4, %r14
	addq	$64, %rbx
	cmpq	%r14, %r10
	jne	.LBB224_5
.LBB224_6:                              # %_ZN6Halide7Runtime8Internal28calc_device_crop_byte_offsetEPK15halide_buffer_tPS2_.exit.loopexit.unr-lcssa
	testq	%r8, %r8
	je	.LBB224_9
# %bb.7:                                # %for.body.i.epil.preheader
	shlq	$4, %r14
	leaq	(%r11,%r14), %r10
	addq	$8, %r10
	addq	%r14, %r9
	shlq	$4, %r8
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB224_8:                              # %for.body.i.epil
                                        # =>This Inner Loop Header: Depth=1
	movslq	(%r9,%rdx), %r11
	movslq	-8(%r10,%rdx), %rbx
	subq	%rbx, %r11
	movslq	(%r10,%rdx), %rbx
	imulq	%r11, %rbx
	addq	%rbx, %rax
	addq	$16, %rdx
	cmpq	%rdx, %r8
	jne	.LBB224_8
.LBB224_9:                              # %_ZN6Halide7Runtime8Internal28calc_device_crop_byte_offsetEPK15halide_buffer_tPS2_.exit
	movzbl	33(%rsi), %edx
	addq	$7, %rdx
	shrq	$3, %rdx
	imulq	%rax, %rdx
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	opencl_device_crop_from_offset@PLT # TAILCALL
.Lfunc_end224:
	.size	halide_opencl_device_crop, .Lfunc_end224-halide_opencl_device_crop
                                        # -- End function
	.section	.text.halide_opencl_device_slice,"ax",@progbits
	.weak	halide_opencl_device_slice      # -- Begin function halide_opencl_device_slice
	.p2align	4, 0x90
	.type	halide_opencl_device_slice,@function
halide_opencl_device_slice:             # @halide_opencl_device_slice
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	40(%rsi), %rax
	movslq	%edx, %rdx
	shlq	$4, %rdx
	movslq	(%rax,%rdx), %r9
	movslq	%ecx, %rcx
	subq	%r9, %rcx
	movslq	8(%rax,%rdx), %rax
	movzbl	33(%rsi), %edx
	addq	$7, %rdx
	shrq	$3, %rdx
	imulq	%rax, %rdx
	imulq	%rcx, %rdx
	movq	%r8, %rcx
	popq	%rbp
	jmp	opencl_device_crop_from_offset@PLT # TAILCALL
.Lfunc_end225:
	.size	halide_opencl_device_slice, .Lfunc_end225-halide_opencl_device_slice
                                        # -- End function
	.section	.text.halide_opencl_device_release_crop,"ax",@progbits
	.weak	halide_opencl_device_release_crop # -- Begin function halide_opencl_device_release_crop
	.p2align	4, 0x90
	.type	halide_opencl_device_release_crop,@function
halide_opencl_device_release_crop:      # @halide_opencl_device_release_crop
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	movq	%rsi, %r14
	movq	%rdi, %r12
	movq	(%rsi), %rax
	movq	8(%rax), %r15
	movq	%rdi, -72(%rbp)
	leaq	-64(%rbp), %r13
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, -64(%rbp)
	leaq	-56(%rbp), %rbx
	movl	$0, -48(%rbp)
	movq	_ZN6Halide7Runtime8Internal6OpenCL15clCreateContextE@GOTPCREL(%rip), %rax
	cmpq	$0, (%rax)
	jne	.LBB226_2
# %bb.1:                                # %if.then.i
	movq	%r12, %rdi
	callq	_ZN6Halide7Runtime8Internal6OpenCL14load_libopenclEPv@PLT
.LBB226_2:                              # %if.end.i
	movq	%r12, %rdi
	movq	%r13, %rsi
	movq	%rbx, %rdx
	movl	$1, %ecx
	callq	halide_acquire_cl_context@PLT
	movl	%eax, -48(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB226_4
# %bb.3:                                # %if.end.i
	cmpq	$0, -56(%rbp)
	je	.LBB226_4
# %bb.8:                                # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB226_12
# %bb.9:                                # %do.body
	movq	%r12, %rdi
	movq	%r14, %rsi
	xorl	%edx, %edx
	callq	_ZN6Halide7Runtime8Internal6OpenCL23validate_device_pointerEPvP15halide_buffer_tm@PLT
	testb	%al, %al
	jne	.LBB226_11
# %bb.10:                               # %if.then11
	leaq	.L.str.182(%rip), %rsi
	movq	%r12, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
.LBB226_11:                             # %do.end
	movq	_ZN6Halide7Runtime8Internal6OpenCL18clReleaseMemObjectE@GOTPCREL(%rip), %rax
	movq	%r15, %rdi
	callq	*(%rax)
	movl	%eax, %ebx
	movq	(%r14), %rdi
	callq	free@PLT
	jmp	.LBB226_12
.LBB226_4:                              # %if.then9.i
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB226_5
# %bb.6:                                # %if.else.i.i
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.272(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	%r12, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB226_7
.LBB226_5:                              # %if.then.i.i
	leaq	.L.str.272(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB226_7:                              # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit.thread
	movq	%r12, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-1, -48(%rbp)
	movl	$-1, %ebx
.LBB226_12:                             # %cleanup22
	movq	-72(%rbp), %rdi
	callq	halide_release_cl_context@PLT
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end226:
	.size	halide_opencl_device_release_crop, .Lfunc_end226-halide_opencl_device_release_crop
                                        # -- End function
	.section	.text.halide_opencl_wrap_cl_mem,"ax",@progbits
	.weak	halide_opencl_wrap_cl_mem       # -- Begin function halide_opencl_wrap_cl_mem
	.p2align	4, 0x90
	.type	halide_opencl_wrap_cl_mem,@function
halide_opencl_wrap_cl_mem:              # @halide_opencl_wrap_cl_mem
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	%rdx, %r14
	movq	%rsi, %rbx
	cmpq	$0, (%rsi)
	je	.LBB227_2
# %bb.1:                                # %do.end
	leaq	.L.str.176(%rip), %rsi
	callq	halide_print@PLT
	callq	abort@PLT
	movl	$-2, %eax
	cmpq	$0, (%rbx)
	je	.LBB227_2
# %bb.5:                                # %return
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.LBB227_2:                              # %if.end4
	movl	$16, %edi
	callq	malloc@PLT
	testq	%rax, %rax
	je	.LBB227_3
# %bb.4:                                # %if.end7
	movq	%r14, 8(%rax)
	movq	$0, (%rax)
	movq	%rax, (%rbx)
	movq	_ZN6Halide7Runtime8Internal6OpenCL23opencl_device_interfaceE@GOTPCREL(%rip), %rax
	movq	%rax, 8(%rbx)
	movq	120(%rax), %rax
	callq	*(%rax)
	xorl	%eax, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.LBB227_3:
	movl	$-11, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end227:
	.size	halide_opencl_wrap_cl_mem, .Lfunc_end227-halide_opencl_wrap_cl_mem
                                        # -- End function
	.section	.text.halide_opencl_detach_cl_mem,"ax",@progbits
	.weak	halide_opencl_detach_cl_mem     # -- Begin function halide_opencl_detach_cl_mem
	.p2align	4, 0x90
	.type	halide_opencl_detach_cl_mem,@function
halide_opencl_detach_cl_mem:            # @halide_opencl_detach_cl_mem
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%rax
	movq	%rdi, %rax
	movq	(%rsi), %rdi
	testq	%rdi, %rdi
	je	.LBB228_5
# %bb.1:                                # %do.body
	movq	%rsi, %rbx
	movq	8(%rsi), %rcx
	cmpq	_ZN6Halide7Runtime8Internal6OpenCL23opencl_device_interfaceE@GOTPCREL(%rip), %rcx
	je	.LBB228_4
# %bb.2:                                # %do.body
	cmpq	_ZN6Halide7Runtime8Internal6OpenCL29opencl_image_device_interfaceE@GOTPCREL(%rip), %rcx
	je	.LBB228_4
# %bb.3:                                # %if.then4
	leaq	.L.str.177(%rip), %rsi
	movq	%rax, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
	movq	(%rbx), %rdi
.LBB228_4:                              # %do.end
	callq	free@PLT
	movq	$0, (%rbx)
	movq	8(%rbx), %rax
	movq	120(%rax), %rax
	callq	*8(%rax)
	movq	$0, 8(%rbx)
.LBB228_5:                              # %return
	xorl	%eax, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end228:
	.size	halide_opencl_detach_cl_mem, .Lfunc_end228-halide_opencl_detach_cl_mem
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4                               # -- Begin function halide_opencl_image_device_malloc
.LCPI229_0:
	.quad	1                               # 0x1
	.quad	0                               # 0x0
	.section	.text.halide_opencl_image_device_malloc,"ax",@progbits
	.weak	halide_opencl_image_device_malloc
	.p2align	4, 0x90
	.type	halide_opencl_image_device_malloc,@function
halide_opencl_image_device_malloc:      # @halide_opencl_image_device_malloc
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$168, %rsp
	movq	%rsi, %r14
	movq	%rdi, %r13
	movq	%rdi, -88(%rbp)
	leaq	-80(%rbp), %r15
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, -80(%rbp)
	leaq	-72(%rbp), %rbx
	movl	$0, -64(%rbp)
	movq	_ZN6Halide7Runtime8Internal6OpenCL15clCreateContextE@GOTPCREL(%rip), %rax
	cmpq	$0, (%rax)
	jne	.LBB229_2
# %bb.1:                                # %if.then.i
	movq	%r13, %rdi
	callq	_ZN6Halide7Runtime8Internal6OpenCL14load_libopenclEPv@PLT
.LBB229_2:                              # %if.end.i
	movq	%r13, %rdi
	movq	%r15, %rsi
	movq	%rbx, %rdx
	movl	$1, %ecx
	callq	halide_acquire_cl_context@PLT
	movl	%eax, -64(%rbp)
	cmpq	$0, -80(%rbp)
	je	.LBB229_13
# %bb.3:                                # %if.end.i
	cmpq	$0, -72(%rbp)
	je	.LBB229_13
# %bb.4:                                # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB229_17
# %bb.5:                                # %if.end
	movl	36(%r14), %r10d
	testl	%r10d, %r10d
	jle	.LBB229_26
# %bb.6:                                # %for.body.preheader.i.i
	movq	40(%r14), %r8
	leaq	-1(%r10), %r9
	movl	%r10d, %r11d
	andl	$3, %r11d
	cmpq	$3, %r9
	jae	.LBB229_46
# %bb.7:
	xorl	%ebx, %ebx
	xorl	%eax, %eax
.LBB229_8:                              # %for.body.i12.i.preheader.unr-lcssa
	testq	%r11, %r11
	je	.LBB229_18
# %bb.9:                                # %for.body.i.i.epil.preheader
	shlq	$4, %rbx
	leaq	(%r8,%rbx), %rdx
	addq	$8, %rdx
	shlq	$4, %r11
	xorl	%esi, %esi
	jmp	.LBB229_11
	.p2align	4, 0x90
.LBB229_10:                             # %if.end.i.i.epil
                                        #   in Loop: Header=BB229_11 Depth=1
	addq	$16, %rsi
	cmpq	%rsi, %r11
	je	.LBB229_18
.LBB229_11:                             # %for.body.i.i.epil
                                        # =>This Inner Loop Header: Depth=1
	movl	(%rdx,%rsi), %ecx
	testl	%ecx, %ecx
	jle	.LBB229_10
# %bb.12:                               # %if.then.i.i332.epil
                                        #   in Loop: Header=BB229_11 Depth=1
	movslq	-4(%rdx,%rsi), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rax
	jmp	.LBB229_10
.LBB229_13:                             # %if.then9.i
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB229_15
# %bb.14:                               # %if.else.i.i
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.272(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	%r13, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB229_16
.LBB229_15:                             # %if.then.i.i
	leaq	.L.str.272(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB229_16:                             # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit.thread
	movq	%r13, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-1, -64(%rbp)
	movl	$-1, %ebx
.LBB229_17:                             # %cleanup262
	movq	-88(%rbp), %rdi
	callq	halide_release_cl_context@PLT
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB229_18:                             # %for.body.i12.i.preheader
	movl	%r10d, %r11d
	andl	$3, %r11d
	cmpq	$3, %r9
	jae	.LBB229_56
# %bb.19:
	xorl	%ebx, %ebx
	xorl	%esi, %esi
	jmp	.LBB229_20
.LBB229_26:
	movl	$1, %eax
	xorl	%esi, %esi
	jmp	.LBB229_27
.LBB229_46:                             # %for.body.preheader.i.i.new
	movl	%r10d, %edx
	andl	$-4, %edx
	leaq	56(%r8), %rsi
	xorl	%ebx, %ebx
	xorl	%eax, %eax
	jmp	.LBB229_48
	.p2align	4, 0x90
.LBB229_47:                             # %if.end.i.i.3
                                        #   in Loop: Header=BB229_48 Depth=1
	addq	$4, %rbx
	addq	$64, %rsi
	cmpq	%rbx, %rdx
	je	.LBB229_8
.LBB229_48:                             # %for.body.i.i
                                        # =>This Inner Loop Header: Depth=1
	movl	-48(%rsi), %ecx
	testl	%ecx, %ecx
	jle	.LBB229_50
# %bb.49:                               # %if.then.i.i332
                                        #   in Loop: Header=BB229_48 Depth=1
	movslq	-52(%rsi), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rax
.LBB229_50:                             # %if.end.i.i
                                        #   in Loop: Header=BB229_48 Depth=1
	movl	-32(%rsi), %ecx
	testl	%ecx, %ecx
	jle	.LBB229_52
# %bb.51:                               # %if.then.i.i332.1
                                        #   in Loop: Header=BB229_48 Depth=1
	movslq	-36(%rsi), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rax
.LBB229_52:                             # %if.end.i.i.1
                                        #   in Loop: Header=BB229_48 Depth=1
	movl	-16(%rsi), %ecx
	testl	%ecx, %ecx
	jle	.LBB229_54
# %bb.53:                               # %if.then.i.i332.2
                                        #   in Loop: Header=BB229_48 Depth=1
	movslq	-20(%rsi), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rax
.LBB229_54:                             # %if.end.i.i.2
                                        #   in Loop: Header=BB229_48 Depth=1
	movl	(%rsi), %ecx
	testl	%ecx, %ecx
	jle	.LBB229_47
# %bb.55:                               # %if.then.i.i332.3
                                        #   in Loop: Header=BB229_48 Depth=1
	movslq	-4(%rsi), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rax
	jmp	.LBB229_47
.LBB229_56:                             # %for.body.i12.i.preheader.new
	andl	$-4, %r10d
	leaq	56(%r8), %rdx
	xorl	%ebx, %ebx
	xorl	%esi, %esi
	jmp	.LBB229_58
	.p2align	4, 0x90
.LBB229_64:                             # %if.then.i18.i.2
                                        #   in Loop: Header=BB229_58 Depth=1
	movslq	-20(%rdx), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rsi
	movslq	(%rdx), %rcx
	testq	%rcx, %rcx
	js	.LBB229_65
.LBB229_57:                             # %if.end.i22.i.3
                                        #   in Loop: Header=BB229_58 Depth=1
	addq	$4, %rbx
	addq	$64, %rdx
	cmpq	%rbx, %r10
	je	.LBB229_20
.LBB229_58:                             # %for.body.i12.i
                                        # =>This Inner Loop Header: Depth=1
	movslq	-48(%rdx), %rcx
	testq	%rcx, %rcx
	js	.LBB229_62
# %bb.59:                               # %if.end.i22.i
                                        #   in Loop: Header=BB229_58 Depth=1
	movslq	-32(%rdx), %rcx
	testq	%rcx, %rcx
	js	.LBB229_63
.LBB229_60:                             # %if.end.i22.i.1
                                        #   in Loop: Header=BB229_58 Depth=1
	movslq	-16(%rdx), %rcx
	testq	%rcx, %rcx
	jns	.LBB229_61
	jmp	.LBB229_64
	.p2align	4, 0x90
.LBB229_62:                             # %if.then.i18.i
                                        #   in Loop: Header=BB229_58 Depth=1
	movslq	-52(%rdx), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rsi
	movslq	-32(%rdx), %rcx
	testq	%rcx, %rcx
	jns	.LBB229_60
.LBB229_63:                             # %if.then.i18.i.1
                                        #   in Loop: Header=BB229_58 Depth=1
	movslq	-36(%rdx), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rdx), %rcx
	testq	%rcx, %rcx
	js	.LBB229_64
.LBB229_61:                             # %if.end.i22.i.2
                                        #   in Loop: Header=BB229_58 Depth=1
	movslq	(%rdx), %rcx
	testq	%rcx, %rcx
	jns	.LBB229_57
.LBB229_65:                             # %if.then.i18.i.3
                                        #   in Loop: Header=BB229_58 Depth=1
	movslq	-4(%rdx), %rdi
	decq	%rdi
	imulq	%rcx, %rdi
	addq	%rdi, %rsi
	addq	$4, %rbx
	addq	$64, %rdx
	cmpq	%rbx, %r10
	jne	.LBB229_58
.LBB229_20:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa
	testq	%r11, %r11
	je	.LBB229_25
# %bb.21:                               # %for.body.i12.i.epil.preheader
	shlq	$4, %rbx
	leaq	(%r8,%rbx), %rcx
	addq	$8, %rcx
	shlq	$4, %r11
	xorl	%edx, %edx
	jmp	.LBB229_23
	.p2align	4, 0x90
.LBB229_22:                             # %if.end.i22.i.epil
                                        #   in Loop: Header=BB229_23 Depth=1
	addq	$16, %rdx
	cmpq	%rdx, %r11
	je	.LBB229_25
.LBB229_23:                             # %for.body.i12.i.epil
                                        # =>This Inner Loop Header: Depth=1
	movslq	(%rcx,%rdx), %rbx
	testq	%rbx, %rbx
	jns	.LBB229_22
# %bb.24:                               # %if.then.i18.i.epil
                                        #   in Loop: Header=BB229_23 Depth=1
	movslq	-4(%rcx,%rdx), %rdi
	decq	%rdi
	imulq	%rbx, %rdi
	addq	%rdi, %rsi
	jmp	.LBB229_22
.LBB229_25:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
	incq	%rax
.LBB229_27:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit
	subq	%rsi, %rax
	movzbl	33(%r14), %r15d
	addq	$7, %r15
	shrq	$3, %r15
	imulq	%rax, %r15
	testq	%r15, %r15
	je	.LBB229_32
# %bb.28:                               # %do.end
	cmpq	$0, (%r14)
	je	.LBB229_33
.LBB229_29:                             # %do.body10
	movq	%r13, %rdi
	movq	%r14, %rsi
	movq	%r15, %rdx
	callq	_ZN6Halide7Runtime8Internal6OpenCL23validate_device_pointerEPvP15halide_buffer_tm@PLT
	xorl	%ebx, %ebx
	testb	%al, %al
	jne	.LBB229_17
# %bb.30:                               # %if.then12
	leaq	.L.str.245(%rip), %rsi
.LBB229_31:                             # %cleanup262
	movq	%r13, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
	jmp	.LBB229_17
.LBB229_32:                             # %if.then7
	leaq	.L.str.244(%rip), %rsi
	movq	%r13, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
	cmpq	$0, (%r14)
	jne	.LBB229_29
.LBB229_33:                             # %for.cond.preheader
	movl	36(%r14), %eax
	testl	%eax, %eax
	jle	.LBB229_38
# %bb.34:                               # %do.body18.preheader
	movl	$8, %ebx
	xorl	%r12d, %r12d
	jmp	.LBB229_36
	.p2align	4, 0x90
.LBB229_35:                             # %for.inc
                                        #   in Loop: Header=BB229_36 Depth=1
	incq	%r12
	movslq	%eax, %rcx
	addq	$16, %rbx
	cmpq	%rcx, %r12
	jge	.LBB229_38
.LBB229_36:                             # %do.body18
                                        # =>This Inner Loop Header: Depth=1
	movq	40(%r14), %rcx
	cmpl	$0, (%rcx,%rbx)
	jns	.LBB229_35
# %bb.37:                               # %if.then20
                                        #   in Loop: Header=BB229_36 Depth=1
	movq	%r13, %rdi
	leaq	.L.str.246(%rip), %rsi
	callq	halide_print@PLT
	callq	abort@PLT
	movl	36(%r14), %eax
	jmp	.LBB229_35
.LBB229_38:                             # %for.cond.cleanup
	movl	$16, %edi
	callq	malloc@PLT
	testq	%rax, %rax
	je	.LBB229_66
# %bb.39:                               # %if.end31
	movq	%rax, %r12
	movl	32(%r14), %ecx
	movl	%ecx, -48(%rbp)
	movl	$65535, -52(%rbp)               # imm = 0xFFFF
	movl	%ecx, %eax
	shrl	$8, %eax
	cmpb	$2, %cl
	je	.LBB229_67
# %bb.40:                               # %if.end31
	cmpb	$1, %cl
	je	.LBB229_70
# %bb.41:                               # %if.end31
	testb	%cl, %cl
	jne	.LBB229_74
# %bb.42:                               # %if.then34
	cmpb	$8, %al
	je	.LBB229_78
# %bb.43:                               # %if.then34
	cmpb	$32, %al
	je	.LBB229_79
# %bb.44:                               # %if.then34
	cmpb	$16, %al
	jne	.LBB229_74
# %bb.45:                               # %if.then42
	movl	$4312, %eax                     # imm = 0x10D8
	jmp	.LBB229_82
.LBB229_66:
	movl	$-6, %ebx
	jmp	.LBB229_17
.LBB229_67:                             # %if.then82
	cmpb	$16, %al
	je	.LBB229_77
# %bb.68:                               # %if.then82
	cmpb	$32, %al
	jne	.LBB229_74
# %bb.69:                               # %if.then92
	movl	$4318, %eax                     # imm = 0x10DE
	jmp	.LBB229_82
.LBB229_70:                             # %if.then57
	cmpb	$8, %al
	je	.LBB229_80
# %bb.71:                               # %if.then57
	cmpb	$32, %al
	je	.LBB229_81
# %bb.72:                               # %if.then57
	cmpb	$16, %al
	jne	.LBB229_74
# %bb.73:                               # %if.then67
	movl	$4315, %eax                     # imm = 0x10DB
	jmp	.LBB229_82
.LBB229_74:                             # %if.then101
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB229_76
# %bb.75:                               # %if.else.i
	leaq	1023(%rbx), %r14
	movb	$0, 1023(%rbx)
	leaq	.L.str.247(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	halide_string_to_string@PLT
	leaq	-48(%rbp), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	halide_type_to_string@PLT
	jmp	.LBB229_92
.LBB229_76:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.thread
	leaq	.L.str.247(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	-48(%rbp), %rdx
	movq	%rax, %rdi
	xorl	%esi, %esi
	callq	halide_type_to_string@PLT
	jmp	.LBB229_94
.LBB229_77:
	movl	$4317, %eax                     # imm = 0x10DD
	jmp	.LBB229_82
.LBB229_78:
	movl	$4311, %eax                     # imm = 0x10D7
	jmp	.LBB229_82
.LBB229_79:                             # %if.then48
	movl	$4313, %eax                     # imm = 0x10D9
	jmp	.LBB229_82
.LBB229_80:
	movl	$4314, %eax                     # imm = 0x10DA
	jmp	.LBB229_82
.LBB229_81:                             # %if.then73
	movl	$4316, %eax                     # imm = 0x10DC
.LBB229_82:                             # %if.end105
	movl	%eax, -52(%rbp)
	movl	$4272, -56(%rbp)                # imm = 0x10B0
	movq	40(%r14), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB229_90
# %bb.83:                               # %lor.lhs.false
	movl	36(%r14), %ecx
	cmpl	$2, %ecx
	jl	.LBB229_87
# %bb.84:                               # %land.lhs.true
	movslq	24(%rax), %rdx
	cmpl	4(%rax), %edx
	jne	.LBB229_90
# %bb.85:                               # %lor.lhs.false126
	cmpl	$3, %ecx
	jl	.LBB229_101
# %bb.86:                               # %land.lhs.true129
	imull	20(%rax), %edx
	cmpl	%edx, 40(%rax)
	jne	.LBB229_90
.LBB229_87:                             # %if.end143
	cmpl	$3, %ecx
	je	.LBB229_96
# %bb.88:                               # %if.end143
	cmpl	$1, %ecx
	jne	.LBB229_99
# %bb.89:                               # %if.then146
	movl	$4340, -160(%rbp)               # imm = 0x10F4
	jmp	.LBB229_97
.LBB229_90:                             # %if.then140
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB229_93
# %bb.91:                               # %if.else.i378
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.249(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
.LBB229_92:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	%r13, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB229_95
.LBB229_93:                             # %if.then.i368
	leaq	.L.str.249(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
.LBB229_94:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	leaq	.L.str.274(%rip), %rsi
.LBB229_95:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r13, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-16, %ebx
	jmp	.LBB229_17
.LBB229_96:                             # %if.then155
	movl	$4338, -160(%rbp)               # imm = 0x10F2
.LBB229_97:                             # %if.end162
	movslq	4(%rax), %rdx
	movq	%rdx, -152(%rbp)
	movl	$1, %edx
	movl	$1, %esi
	cmpl	$2, %ecx
	jl	.LBB229_102
# %bb.98:                               # %cond.true
	movslq	20(%rax), %rdx
	movq	%rdx, %rsi
	jmp	.LBB229_102
.LBB229_99:                             # %if.else157
	movq	%r13, -136(%rbp)
	movb	$1, -128(%rbp)
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, -160(%rbp)
	testq	%rax, %rax
	je	.LBB229_110
# %bb.100:                              # %if.then6.i395
	movq	%rax, %rbx
	addq	$1023, %rbx                     # imm = 0x3FF
	movb	$0, 1023(%rax)
	leaq	.L.str.250(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	jmp	.LBB229_111
.LBB229_101:                            # %cond.true.thread
	movl	$4337, -160(%rbp)               # imm = 0x10F1
	movq	%rdx, -152(%rbp)
	movslq	20(%rax), %rdx
	movl	$1, %esi
.LBB229_102:                            # %cond.end180
	movq	%rdx, -144(%rbp)
	movq	%rsi, -136(%rbp)
	vmovaps	.LCPI229_0(%rip), %xmm0         # xmm0 = [1,0]
	vmovups	%xmm0, -128(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, -112(%rbp)
	movq	$0, -96(%rbp)
	movq	_ZN6Halide7Runtime8Internal6OpenCL13clCreateImageE@GOTPCREL(%rip), %rax
	movq	-80(%rbp), %rdi
	leaq	-56(%rbp), %rdx
	leaq	-160(%rbp), %rcx
	leaq	-44(%rbp), %r9
	movl	$1, %esi
	xorl	%r8d, %r8d
	callq	*(%rax)
	movl	-44(%rbp), %edi
	testl	%edi, %edi
	jne	.LBB229_106
# %bb.103:                              # %cond.end180
	testq	%rax, %rax
	je	.LBB229_106
# %bb.104:                              # %if.else233
	movq	%rax, 8(%r12)
	movq	$0, (%r12)
	movq	%r12, (%r14)
	movq	_ZN6Halide7Runtime8Internal6OpenCL29opencl_image_device_interfaceE@GOTPCREL(%rip), %rax
	movq	%rax, 8(%r14)
	movq	120(%rax), %rax
	callq	*(%rax)
	movq	%r13, %rdi
	movq	%r14, %rsi
	movq	%r15, %rdx
	callq	_ZN6Halide7Runtime8Internal6OpenCL23validate_device_pointerEPvP15halide_buffer_tm@PLT
	xorl	%ebx, %ebx
	testb	%al, %al
	jne	.LBB229_17
# %bb.105:                              # %if.then251
	leaq	.L.str.254(%rip), %rsi
	jmp	.LBB229_31
.LBB229_106:                            # %if.then224
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	%r13, -176(%rbp)
	movb	$1, -168(%rbp)
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, -200(%rbp)
	testq	%rax, %rax
	je	.LBB229_108
# %bb.107:                              # %if.then6.i410
	movq	%rax, %rbx
	addq	$1023, %rbx                     # imm = 0x3FF
	movb	$0, 1023(%rax)
	leaq	.L.str.253(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	jmp	.LBB229_109
.LBB229_108:                            # %if.then224.split
	leaq	.L.str.253(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB229_109:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit413
	callq	halide_string_to_string@PLT
	movq	%rax, %r14
	movq	%rbx, -184(%rbp)
	movl	-44(%rbp), %edi
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_string_to_string@PLT
	movq	%rax, -192(%rbp)
	leaq	-200(%rbp), %rdi
	callq	_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev
	movq	%r12, %rdi
	callq	free@PLT
	movl	-44(%rbp), %ebx
	jmp	.LBB229_17
.LBB229_110:                            # %if.else157.split
	leaq	.L.str.250(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB229_111:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit398
	callq	halide_string_to_string@PLT
	movq	%rbx, -144(%rbp)
	movq	%rax, -152(%rbp)
	leaq	-160(%rbp), %rdi
	callq	_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev
	movl	$-16, %ebx
	jmp	.LBB229_17
.Lfunc_end229:
	.size	halide_opencl_image_device_malloc, .Lfunc_end229-halide_opencl_image_device_malloc
                                        # -- End function
	.section	.text.halide_opencl_image_copy_to_host,"ax",@progbits
	.weak	halide_opencl_image_copy_to_host # -- Begin function halide_opencl_image_copy_to_host
	.p2align	4, 0x90
	.type	halide_opencl_image_copy_to_host,@function
halide_opencl_image_copy_to_host:       # @halide_opencl_image_copy_to_host
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	xorl	%edx, %edx
	movq	%rsi, %rcx
	popq	%rbp
	jmp	halide_opencl_image_buffer_copy@PLT # TAILCALL
.Lfunc_end230:
	.size	halide_opencl_image_copy_to_host, .Lfunc_end230-halide_opencl_image_copy_to_host
                                        # -- End function
	.section	.text.halide_opencl_image_copy_to_device,"ax",@progbits
	.weak	halide_opencl_image_copy_to_device # -- Begin function halide_opencl_image_copy_to_device
	.p2align	4, 0x90
	.type	halide_opencl_image_copy_to_device,@function
halide_opencl_image_copy_to_device:     # @halide_opencl_image_copy_to_device
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal6OpenCL29opencl_image_device_interfaceE@GOTPCREL(%rip), %rdx
	movq	%rsi, %rcx
	popq	%rbp
	jmp	halide_opencl_image_buffer_copy@PLT # TAILCALL
.Lfunc_end231:
	.size	halide_opencl_image_copy_to_device, .Lfunc_end231-halide_opencl_image_copy_to_device
                                        # -- End function
	.section	.text.halide_opencl_image_device_and_host_malloc,"ax",@progbits
	.weak	halide_opencl_image_device_and_host_malloc # -- Begin function halide_opencl_image_device_and_host_malloc
	.p2align	4, 0x90
	.type	halide_opencl_image_device_and_host_malloc,@function
halide_opencl_image_device_and_host_malloc: # @halide_opencl_image_device_and_host_malloc
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal6OpenCL29opencl_image_device_interfaceE@GOTPCREL(%rip), %rdx
	popq	%rbp
	jmp	halide_default_device_and_host_malloc@PLT # TAILCALL
.Lfunc_end232:
	.size	halide_opencl_image_device_and_host_malloc, .Lfunc_end232-halide_opencl_image_device_and_host_malloc
                                        # -- End function
	.section	.text.halide_opencl_image_device_and_host_free,"ax",@progbits
	.weak	halide_opencl_image_device_and_host_free # -- Begin function halide_opencl_image_device_and_host_free
	.p2align	4, 0x90
	.type	halide_opencl_image_device_and_host_free,@function
halide_opencl_image_device_and_host_free: # @halide_opencl_image_device_and_host_free
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal6OpenCL29opencl_image_device_interfaceE@GOTPCREL(%rip), %rdx
	popq	%rbp
	jmp	halide_default_device_and_host_free@PLT # TAILCALL
.Lfunc_end233:
	.size	halide_opencl_image_device_and_host_free, .Lfunc_end233-halide_opencl_image_device_and_host_free
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4                               # -- Begin function halide_opencl_image_buffer_copy
.LCPI234_0:
	.quad	1                               # 0x1
	.quad	1                               # 0x1
	.section	.text.halide_opencl_image_buffer_copy,"ax",@progbits
	.weak	halide_opencl_image_buffer_copy
	.p2align	4, 0x90
	.type	halide_opencl_image_buffer_copy,@function
halide_opencl_image_buffer_copy:        # @halide_opencl_image_buffer_copy
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$648, %rsp                      # imm = 0x288
	movq	%rcx, %r15
	movq	%rdx, %r12
	movq	%rsi, %r13
	movq	%rdi, %r14
	testq	%rdx, %rdx
	je	.LBB234_3
# %bb.1:                                # %entry
	cmpq	_ZN6Halide7Runtime8Internal6OpenCL29opencl_image_device_interfaceE@GOTPCREL(%rip), %r12
	je	.LBB234_3
# %bb.2:                                # %if.then
	leaq	.L.str.256(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
.LBB234_3:                              # %do.end
	movq	24(%r13), %rax
	testb	$2, %al
	jne	.LBB234_6
# %bb.4:                                # %lor.lhs.false8
	cmpq	$0, 16(%r13)
	je	.LBB234_6
# %bb.5:                                # %if.end17
	movq	8(%r13), %rcx
	movb	$1, %bl
	cmpq	_ZN6Halide7Runtime8Internal6OpenCL29opencl_image_device_interfaceE@GOTPCREL(%rip), %rcx
	jne	.LBB234_13
	jmp	.LBB234_9
.LBB234_6:                              # %land.lhs.true
	movq	8(%r13), %rcx
	cmpq	_ZN6Halide7Runtime8Internal6OpenCL29opencl_image_device_interfaceE@GOTPCREL(%rip), %rcx
	je	.LBB234_9
# %bb.7:                                # %do.body12
	movl	$-42, %ebx
	cmpq	_ZN6Halide7Runtime8Internal6OpenCL29opencl_image_device_interfaceE@GOTPCREL(%rip), %r12
	je	.LBB234_129
# %bb.8:                                # %if.then14
	leaq	.L.str.257(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
	jmp	.LBB234_129
.LBB234_9:                              # %lor.lhs.false20
	movb	$1, %bl
	cmpq	$0, (%r13)
	je	.LBB234_13
# %bb.10:                               # %lor.rhs
	testb	$1, %al
	je	.LBB234_12
# %bb.11:                               # %lor.end
	cmpq	$0, 16(%r13)
	jne	.LBB234_13
.LBB234_12:                             # %lor.lhs.false28
	xorl	%ebx, %ebx
.LBB234_13:                             # %do.body34
	testq	%r12, %r12
	je	.LBB234_16
# %bb.14:                               # %lor.lhs.false36
	cmpq	$0, (%r15)
	jne	.LBB234_16
# %bb.15:                               # %if.then39
	leaq	.L.str.259(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
.LBB234_16:                             # %do.end42
	xorl	%r8d, %r8d
	testq	%r12, %r12
	sete	%r8b
	movl	%ebx, -140(%rbp)                # 4-byte Spill
	movzbl	%bl, %edx
	leaq	-640(%rbp), %rdi
	movq	%r13, %rsi
	movq	%r15, -104(%rbp)                # 8-byte Spill
	movq	%r15, %rcx
	callq	_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b@PLT
	movq	%r14, -184(%rbp)
	leaq	-176(%rbp), %rbx
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, -176(%rbp)
	leaq	-168(%rbp), %r15
	movl	$0, -160(%rbp)
	movq	_ZN6Halide7Runtime8Internal6OpenCL15clCreateContextE@GOTPCREL(%rip), %rax
	cmpq	$0, (%rax)
	jne	.LBB234_18
# %bb.17:                               # %if.then.i
	movq	%r14, %rdi
	callq	_ZN6Halide7Runtime8Internal6OpenCL14load_libopenclEPv@PLT
.LBB234_18:                             # %if.end.i
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	movl	$1, %ecx
	callq	halide_acquire_cl_context@PLT
	movl	%eax, -160(%rbp)
	cmpq	$0, -176(%rbp)
	je	.LBB234_29
# %bb.19:                               # %if.end.i
	movl	%eax, %ebx
	movq	-168(%rbp), %rax
	testq	%rax, %rax
	je	.LBB234_29
# %bb.20:                               # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit
	testl	%ebx, %ebx
	jne	.LBB234_128
# %bb.21:                               # %if.end48
	movl	36(%r13), %r10d
	movq	40(%r13), %r11
	movl	$1, %r15d
	testl	%r10d, %r10d
	movq	%rax, -88(%rbp)                 # 8-byte Spill
	movq	%r10, -96(%rbp)                 # 8-byte Spill
	jle	.LBB234_41
# %bb.22:                               # %for.body.preheader.i.i
	leaq	-1(%r10), %r9
	movl	%r10d, %r8d
	andl	$3, %r8d
	cmpq	$3, %r9
	jae	.LBB234_68
# %bb.23:
	xorl	%ebx, %ebx
	xorl	%edx, %edx
.LBB234_24:                             # %for.body.i12.i.preheader.unr-lcssa
	testq	%r8, %r8
	movq	-96(%rbp), %r10                 # 8-byte Reload
	je	.LBB234_33
# %bb.25:                               # %for.body.i.i.epil.preheader
	shlq	$4, %rbx
	leaq	(%r11,%rbx), %rcx
	addq	$8, %rcx
	shlq	$4, %r8
	xorl	%esi, %esi
	jmp	.LBB234_27
	.p2align	4, 0x90
.LBB234_26:                             # %if.end.i.i.epil
                                        #   in Loop: Header=BB234_27 Depth=1
	addq	$16, %rsi
	cmpq	%rsi, %r8
	je	.LBB234_33
.LBB234_27:                             # %for.body.i.i.epil
                                        # =>This Inner Loop Header: Depth=1
	movl	(%rcx,%rsi), %ebx
	testl	%ebx, %ebx
	jle	.LBB234_26
# %bb.28:                               # %if.then.i.i331.epil
                                        #   in Loop: Header=BB234_27 Depth=1
	movslq	-4(%rcx,%rsi), %rax
	decq	%rax
	imulq	%rbx, %rax
	addq	%rax, %rdx
	jmp	.LBB234_26
.LBB234_29:                             # %if.then9.i
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB234_31
# %bb.30:                               # %if.else.i.i
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.272(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB234_32
.LBB234_31:                             # %if.then.i.i
	leaq	.L.str.272(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB234_32:                             # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit.thread
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-1, -160(%rbp)
	movl	$-1, %ebx
	jmp	.LBB234_128
.LBB234_33:                             # %for.body.i12.i.preheader
	movl	%r10d, %r8d
	andl	$3, %r8d
	cmpq	$3, %r9
	jae	.LBB234_78
# %bb.34:
	xorl	%ebx, %ebx
	xorl	%esi, %esi
	jmp	.LBB234_35
.LBB234_41:
	xorl	%esi, %esi
	movl	$1, %edx
	jmp	.LBB234_42
.LBB234_68:                             # %for.body.preheader.i.i.new
                                        # kill: def $r10d killed $r10d killed $r10 def $r10
	andl	$-4, %r10d
	leaq	56(%r11), %rcx
	xorl	%ebx, %ebx
	xorl	%edx, %edx
	jmp	.LBB234_70
	.p2align	4, 0x90
.LBB234_69:                             # %if.end.i.i.3
                                        #   in Loop: Header=BB234_70 Depth=1
	addq	$4, %rbx
	addq	$64, %rcx
	cmpq	%rbx, %r10
	je	.LBB234_24
.LBB234_70:                             # %for.body.i.i
                                        # =>This Inner Loop Header: Depth=1
	movl	-48(%rcx), %esi
	testl	%esi, %esi
	jle	.LBB234_72
# %bb.71:                               # %if.then.i.i331
                                        #   in Loop: Header=BB234_70 Depth=1
	movslq	-52(%rcx), %rax
	decq	%rax
	imulq	%rsi, %rax
	addq	%rax, %rdx
.LBB234_72:                             # %if.end.i.i
                                        #   in Loop: Header=BB234_70 Depth=1
	movl	-32(%rcx), %esi
	testl	%esi, %esi
	jle	.LBB234_74
# %bb.73:                               # %if.then.i.i331.1
                                        #   in Loop: Header=BB234_70 Depth=1
	movslq	-36(%rcx), %rax
	decq	%rax
	imulq	%rsi, %rax
	addq	%rax, %rdx
.LBB234_74:                             # %if.end.i.i.1
                                        #   in Loop: Header=BB234_70 Depth=1
	movl	-16(%rcx), %esi
	testl	%esi, %esi
	jle	.LBB234_76
# %bb.75:                               # %if.then.i.i331.2
                                        #   in Loop: Header=BB234_70 Depth=1
	movslq	-20(%rcx), %rax
	decq	%rax
	imulq	%rsi, %rax
	addq	%rax, %rdx
.LBB234_76:                             # %if.end.i.i.2
                                        #   in Loop: Header=BB234_70 Depth=1
	movl	(%rcx), %esi
	testl	%esi, %esi
	jle	.LBB234_69
# %bb.77:                               # %if.then.i.i331.3
                                        #   in Loop: Header=BB234_70 Depth=1
	movslq	-4(%rcx), %rax
	decq	%rax
	imulq	%rsi, %rax
	addq	%rax, %rdx
	jmp	.LBB234_69
.LBB234_78:                             # %for.body.i12.i.preheader.new
	movl	%r10d, %r9d
	andl	$-4, %r9d
	leaq	56(%r11), %rcx
	xorl	%ebx, %ebx
	xorl	%esi, %esi
	jmp	.LBB234_80
	.p2align	4, 0x90
.LBB234_86:                             # %if.then.i18.i.2
                                        #   in Loop: Header=BB234_80 Depth=1
	movslq	-20(%rcx), %rdi
	decq	%rdi
	imulq	%rax, %rdi
	addq	%rdi, %rsi
	movslq	(%rcx), %rax
	testq	%rax, %rax
	js	.LBB234_87
.LBB234_79:                             # %if.end.i22.i.3
                                        #   in Loop: Header=BB234_80 Depth=1
	addq	$4, %rbx
	addq	$64, %rcx
	cmpq	%rbx, %r9
	je	.LBB234_35
.LBB234_80:                             # %for.body.i12.i
                                        # =>This Inner Loop Header: Depth=1
	movslq	-48(%rcx), %rax
	testq	%rax, %rax
	js	.LBB234_84
# %bb.81:                               # %if.end.i22.i
                                        #   in Loop: Header=BB234_80 Depth=1
	movslq	-32(%rcx), %rax
	testq	%rax, %rax
	js	.LBB234_85
.LBB234_82:                             # %if.end.i22.i.1
                                        #   in Loop: Header=BB234_80 Depth=1
	movslq	-16(%rcx), %rax
	testq	%rax, %rax
	jns	.LBB234_83
	jmp	.LBB234_86
	.p2align	4, 0x90
.LBB234_84:                             # %if.then.i18.i
                                        #   in Loop: Header=BB234_80 Depth=1
	movslq	-52(%rcx), %rdi
	decq	%rdi
	imulq	%rax, %rdi
	addq	%rdi, %rsi
	movslq	-32(%rcx), %rax
	testq	%rax, %rax
	jns	.LBB234_82
.LBB234_85:                             # %if.then.i18.i.1
                                        #   in Loop: Header=BB234_80 Depth=1
	movslq	-36(%rcx), %rdi
	decq	%rdi
	imulq	%rax, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rcx), %rax
	testq	%rax, %rax
	js	.LBB234_86
.LBB234_83:                             # %if.end.i22.i.2
                                        #   in Loop: Header=BB234_80 Depth=1
	movslq	(%rcx), %rax
	testq	%rax, %rax
	jns	.LBB234_79
.LBB234_87:                             # %if.then.i18.i.3
                                        #   in Loop: Header=BB234_80 Depth=1
	movslq	-4(%rcx), %rdi
	decq	%rdi
	imulq	%rax, %rdi
	addq	%rdi, %rsi
	addq	$4, %rbx
	addq	$64, %rcx
	cmpq	%rbx, %r9
	jne	.LBB234_80
.LBB234_35:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa
	testq	%r8, %r8
	je	.LBB234_40
# %bb.36:                               # %for.body.i12.i.epil.preheader
	shlq	$4, %rbx
	leaq	(%r11,%rbx), %rcx
	addq	$8, %rcx
	shlq	$4, %r8
	xorl	%ebx, %ebx
	jmp	.LBB234_38
	.p2align	4, 0x90
.LBB234_37:                             # %if.end.i22.i.epil
                                        #   in Loop: Header=BB234_38 Depth=1
	addq	$16, %rbx
	cmpq	%rbx, %r8
	je	.LBB234_40
.LBB234_38:                             # %for.body.i12.i.epil
                                        # =>This Inner Loop Header: Depth=1
	movslq	(%rcx,%rbx), %rax
	testq	%rax, %rax
	jns	.LBB234_37
# %bb.39:                               # %if.then.i18.i.epil
                                        #   in Loop: Header=BB234_38 Depth=1
	movslq	-4(%rcx,%rbx), %rdi
	decq	%rdi
	imulq	%rax, %rdi
	addq	%rdi, %rsi
	jmp	.LBB234_37
.LBB234_40:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
	incq	%rdx
.LBB234_42:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit
	movq	-104(%rbp), %rbx                # 8-byte Reload
	subq	%rsi, %rdx
	movzbl	33(%r13), %ecx
	addq	$7, %rcx
	shrq	$3, %rcx
	imulq	%rcx, %rdx
	movl	36(%rbx), %eax
	movq	40(%rbx), %r8
	testl	%eax, %eax
	movq	%rax, -152(%rbp)                # 8-byte Spill
	movq	%rcx, -224(%rbp)                # 8-byte Spill
	jle	.LBB234_58
# %bb.43:                               # %for.body.preheader.i.i336
	movq	%r8, %rdi
	movq	%r11, -112(%rbp)                # 8-byte Spill
	leaq	-1(%rax), %r10
	movl	%eax, %r8d
	andl	$3, %r8d
	cmpq	$3, %r10
	jae	.LBB234_88
# %bb.44:
	xorl	%ebx, %ebx
	xorl	%r15d, %r15d
.LBB234_45:                             # %for.body.i12.i359.preheader.unr-lcssa
	testq	%r8, %r8
	je	.LBB234_50
# %bb.46:                               # %for.body.i.i341.epil.preheader
	shlq	$4, %rbx
	addq	%rdi, %rbx
	addq	$8, %rbx
	shlq	$4, %r8
	xorl	%ecx, %ecx
	jmp	.LBB234_48
	.p2align	4, 0x90
.LBB234_47:                             # %if.end.i.i352.epil
                                        #   in Loop: Header=BB234_48 Depth=1
	addq	$16, %rcx
	cmpq	%rcx, %r8
	je	.LBB234_50
.LBB234_48:                             # %for.body.i.i341.epil
                                        # =>This Inner Loop Header: Depth=1
	movl	(%rbx,%rcx), %esi
	testl	%esi, %esi
	jle	.LBB234_47
# %bb.49:                               # %if.then.i.i348.epil
                                        #   in Loop: Header=BB234_48 Depth=1
	movslq	-4(%rbx,%rcx), %rax
	decq	%rax
	imulq	%rsi, %rax
	addq	%rax, %r15
	jmp	.LBB234_47
.LBB234_50:                             # %for.body.i12.i359.preheader
	movq	-152(%rbp), %r11                # 8-byte Reload
	movl	%r11d, %r9d
	andl	$3, %r9d
	cmpq	$3, %r10
	jae	.LBB234_98
# %bb.51:
	xorl	%ebx, %ebx
	xorl	%ecx, %ecx
	movq	-96(%rbp), %r10                 # 8-byte Reload
	movq	%rdi, %r8
	jmp	.LBB234_52
.LBB234_58:
	xorl	%ecx, %ecx
	jmp	.LBB234_59
.LBB234_88:                             # %for.body.preheader.i.i336.new
	movl	%eax, %r11d
	andl	$-4, %r11d
	leaq	56(%rdi), %r9
	xorl	%ebx, %ebx
	xorl	%r15d, %r15d
	jmp	.LBB234_90
	.p2align	4, 0x90
.LBB234_89:                             # %if.end.i.i352.3
                                        #   in Loop: Header=BB234_90 Depth=1
	addq	$4, %rbx
	addq	$64, %r9
	cmpq	%rbx, %r11
	je	.LBB234_45
.LBB234_90:                             # %for.body.i.i341
                                        # =>This Inner Loop Header: Depth=1
	movl	-48(%r9), %ecx
	testl	%ecx, %ecx
	jle	.LBB234_92
# %bb.91:                               # %if.then.i.i348
                                        #   in Loop: Header=BB234_90 Depth=1
	movslq	-52(%r9), %rax
	decq	%rax
	imulq	%rcx, %rax
	addq	%rax, %r15
.LBB234_92:                             # %if.end.i.i352
                                        #   in Loop: Header=BB234_90 Depth=1
	movl	-32(%r9), %ecx
	testl	%ecx, %ecx
	jle	.LBB234_94
# %bb.93:                               # %if.then.i.i348.1
                                        #   in Loop: Header=BB234_90 Depth=1
	movslq	-36(%r9), %rax
	decq	%rax
	imulq	%rcx, %rax
	addq	%rax, %r15
.LBB234_94:                             # %if.end.i.i352.1
                                        #   in Loop: Header=BB234_90 Depth=1
	movl	-16(%r9), %ecx
	testl	%ecx, %ecx
	jle	.LBB234_96
# %bb.95:                               # %if.then.i.i348.2
                                        #   in Loop: Header=BB234_90 Depth=1
	movslq	-20(%r9), %rax
	decq	%rax
	imulq	%rcx, %rax
	addq	%rax, %r15
.LBB234_96:                             # %if.end.i.i352.2
                                        #   in Loop: Header=BB234_90 Depth=1
	movl	(%r9), %ecx
	testl	%ecx, %ecx
	jle	.LBB234_89
# %bb.97:                               # %if.then.i.i348.3
                                        #   in Loop: Header=BB234_90 Depth=1
	movslq	-4(%r9), %rax
	decq	%rax
	imulq	%rcx, %rax
	addq	%rax, %r15
	jmp	.LBB234_89
.LBB234_98:                             # %for.body.i12.i359.preheader.new
                                        # kill: def $r11d killed $r11d killed $r11 def $r11
	andl	$-4, %r11d
	movq	%rdi, %r8
	leaq	56(%rdi), %rsi
	xorl	%ebx, %ebx
	xorl	%ecx, %ecx
	movq	-96(%rbp), %r10                 # 8-byte Reload
	jmp	.LBB234_100
	.p2align	4, 0x90
.LBB234_106:                            # %if.then.i18.i366.2
                                        #   in Loop: Header=BB234_100 Depth=1
	movslq	-20(%rsi), %rdi
	decq	%rdi
	imulq	%rax, %rdi
	addq	%rdi, %rcx
	movslq	(%rsi), %rax
	testq	%rax, %rax
	js	.LBB234_107
.LBB234_99:                             # %if.end.i22.i370.3
                                        #   in Loop: Header=BB234_100 Depth=1
	addq	$4, %rbx
	addq	$64, %rsi
	cmpq	%rbx, %r11
	je	.LBB234_52
.LBB234_100:                            # %for.body.i12.i359
                                        # =>This Inner Loop Header: Depth=1
	movslq	-48(%rsi), %rax
	testq	%rax, %rax
	js	.LBB234_104
# %bb.101:                              # %if.end.i22.i370
                                        #   in Loop: Header=BB234_100 Depth=1
	movslq	-32(%rsi), %rax
	testq	%rax, %rax
	js	.LBB234_105
.LBB234_102:                            # %if.end.i22.i370.1
                                        #   in Loop: Header=BB234_100 Depth=1
	movslq	-16(%rsi), %rax
	testq	%rax, %rax
	jns	.LBB234_103
	jmp	.LBB234_106
	.p2align	4, 0x90
.LBB234_104:                            # %if.then.i18.i366
                                        #   in Loop: Header=BB234_100 Depth=1
	movslq	-52(%rsi), %rdi
	decq	%rdi
	imulq	%rax, %rdi
	addq	%rdi, %rcx
	movslq	-32(%rsi), %rax
	testq	%rax, %rax
	jns	.LBB234_102
.LBB234_105:                            # %if.then.i18.i366.1
                                        #   in Loop: Header=BB234_100 Depth=1
	movslq	-36(%rsi), %rdi
	decq	%rdi
	imulq	%rax, %rdi
	addq	%rdi, %rcx
	movslq	-16(%rsi), %rax
	testq	%rax, %rax
	js	.LBB234_106
.LBB234_103:                            # %if.end.i22.i370.2
                                        #   in Loop: Header=BB234_100 Depth=1
	movslq	(%rsi), %rax
	testq	%rax, %rax
	jns	.LBB234_99
.LBB234_107:                            # %if.then.i18.i366.3
                                        #   in Loop: Header=BB234_100 Depth=1
	movslq	-4(%rsi), %rdi
	decq	%rdi
	imulq	%rax, %rdi
	addq	%rdi, %rcx
	addq	$4, %rbx
	addq	$64, %rsi
	cmpq	%rbx, %r11
	jne	.LBB234_100
.LBB234_52:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit379.loopexit.unr-lcssa
	testq	%r9, %r9
	movq	-112(%rbp), %r11                # 8-byte Reload
	je	.LBB234_57
# %bb.53:                               # %for.body.i12.i359.epil.preheader
	shlq	$4, %rbx
	leaq	(%r8,%rbx), %rsi
	addq	$8, %rsi
	shlq	$4, %r9
	xorl	%ebx, %ebx
	jmp	.LBB234_55
	.p2align	4, 0x90
.LBB234_54:                             # %if.end.i22.i370.epil
                                        #   in Loop: Header=BB234_55 Depth=1
	addq	$16, %rbx
	cmpq	%rbx, %r9
	je	.LBB234_57
.LBB234_55:                             # %for.body.i12.i359.epil
                                        # =>This Inner Loop Header: Depth=1
	movslq	(%rsi,%rbx), %rax
	testq	%rax, %rax
	jns	.LBB234_54
# %bb.56:                               # %if.then.i18.i366.epil
                                        #   in Loop: Header=BB234_55 Depth=1
	movslq	-4(%rsi,%rbx), %rdi
	decq	%rdi
	imulq	%rax, %rdi
	addq	%rdi, %rcx
	jmp	.LBB234_54
.LBB234_57:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit379.loopexit
	incq	%r15
	movq	-104(%rbp), %rbx                # 8-byte Reload
.LBB234_59:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit379
	subq	%rcx, %r15
	movzbl	33(%rbx), %eax
	addq	$7, %rax
	shrq	$3, %rax
	imulq	%r15, %rax
	cmpq	%rax, %rdx
	movl	-140(%rbp), %r15d               # 4-byte Reload
	jne	.LBB234_123
# %bb.60:                               # %lor.lhs.false73
	movq	-232(%rbp), %rax
	testl	%r10d, %r10d
	jle	.LBB234_122
# %bb.61:                               # %for.body.preheader.i.i384
	movq	%rax, -216(%rbp)                # 8-byte Spill
	movq	%r8, -112(%rbp)                 # 8-byte Spill
	leaq	-1(%r10), %r9
	movl	%r10d, %r8d
	andl	$3, %r8d
	cmpq	$3, %r9
	jae	.LBB234_130
# %bb.62:
	xorl	%ebx, %ebx
	xorl	%edx, %edx
.LBB234_63:                             # %for.body.i12.i407.preheader.unr-lcssa
	testq	%r8, %r8
	je	.LBB234_108
# %bb.64:                               # %for.body.i.i389.epil.preheader
	shlq	$4, %rbx
	leaq	(%r11,%rbx), %rax
	addq	$8, %rax
	shlq	$4, %r8
	xorl	%ecx, %ecx
	jmp	.LBB234_66
	.p2align	4, 0x90
.LBB234_65:                             # %if.end.i.i400.epil
                                        #   in Loop: Header=BB234_66 Depth=1
	addq	$16, %rcx
	cmpq	%rcx, %r8
	je	.LBB234_108
.LBB234_66:                             # %for.body.i.i389.epil
                                        # =>This Inner Loop Header: Depth=1
	movl	(%rax,%rcx), %esi
	testl	%esi, %esi
	jle	.LBB234_65
# %bb.67:                               # %if.then.i.i396.epil
                                        #   in Loop: Header=BB234_66 Depth=1
	movslq	-4(%rax,%rcx), %rdi
	decq	%rdi
	imulq	%rsi, %rdi
	addq	%rdi, %rdx
	jmp	.LBB234_65
.LBB234_108:                            # %for.body.i12.i407.preheader
	movq	%r10, %r8
	andl	$3, %r10d
	cmpq	$3, %r9
	jae	.LBB234_140
# %bb.109:
	xorl	%ebx, %ebx
	xorl	%ecx, %ecx
	jmp	.LBB234_110
.LBB234_122:
	xorl	%ecx, %ecx
	movl	$1, %edx
	subq	%rcx, %rdx
	imulq	-224(%rbp), %rdx                # 8-byte Folded Reload
	cmpq	%rdx, %rax
	je	.LBB234_116
.LBB234_123:                            # %if.then77
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB234_125
# %bb.124:                              # %if.else.i
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.260(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB234_126
.LBB234_125:                            # %if.then.i437
	leaq	.L.str.260(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB234_126:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB234_127:                            # %cleanup238
	movl	$-39, %ebx
.LBB234_128:                            # %cleanup238
	movq	-184(%rbp), %rdi
	callq	halide_release_cl_context@PLT
.LBB234_129:                            # %return
	movl	%ebx, %eax
	addq	$648, %rsp                      # imm = 0x288
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB234_130:                            # %for.body.preheader.i.i384.new
	movl	%r10d, %eax
	andl	$-4, %eax
	leaq	56(%r11), %rcx
	xorl	%ebx, %ebx
	xorl	%edx, %edx
	jmp	.LBB234_132
	.p2align	4, 0x90
.LBB234_131:                            # %if.end.i.i400.3
                                        #   in Loop: Header=BB234_132 Depth=1
	addq	$4, %rbx
	addq	$64, %rcx
	cmpq	%rbx, %rax
	je	.LBB234_63
.LBB234_132:                            # %for.body.i.i389
                                        # =>This Inner Loop Header: Depth=1
	movl	-48(%rcx), %esi
	testl	%esi, %esi
	jle	.LBB234_134
# %bb.133:                              # %if.then.i.i396
                                        #   in Loop: Header=BB234_132 Depth=1
	movslq	-52(%rcx), %rdi
	decq	%rdi
	imulq	%rsi, %rdi
	addq	%rdi, %rdx
.LBB234_134:                            # %if.end.i.i400
                                        #   in Loop: Header=BB234_132 Depth=1
	movl	-32(%rcx), %esi
	testl	%esi, %esi
	jle	.LBB234_136
# %bb.135:                              # %if.then.i.i396.1
                                        #   in Loop: Header=BB234_132 Depth=1
	movslq	-36(%rcx), %rdi
	decq	%rdi
	imulq	%rsi, %rdi
	addq	%rdi, %rdx
.LBB234_136:                            # %if.end.i.i400.1
                                        #   in Loop: Header=BB234_132 Depth=1
	movl	-16(%rcx), %esi
	testl	%esi, %esi
	jle	.LBB234_138
# %bb.137:                              # %if.then.i.i396.2
                                        #   in Loop: Header=BB234_132 Depth=1
	movslq	-20(%rcx), %rdi
	decq	%rdi
	imulq	%rsi, %rdi
	addq	%rdi, %rdx
.LBB234_138:                            # %if.end.i.i400.2
                                        #   in Loop: Header=BB234_132 Depth=1
	movl	(%rcx), %esi
	testl	%esi, %esi
	jle	.LBB234_131
# %bb.139:                              # %if.then.i.i396.3
                                        #   in Loop: Header=BB234_132 Depth=1
	movslq	-4(%rcx), %rdi
	decq	%rdi
	imulq	%rsi, %rdi
	addq	%rdi, %rdx
	jmp	.LBB234_131
.LBB234_140:                            # %for.body.i12.i407.preheader.new
                                        # kill: def $r8d killed $r8d killed $r8 def $r8
	andl	$-4, %r8d
	leaq	56(%r11), %rsi
	xorl	%ebx, %ebx
	xorl	%ecx, %ecx
	jmp	.LBB234_142
	.p2align	4, 0x90
.LBB234_148:                            # %if.then.i18.i414.2
                                        #   in Loop: Header=BB234_142 Depth=1
	movslq	-20(%rsi), %rax
	decq	%rax
	imulq	%rdi, %rax
	addq	%rax, %rcx
	movslq	(%rsi), %rdi
	testq	%rdi, %rdi
	js	.LBB234_149
.LBB234_141:                            # %if.end.i22.i418.3
                                        #   in Loop: Header=BB234_142 Depth=1
	addq	$4, %rbx
	addq	$64, %rsi
	cmpq	%rbx, %r8
	je	.LBB234_110
.LBB234_142:                            # %for.body.i12.i407
                                        # =>This Inner Loop Header: Depth=1
	movslq	-48(%rsi), %rdi
	testq	%rdi, %rdi
	js	.LBB234_146
# %bb.143:                              # %if.end.i22.i418
                                        #   in Loop: Header=BB234_142 Depth=1
	movslq	-32(%rsi), %rdi
	testq	%rdi, %rdi
	js	.LBB234_147
.LBB234_144:                            # %if.end.i22.i418.1
                                        #   in Loop: Header=BB234_142 Depth=1
	movslq	-16(%rsi), %rdi
	testq	%rdi, %rdi
	jns	.LBB234_145
	jmp	.LBB234_148
	.p2align	4, 0x90
.LBB234_146:                            # %if.then.i18.i414
                                        #   in Loop: Header=BB234_142 Depth=1
	movslq	-52(%rsi), %rax
	decq	%rax
	imulq	%rdi, %rax
	addq	%rax, %rcx
	movslq	-32(%rsi), %rdi
	testq	%rdi, %rdi
	jns	.LBB234_144
.LBB234_147:                            # %if.then.i18.i414.1
                                        #   in Loop: Header=BB234_142 Depth=1
	movslq	-36(%rsi), %rax
	decq	%rax
	imulq	%rdi, %rax
	addq	%rax, %rcx
	movslq	-16(%rsi), %rdi
	testq	%rdi, %rdi
	js	.LBB234_148
.LBB234_145:                            # %if.end.i22.i418.2
                                        #   in Loop: Header=BB234_142 Depth=1
	movslq	(%rsi), %rdi
	testq	%rdi, %rdi
	jns	.LBB234_141
.LBB234_149:                            # %if.then.i18.i414.3
                                        #   in Loop: Header=BB234_142 Depth=1
	movslq	-4(%rsi), %rax
	decq	%rax
	imulq	%rdi, %rax
	addq	%rax, %rcx
	addq	$4, %rbx
	addq	$64, %rsi
	cmpq	%rbx, %r8
	jne	.LBB234_142
.LBB234_110:                            # %_ZNK15halide_buffer_t13size_in_bytesEv.exit427.loopexit.unr-lcssa
	testq	%r10, %r10
	movq	-112(%rbp), %r8                 # 8-byte Reload
	je	.LBB234_115
# %bb.111:                              # %for.body.i12.i407.epil.preheader
	shlq	$4, %rbx
	leaq	(%r11,%rbx), %rax
	addq	$8, %rax
	shlq	$4, %r10
	xorl	%esi, %esi
	jmp	.LBB234_113
	.p2align	4, 0x90
.LBB234_112:                            # %if.end.i22.i418.epil
                                        #   in Loop: Header=BB234_113 Depth=1
	addq	$16, %rsi
	cmpq	%rsi, %r10
	je	.LBB234_115
.LBB234_113:                            # %for.body.i12.i407.epil
                                        # =>This Inner Loop Header: Depth=1
	movslq	(%rax,%rsi), %rdi
	testq	%rdi, %rdi
	jns	.LBB234_112
# %bb.114:                              # %if.then.i18.i414.epil
                                        #   in Loop: Header=BB234_113 Depth=1
	movslq	-4(%rax,%rsi), %rbx
	decq	%rbx
	imulq	%rdi, %rbx
	addq	%rbx, %rcx
	jmp	.LBB234_112
.LBB234_115:                            # %_ZNK15halide_buffer_t13size_in_bytesEv.exit427.loopexit
	incq	%rdx
	movq	-104(%rbp), %rbx                # 8-byte Reload
	movq	-96(%rbp), %r10                 # 8-byte Reload
	movq	-216(%rbp), %rax                # 8-byte Reload
	subq	%rcx, %rdx
	imulq	-224(%rbp), %rdx                # 8-byte Folded Reload
	cmpq	%rdx, %rax
	jne	.LBB234_123
.LBB234_116:                            # %if.end80
	testq	%r12, %r12
	setne	%al
	orb	%r15b, %al
	je	.LBB234_150
# %bb.117:                              # %if.else
	testb	%r15b, %r15b
	movq	-88(%rbp), %rdi                 # 8-byte Reload
	je	.LBB234_153
# %bb.118:                              # %if.else
	testq	%r12, %r12
	je	.LBB234_153
# %bb.119:                              # %if.then141
	vxorps	%xmm0, %xmm0, %xmm0
	vmovaps	%xmm0, -208(%rbp)
	movq	$0, -192(%rbp)
	movslq	4(%r11), %rax
	movq	%rax, -136(%rbp)
	cmpl	$2, %r10d
	jl	.LBB234_160
# %bb.120:                              # %cond.end159
	movslq	20(%r11), %rcx
	movq	%rcx, -128(%rbp)
	cmpl	$2, %r10d
	jne	.LBB234_169
# %bb.121:                              # %land.lhs.true173
	movq	$1, -120(%rbp)
	cmpl	%eax, 24(%r11)
	je	.LBB234_161
	jmp	.LBB234_171
.LBB234_150:                            # %if.then84
	vxorps	%xmm0, %xmm0, %xmm0
	vmovaps	%xmm0, -208(%rbp)
	movq	$0, -192(%rbp)
	movslq	4(%r8), %rax
	movq	%rax, -136(%rbp)
	movq	-152(%rbp), %rcx                # 8-byte Reload
	cmpl	$2, %ecx
	movq	-88(%rbp), %rdi                 # 8-byte Reload
	jl	.LBB234_156
# %bb.151:                              # %cond.end
	movq	%rcx, %rdx
	movslq	20(%r8), %rcx
	movq	%rcx, -128(%rbp)
	cmpl	$2, %edx
	jne	.LBB234_158
# %bb.152:                              # %land.lhs.true104
	movq	$1, -120(%rbp)
	cmpl	%eax, 24(%r8)
	je	.LBB234_157
	jmp	.LBB234_171
.LBB234_153:                            # %if.else215
	testq	%r12, %r12
	sete	%al
	orb	%al, %r15b
	jne	.LBB234_166
# %bb.154:                              # %if.then219
	movq	%r14, -56(%rbp)
	movb	$1, -48(%rbp)
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, -80(%rbp)
	testq	%rax, %rax
	je	.LBB234_175
# %bb.155:                              # %if.then6.i510
	movq	%rax, %rbx
	addq	$1023, %rbx                     # imm = 0x3FF
	movb	$0, 1023(%rax)
	leaq	.L.str.262(%rip), %rdx
	jmp	.LBB234_173
.LBB234_156:                            # %cond.end100
	vmovaps	.LCPI234_0(%rip), %xmm0         # xmm0 = [1,1]
	vmovups	%xmm0, -128(%rbp)
.LBB234_157:                            # %cleanup
	movq	_ZN6Halide7Runtime8Internal6OpenCL18clEnqueueReadImageE@GOTPCREL(%rip), %rax
	movq	-640(%rbp), %rcx
	movq	8(%rcx), %rsi
	movq	16(%rbx), %rcx
	jmp	.LBB234_162
.LBB234_158:                            # %land.lhs.true104.thread
	movslq	36(%r8), %rdx
	movq	%rdx, -120(%rbp)
	movq	-88(%rbp), %rdi                 # 8-byte Reload
	cmpl	%eax, 24(%r8)
	jne	.LBB234_171
# %bb.159:                              # %land.lhs.true117
	imull	%eax, %ecx
	cmpl	%ecx, 40(%r8)
	je	.LBB234_157
	jmp	.LBB234_171
.LBB234_160:                            # %cond.end169
	vmovaps	.LCPI234_0(%rip), %xmm0         # xmm0 = [1,1]
	vmovups	%xmm0, -128(%rbp)
.LBB234_161:                            # %cleanup210
	movq	_ZN6Halide7Runtime8Internal6OpenCL19clEnqueueWriteImageE@GOTPCREL(%rip), %rax
	movq	-632(%rbp), %rcx
	movq	8(%rcx), %rsi
	movq	16(%r13), %rcx
.LBB234_162:                            # %if.end224
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, 24(%rsp)
	movq	%rcx, 8(%rsp)
	movl	$0, 16(%rsp)
	movq	$0, (%rsp)
	leaq	-208(%rbp), %rcx
	leaq	-136(%rbp), %r8
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	callq	*(%rax)
	movl	%eax, %ebx
	testl	%eax, %eax
	je	.LBB234_165
# %bb.163:                              # %if.then226
	movl	%ebx, %edi
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	%r14, -56(%rbp)
	movb	$1, -48(%rbp)
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, -80(%rbp)
	testq	%rax, %rax
	je	.LBB234_167
# %bb.164:                              # %if.then6.i525
	movq	%rax, %r14
	addq	$1023, %r14                     # imm = 0x3FF
	movb	$0, 1023(%rax)
	leaq	.L.str.263(%rip), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	jmp	.LBB234_168
.LBB234_165:                            # %if.end224.if.end235_crit_edge
	movq	-168(%rbp), %rdi
.LBB234_166:                            # %if.end235
	movq	_ZN6Halide7Runtime8Internal6OpenCL8clFinishE@GOTPCREL(%rip), %rax
	callq	*(%rax)
	xorl	%ebx, %ebx
	jmp	.LBB234_128
.LBB234_167:                            # %if.then226.split
	leaq	.L.str.263(%rip), %rdx
	xorl	%r14d, %r14d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB234_168:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit528
	callq	halide_string_to_string@PLT
	movq	%rax, %r15
	movq	%r14, -64(%rbp)
	movl	%ebx, %edi
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	halide_string_to_string@PLT
	movq	%rax, -72(%rbp)
	leaq	-80(%rbp), %rdi
	callq	_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev
	jmp	.LBB234_128
.LBB234_169:                            # %land.lhs.true173.thread
	movslq	36(%r11), %rdx
	movq	%rdx, -120(%rbp)
	movq	-88(%rbp), %rdi                 # 8-byte Reload
	cmpl	%eax, 24(%r11)
	jne	.LBB234_171
# %bb.170:                              # %land.lhs.true187
	imull	%eax, %ecx
	cmpl	%ecx, 40(%r11)
	je	.LBB234_161
.LBB234_171:                            # %if.then111
	movq	%r14, -56(%rbp)
	movb	$1, -48(%rbp)
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, -80(%rbp)
	testq	%rax, %rax
	je	.LBB234_174
# %bb.172:                              # %if.then6.i450
	movq	%rax, %rbx
	addq	$1023, %rbx                     # imm = 0x3FF
	movb	$0, 1023(%rax)
	leaq	.L.str.261(%rip), %rdx
.LBB234_173:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit453
	movq	%rax, %rdi
	movq	%rbx, %rsi
	jmp	.LBB234_177
.LBB234_174:                            # %if.then111.split
	leaq	.L.str.261(%rip), %rdx
	jmp	.LBB234_176
.LBB234_175:                            # %if.then219.split
	leaq	.L.str.262(%rip), %rdx
.LBB234_176:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit453
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB234_177:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit453
	callq	halide_string_to_string@PLT
	movq	%rbx, -64(%rbp)
	movq	%rax, -72(%rbp)
	leaq	-80(%rbp), %rdi
	callq	_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev
	jmp	.LBB234_127
.Lfunc_end234:
	.size	halide_opencl_image_buffer_copy, .Lfunc_end234-halide_opencl_image_buffer_copy
                                        # -- End function
	.section	.text.halide_opencl_image_device_crop,"ax",@progbits
	.weak	halide_opencl_image_device_crop # -- Begin function halide_opencl_image_device_crop
	.p2align	4, 0x90
	.type	halide_opencl_image_device_crop,@function
halide_opencl_image_device_crop:        # @halide_opencl_image_device_crop
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movl	36(%rsi), %eax
	testl	%eax, %eax
	jle	.LBB235_10
# %bb.1:                                # %for.body.lr.ph
	movq	%rdi, %r14
	movq	40(%rsi), %rcx
	movq	40(%rdx), %rdx
	shlq	$4, %rax
	xorl	%esi, %esi
	.p2align	4, 0x90
.LBB235_2:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movl	(%rcx,%rsi), %edi
	cmpl	(%rdx,%rsi), %edi
	jne	.LBB235_8
# %bb.3:                                # %land.lhs.true.i.i
                                        #   in Loop: Header=BB235_2 Depth=1
	movl	4(%rcx,%rsi), %edi
	cmpl	4(%rdx,%rsi), %edi
	jne	.LBB235_8
# %bb.4:                                # %land.lhs.true5.i.i
                                        #   in Loop: Header=BB235_2 Depth=1
	movl	8(%rcx,%rsi), %edi
	cmpl	8(%rdx,%rsi), %edi
	jne	.LBB235_8
# %bb.5:                                # %_ZNK18halide_dimension_tneERKS_.exit
                                        #   in Loop: Header=BB235_2 Depth=1
	movl	12(%rcx,%rsi), %edi
	cmpl	12(%rdx,%rsi), %edi
	jne	.LBB235_8
# %bb.6:                                # %for.cond
                                        #   in Loop: Header=BB235_2 Depth=1
	addq	$16, %rsi
	cmpq	%rsi, %rax
	jne	.LBB235_2
.LBB235_10:
	xorl	%eax, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.LBB235_8:                              # %if.then
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB235_11
# %bb.9:                                # %if.else.i
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.267(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB235_12
.LBB235_11:                             # %if.then.i
	leaq	.L.str.267(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB235_12:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-40, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end235:
	.size	halide_opencl_image_device_crop, .Lfunc_end235-halide_opencl_image_device_crop
                                        # -- End function
	.section	.text.halide_opencl_image_device_slice,"ax",@progbits
	.weak	halide_opencl_image_device_slice # -- Begin function halide_opencl_image_device_slice
	.p2align	4, 0x90
	.type	halide_opencl_image_device_slice,@function
halide_opencl_image_device_slice:       # @halide_opencl_image_device_slice
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB236_1
# %bb.2:                                # %if.else.i
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.268(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB236_3
.LBB236_1:                              # %if.then.i
	leaq	.L.str.268(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB236_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-40, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end236:
	.size	halide_opencl_image_device_slice, .Lfunc_end236-halide_opencl_image_device_slice
                                        # -- End function
	.section	.text.halide_opencl_image_device_release_crop,"ax",@progbits
	.weak	halide_opencl_image_device_release_crop # -- Begin function halide_opencl_image_device_release_crop
	.p2align	4, 0x90
	.type	halide_opencl_image_device_release_crop,@function
halide_opencl_image_device_release_crop: # @halide_opencl_image_device_release_crop
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	%rdi, %r14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB237_1
# %bb.2:                                # %if.else.i
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.267(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB237_3
.LBB237_1:                              # %if.then.i
	leaq	.L.str.267(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB237_3:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-40, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end237:
	.size	halide_opencl_image_device_release_crop, .Lfunc_end237-halide_opencl_image_device_release_crop
                                        # -- End function
	.section	.text.halide_opencl_image_wrap_cl_mem,"ax",@progbits
	.weak	halide_opencl_image_wrap_cl_mem # -- Begin function halide_opencl_image_wrap_cl_mem
	.p2align	4, 0x90
	.type	halide_opencl_image_wrap_cl_mem,@function
halide_opencl_image_wrap_cl_mem:        # @halide_opencl_image_wrap_cl_mem
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rdx, %r15
	movq	%rsi, %rbx
	movq	%rdi, %r14
	cmpq	$0, (%rsi)
	je	.LBB238_2
# %bb.1:                                # %do.end
	leaq	.L.str.264(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
	movl	$-2, %eax
	cmpq	$0, (%rbx)
	jne	.LBB238_15
.LBB238_2:                              # %if.end4
	movl	$16, %edi
	callq	malloc@PLT
	testq	%rax, %rax
	je	.LBB238_3
# %bb.4:                                # %if.end7
	movq	%rax, %r13
	movl	$0, -44(%rbp)
	movq	_ZN6Halide7Runtime8Internal6OpenCL18clGetMemObjectInfoE@GOTPCREL(%rip), %rax
	leaq	-44(%rbp), %rcx
	movl	$4, %edx
	movq	%r15, %rdi
	movl	$4352, %esi                     # imm = 0x1100
	xorl	%r8d, %r8d
	callq	*(%rax)
	movl	%eax, %r12d
	testl	%eax, %eax
	je	.LBB238_5
.LBB238_7:                              # %if.then14
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r13
	testq	%rax, %rax
	je	.LBB238_8
# %bb.9:                                # %if.then6.i
	leaq	1023(%r13), %rbx
	movb	$0, 1023(%r13)
	leaq	.L.str.265(%rip), %rdx
	movq	%r13, %rdi
	movq	%rbx, %rsi
	jmp	.LBB238_10
.LBB238_3:
	movl	$-11, %eax
	jmp	.LBB238_15
.LBB238_5:                              # %lor.lhs.false
	movl	$-4337, %eax                    # imm = 0xEF0F
	addl	-44(%rbp), %eax
	cmpl	$3, %eax
	ja	.LBB238_7
# %bb.6:                                # %lor.lhs.false
	cmpl	$2, %eax
	je	.LBB238_7
# %bb.14:                               # %if.end22
	movq	%r15, 8(%r13)
	movq	$0, (%r13)
	movq	%r13, (%rbx)
	movq	_ZN6Halide7Runtime8Internal6OpenCL29opencl_image_device_interfaceE@GOTPCREL(%rip), %rax
	movq	%rax, 8(%rbx)
	movq	120(%rax), %rax
	callq	*(%rax)
	xorl	%eax, %eax
	jmp	.LBB238_15
.LBB238_8:                              # %if.then14.split
	leaq	.L.str.265(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB238_10:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	callq	halide_pointer_to_string@PLT
	leaq	.L.str.61.200(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %r15
	movl	%r12d, %edi
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.266(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movslq	-44(%rbp), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	testq	%r13, %r13
	je	.LBB238_11
# %bb.12:                               # %if.else.i
	subq	%r13, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%r13, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r13, %rsi
	jmp	.LBB238_13
.LBB238_11:
	leaq	.L.str.274(%rip), %rsi
.LBB238_13:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%r13, %rdi
	callq	free@PLT
	movl	$-32, %eax
.LBB238_15:                             # %return
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end238:
	.size	halide_opencl_image_wrap_cl_mem, .Lfunc_end238-halide_opencl_image_wrap_cl_mem
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi # -- Begin function _ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi,@function
_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi: # @_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
# %bb.0:                                # %entry
	addl	$68, %edi
	cmpl	$68, %edi
	ja	.LBB239_1
# %bb.2:                                # %switch.lookup
	pushq	%rbp
	movq	%rsp, %rbp
	movslq	%edi, %rax
	leaq	.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi(%rip), %rcx
	movslq	(%rcx,%rax,4), %rax
	addq	%rcx, %rax
	popq	%rbp
	retq
.LBB239_1:
	leaq	.L.str.242(%rip), %rax
	retq
.Lfunc_end239:
	.size	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi, .Lfunc_end239-_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal6OpenCL14load_libopenclEPv,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal6OpenCL14load_libopenclEPv # -- Begin function _ZN6Halide7Runtime8Internal6OpenCL14load_libopenclEPv
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal6OpenCL14load_libopenclEPv,@function
_ZN6Halide7Runtime8Internal6OpenCL14load_libopenclEPv: # @_ZN6Halide7Runtime8Internal6OpenCL14load_libopenclEPv
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rdi, %r14
	movq	_ZN6Halide7Runtime8Internal6OpenCL15clCreateContextE@GOTPCREL(%rip), %r13
	cmpq	$0, (%r13)
	je	.LBB240_2
# %bb.1:                                # %if.then
	leaq	.L.str.7.213(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
.LBB240_2:                              # %do.end
	leaq	.L.str.8.214(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_10
# %bb.3:                                # %if.then.i
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_4
# %bb.5:                                # %if.then6.i.i
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_6
.LBB240_4:                              # %if.then.i.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_6:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.8.214(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_7
# %bb.8:                                # %if.else.i.i
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_9
.LBB240_7:
	leaq	.L.str.274(%rip), %rsi
.LBB240_9:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_10:                             # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFijPP15_cl_platform_idPjEEET_PvPKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL16clGetPlatformIDsE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.9.216(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_18
# %bb.11:                               # %if.then.i102
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_12
# %bb.13:                               # %if.then6.i.i104
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_14
.LBB240_12:                             # %if.then.i102.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_14:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i109
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.9.216(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_15
# %bb.16:                               # %if.else.i.i115
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_17
.LBB240_15:
	leaq	.L.str.274(%rip), %rsi
.LBB240_17:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i117
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_18:                             # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP15_cl_platform_idjmPvPmEEET_S6_PKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL17clGetPlatformInfoE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.10.217(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_26
# %bb.19:                               # %if.then.i122
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_20
# %bb.21:                               # %if.then6.i.i124
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_22
.LBB240_20:                             # %if.then.i122.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_22:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i129
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.10.217(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_23
# %bb.24:                               # %if.else.i.i135
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_25
.LBB240_23:
	leaq	.L.str.274(%rip), %rsi
.LBB240_25:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i137
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_26:                             # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP15_cl_platform_idyjPP13_cl_device_idPjEEET_PvPKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL14clGetDeviceIDsE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.11.218(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_34
# %bb.27:                               # %if.then.i142
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_28
# %bb.29:                               # %if.then6.i.i144
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_30
.LBB240_28:                             # %if.then.i142.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_30:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i149
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.11.218(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_31
# %bb.32:                               # %if.else.i.i155
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_33
.LBB240_31:
	leaq	.L.str.274(%rip), %rsi
.LBB240_33:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i157
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_34:                             # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP13_cl_device_idjmPvPmEEET_S6_PKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL15clGetDeviceInfoE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.12.219(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	_ZN6Halide7Runtime8Internal6OpenCL18clCreateSubDevicesE@GOTPCREL(%rip), %rcx
	movq	%rax, (%rcx)
	leaq	.L.str.13.220(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	_ZN6Halide7Runtime8Internal6OpenCL14clRetainDeviceE@GOTPCREL(%rip), %rcx
	movq	%rax, (%rcx)
	leaq	.L.str.14.221(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	_ZN6Halide7Runtime8Internal6OpenCL15clReleaseDeviceE@GOTPCREL(%rip), %rcx
	movq	%rax, (%rcx)
	leaq	.L.str.15.222(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_42
# %bb.35:                               # %if.then.i168
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_36
# %bb.37:                               # %if.then6.i.i170
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_38
.LBB240_36:                             # %if.then.i168.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_38:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i175
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.15.222(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_39
# %bb.40:                               # %if.else.i.i181
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_41
.LBB240_39:
	leaq	.L.str.274(%rip), %rsi
.LBB240_41:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i183
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_42:                             # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFP11_cl_contextPKxjPKP13_cl_device_idPFvPKcPKvmPvESG_PiEEET_SG_SD_b.exit
	movq	%r15, (%r13)
	leaq	.L.str.16.223(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_50
# %bb.43:                               # %if.then.i188
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_44
# %bb.45:                               # %if.then6.i.i190
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_46
.LBB240_44:                             # %if.then.i188.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_46:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i195
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.16.223(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_47
# %bb.48:                               # %if.else.i.i201
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_49
.LBB240_47:
	leaq	.L.str.274(%rip), %rsi
.LBB240_49:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i203
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_50:                             # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFP11_cl_contextPKxyPFvPKcPKvmPvESC_PiEEET_SC_S9_b.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL23clCreateContextFromTypeE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.17.224(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_58
# %bb.51:                               # %if.then.i208
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_52
# %bb.53:                               # %if.then6.i.i210
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_54
.LBB240_52:                             # %if.then.i208.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_54:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i215
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.17.224(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_55
# %bb.56:                               # %if.else.i.i221
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_57
.LBB240_55:
	leaq	.L.str.274(%rip), %rsi
.LBB240_57:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i223
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_58:                             # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP11_cl_contextEEET_PvPKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL15clRetainContextE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.18.225(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_66
# %bb.59:                               # %if.then.i228
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_60
# %bb.61:                               # %if.then6.i.i230
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_62
.LBB240_60:                             # %if.then.i228.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_62:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i235
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.18.225(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_63
# %bb.64:                               # %if.else.i.i241
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_65
.LBB240_63:
	leaq	.L.str.274(%rip), %rsi
.LBB240_65:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i243
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_66:                             # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP11_cl_contextEEET_PvPKcb.exit244
	movq	_ZN6Halide7Runtime8Internal6OpenCL16clReleaseContextE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.19.226(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_74
# %bb.67:                               # %if.then.i249
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_68
# %bb.69:                               # %if.then6.i.i251
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_70
.LBB240_68:                             # %if.then.i249.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_70:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i256
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.19.226(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_71
# %bb.72:                               # %if.else.i.i262
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_73
.LBB240_71:
	leaq	.L.str.274(%rip), %rsi
.LBB240_73:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i264
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_74:                             # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP11_cl_contextjmPvPmEEET_S6_PKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL16clGetContextInfoE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.20.227(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_82
# %bb.75:                               # %if.then.i269
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_76
# %bb.77:                               # %if.then6.i.i271
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_78
.LBB240_76:                             # %if.then.i269.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_78:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i276
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.20.227(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_79
# %bb.80:                               # %if.else.i.i282
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_81
.LBB240_79:
	leaq	.L.str.274(%rip), %rsi
.LBB240_81:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i284
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_82:                             # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFP17_cl_command_queueP11_cl_contextP13_cl_device_idyPiEEET_PvPKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL20clCreateCommandQueueE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.21.228(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_90
# %bb.83:                               # %if.then.i289
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_84
# %bb.85:                               # %if.then6.i.i291
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_86
.LBB240_84:                             # %if.then.i289.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_86:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i296
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.21.228(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_87
# %bb.88:                               # %if.else.i.i302
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_89
.LBB240_87:
	leaq	.L.str.274(%rip), %rsi
.LBB240_89:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i304
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_90:                             # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP17_cl_command_queueEEET_PvPKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL20clRetainCommandQueueE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.22.229(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_98
# %bb.91:                               # %if.then.i309
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_92
# %bb.93:                               # %if.then6.i.i311
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_94
.LBB240_92:                             # %if.then.i309.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_94:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i316
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.22.229(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_95
# %bb.96:                               # %if.else.i.i322
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_97
.LBB240_95:
	leaq	.L.str.274(%rip), %rsi
.LBB240_97:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i324
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_98:                             # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP17_cl_command_queueEEET_PvPKcb.exit325
	movq	_ZN6Halide7Runtime8Internal6OpenCL21clReleaseCommandQueueE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.23.230(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_106
# %bb.99:                               # %if.then.i330
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_100
# %bb.101:                              # %if.then6.i.i332
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_102
.LBB240_100:                            # %if.then.i330.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_102:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i337
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.23.230(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_103
# %bb.104:                              # %if.else.i.i343
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_105
.LBB240_103:
	leaq	.L.str.274(%rip), %rsi
.LBB240_105:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i345
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_106:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP17_cl_command_queuejmPvPmEEET_S6_PKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL21clGetCommandQueueInfoE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.24.231(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_114
# %bb.107:                              # %if.then.i350
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_108
# %bb.109:                              # %if.then6.i.i352
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_110
.LBB240_108:                            # %if.then.i350.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_110:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i357
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.24.231(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_111
# %bb.112:                              # %if.else.i.i363
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_113
.LBB240_111:
	leaq	.L.str.274(%rip), %rsi
.LBB240_113:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i365
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_114:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFP7_cl_memP11_cl_contextymPvPiEEET_S8_PKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL14clCreateBufferE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.25.232(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_122
# %bb.115:                              # %if.then.i370
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_116
# %bb.117:                              # %if.then6.i.i372
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_118
.LBB240_116:                            # %if.then.i370.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_118:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i377
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.25.232(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_119
# %bb.120:                              # %if.else.i.i383
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_121
.LBB240_119:
	leaq	.L.str.274(%rip), %rsi
.LBB240_121:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i385
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_122:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFP7_cl_memS5_yjPKvPiEEET_PvPKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL17clCreateSubBufferE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.26.233(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	_ZN6Halide7Runtime8Internal6OpenCL13clCreateImageE@GOTPCREL(%rip), %rcx
	movq	%rax, (%rcx)
	leaq	.L.str.27.234(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_130
# %bb.123:                              # %if.then.i392
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_124
# %bb.125:                              # %if.then6.i.i394
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_126
.LBB240_124:                            # %if.then.i392.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_126:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i399
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.27.234(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_127
# %bb.128:                              # %if.else.i.i405
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_129
.LBB240_127:
	leaq	.L.str.274(%rip), %rsi
.LBB240_129:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i407
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_130:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP7_cl_memEEET_PvPKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL17clRetainMemObjectE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.28.235(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_138
# %bb.131:                              # %if.then.i412
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_132
# %bb.133:                              # %if.then6.i.i414
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_134
.LBB240_132:                            # %if.then.i412.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_134:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i419
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.28.235(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_135
# %bb.136:                              # %if.else.i.i425
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_137
.LBB240_135:
	leaq	.L.str.274(%rip), %rsi
.LBB240_137:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i427
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_138:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP7_cl_memEEET_PvPKcb.exit428
	movq	_ZN6Halide7Runtime8Internal6OpenCL18clReleaseMemObjectE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.29.236(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_146
# %bb.139:                              # %if.then.i433
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_140
# %bb.141:                              # %if.then6.i.i435
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_142
.LBB240_140:                            # %if.then.i433.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_142:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i440
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.29.236(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_143
# %bb.144:                              # %if.else.i.i446
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_145
.LBB240_143:
	leaq	.L.str.274(%rip), %rsi
.LBB240_145:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i448
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_146:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP11_cl_contextyjjP16_cl_image_formatPjEEET_PvPKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL26clGetSupportedImageFormatsE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.30.237(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_154
# %bb.147:                              # %if.then.i453
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_148
# %bb.149:                              # %if.then6.i.i455
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_150
.LBB240_148:                            # %if.then.i453.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_150:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i460
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.30.237(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_151
# %bb.152:                              # %if.else.i.i466
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_153
.LBB240_151:
	leaq	.L.str.274(%rip), %rsi
.LBB240_153:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i468
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_154:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP7_cl_memjmPvPmEEET_S6_PKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL18clGetMemObjectInfoE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.31.238(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_162
# %bb.155:                              # %if.then.i473
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_156
# %bb.157:                              # %if.then6.i.i475
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_158
.LBB240_156:                            # %if.then.i473.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_158:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i480
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.31.238(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_159
# %bb.160:                              # %if.else.i.i486
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_161
.LBB240_159:
	leaq	.L.str.274(%rip), %rsi
.LBB240_161:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i488
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_162:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP7_cl_memjmPvPmEEET_S6_PKcb.exit489
	movq	_ZN6Halide7Runtime8Internal6OpenCL14clGetImageInfoE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.32.239(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_170
# %bb.163:                              # %if.then.i494
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_164
# %bb.165:                              # %if.then6.i.i496
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_166
.LBB240_164:                            # %if.then.i494.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_166:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i501
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.32.239(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_167
# %bb.168:                              # %if.else.i.i507
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_169
.LBB240_167:
	leaq	.L.str.274(%rip), %rsi
.LBB240_169:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i509
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_170:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP7_cl_memPFvS5_PvES6_EEET_S6_PKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL32clSetMemObjectDestructorCallbackE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.33.240(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_178
# %bb.171:                              # %if.then.i514
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_172
# %bb.173:                              # %if.then6.i.i516
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_174
.LBB240_172:                            # %if.then.i514.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_174:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i521
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.33.240(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_175
# %bb.176:                              # %if.else.i.i527
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_177
.LBB240_175:
	leaq	.L.str.274(%rip), %rsi
.LBB240_177:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i529
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_178:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFP11_cl_programP11_cl_contextjPPKcPKmPiEEET_PvS9_b.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL25clCreateProgramWithSourceE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.34.241(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_186
# %bb.179:                              # %if.then.i534
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_180
# %bb.181:                              # %if.then6.i.i536
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_182
.LBB240_180:                            # %if.then.i534.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_182:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i541
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.34.241(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_183
# %bb.184:                              # %if.else.i.i547
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_185
.LBB240_183:
	leaq	.L.str.274(%rip), %rsi
.LBB240_185:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i549
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_186:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP11_cl_programEEET_PvPKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL15clRetainProgramE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.35.242(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_194
# %bb.187:                              # %if.then.i554
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_188
# %bb.189:                              # %if.then6.i.i556
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_190
.LBB240_188:                            # %if.then.i554.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_190:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i561
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.35.242(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_191
# %bb.192:                              # %if.else.i.i567
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_193
.LBB240_191:
	leaq	.L.str.274(%rip), %rsi
.LBB240_193:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i569
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_194:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP11_cl_programEEET_PvPKcb.exit570
	movq	_ZN6Halide7Runtime8Internal6OpenCL16clReleaseProgramE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.36.243(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_202
# %bb.195:                              # %if.then.i575
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_196
# %bb.197:                              # %if.then6.i.i577
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_198
.LBB240_196:                            # %if.then.i575.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_198:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i582
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.36.243(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_199
# %bb.200:                              # %if.else.i.i588
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_201
.LBB240_199:
	leaq	.L.str.274(%rip), %rsi
.LBB240_201:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i590
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_202:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP11_cl_programjPKP13_cl_device_idPKcPFvS5_PvESC_EEET_SC_SB_b.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL14clBuildProgramE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.37.244(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_210
# %bb.203:                              # %if.then.i595
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_204
# %bb.205:                              # %if.then6.i.i597
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_206
.LBB240_204:                            # %if.then.i595.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_206:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i602
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.37.244(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_207
# %bb.208:                              # %if.else.i.i608
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_209
.LBB240_207:
	leaq	.L.str.274(%rip), %rsi
.LBB240_209:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i610
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_210:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP11_cl_programP13_cl_device_idjmPvPmEEET_S8_PKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL21clGetProgramBuildInfoE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.38.245(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_218
# %bb.211:                              # %if.then.i615
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_212
# %bb.213:                              # %if.then6.i.i617
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_214
.LBB240_212:                            # %if.then.i615.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_214:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i622
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.38.245(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_215
# %bb.216:                              # %if.else.i.i628
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_217
.LBB240_215:
	leaq	.L.str.274(%rip), %rsi
.LBB240_217:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i630
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_218:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFP10_cl_kernelP11_cl_programPKcPiEEET_PvS9_b.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL14clCreateKernelE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.39.246(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_226
# %bb.219:                              # %if.then.i635
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_220
# %bb.221:                              # %if.then6.i.i637
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_222
.LBB240_220:                            # %if.then.i635.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_222:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i642
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.39.246(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_223
# %bb.224:                              # %if.else.i.i648
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_225
.LBB240_223:
	leaq	.L.str.274(%rip), %rsi
.LBB240_225:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i650
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_226:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP10_cl_kernelEEET_PvPKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL14clRetainKernelE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.40.247(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_234
# %bb.227:                              # %if.then.i655
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_228
# %bb.229:                              # %if.then6.i.i657
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_230
.LBB240_228:                            # %if.then.i655.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_230:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i662
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.40.247(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_231
# %bb.232:                              # %if.else.i.i668
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_233
.LBB240_231:
	leaq	.L.str.274(%rip), %rsi
.LBB240_233:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i670
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_234:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP10_cl_kernelEEET_PvPKcb.exit671
	movq	_ZN6Halide7Runtime8Internal6OpenCL15clReleaseKernelE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.41.248(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_242
# %bb.235:                              # %if.then.i676
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_236
# %bb.237:                              # %if.then6.i.i678
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_238
.LBB240_236:                            # %if.then.i676.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_238:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i683
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.41.248(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_239
# %bb.240:                              # %if.else.i.i689
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_241
.LBB240_239:
	leaq	.L.str.274(%rip), %rsi
.LBB240_241:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i691
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_242:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP10_cl_kerneljmPKvEEET_PvPKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL14clSetKernelArgE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.42.249(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_250
# %bb.243:                              # %if.then.i696
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_244
# %bb.245:                              # %if.then6.i.i698
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_246
.LBB240_244:                            # %if.then.i696.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_246:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i703
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.42.249(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_247
# %bb.248:                              # %if.else.i.i709
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_249
.LBB240_247:
	leaq	.L.str.274(%rip), %rsi
.LBB240_249:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i711
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_250:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP17_cl_command_queueEEET_PvPKcb.exit712
	movq	_ZN6Halide7Runtime8Internal6OpenCL7clFlushE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.43.250(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_258
# %bb.251:                              # %if.then.i717
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_252
# %bb.253:                              # %if.then6.i.i719
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_254
.LBB240_252:                            # %if.then.i717.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_254:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i724
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.43.250(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_255
# %bb.256:                              # %if.else.i.i730
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_257
.LBB240_255:
	leaq	.L.str.274(%rip), %rsi
.LBB240_257:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i732
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_258:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP17_cl_command_queueEEET_PvPKcb.exit733
	movq	_ZN6Halide7Runtime8Internal6OpenCL8clFinishE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.44.251(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_266
# %bb.259:                              # %if.then.i738
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_260
# %bb.261:                              # %if.then6.i.i740
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_262
.LBB240_260:                            # %if.then.i738.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_262:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i745
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.44.251(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_263
# %bb.264:                              # %if.else.i.i751
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_265
.LBB240_263:
	leaq	.L.str.274(%rip), %rsi
.LBB240_265:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i753
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_266:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP17_cl_command_queueP7_cl_memjmmPvjPKP9_cl_eventPSA_EEET_S8_PKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL19clEnqueueReadBufferE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.45.252(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_274
# %bb.267:                              # %if.then.i758
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_268
# %bb.269:                              # %if.then6.i.i760
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_270
.LBB240_268:                            # %if.then.i758.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_270:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i765
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.45.252(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_271
# %bb.272:                              # %if.else.i.i771
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_273
.LBB240_271:
	leaq	.L.str.274(%rip), %rsi
.LBB240_273:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i773
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_274:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP17_cl_command_queueP7_cl_memjPKmS9_S9_mmmmPvjPKP9_cl_eventPSC_EEET_SA_PKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL23clEnqueueReadBufferRectE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.46.253(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_282
# %bb.275:                              # %if.then.i778
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_276
# %bb.277:                              # %if.then6.i.i780
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_278
.LBB240_276:                            # %if.then.i778.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_278:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i785
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.46.253(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_279
# %bb.280:                              # %if.else.i.i791
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_281
.LBB240_279:
	leaq	.L.str.274(%rip), %rsi
.LBB240_281:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i793
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_282:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP17_cl_command_queueP7_cl_memjmmPKvjPKP9_cl_eventPSB_EEET_PvPKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL20clEnqueueWriteBufferE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.47.254(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_290
# %bb.283:                              # %if.then.i798
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_284
# %bb.285:                              # %if.then6.i.i800
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_286
.LBB240_284:                            # %if.then.i798.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_286:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i805
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.47.254(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_287
# %bb.288:                              # %if.else.i.i811
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_289
.LBB240_287:
	leaq	.L.str.274(%rip), %rsi
.LBB240_289:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i813
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_290:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP17_cl_command_queueP7_cl_memjPKmS9_S9_mmmmPKvjPKP9_cl_eventPSD_EEET_PvPKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL24clEnqueueWriteBufferRectE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.48.255(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_298
# %bb.291:                              # %if.then.i818
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_292
# %bb.293:                              # %if.then6.i.i820
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_294
.LBB240_292:                            # %if.then.i818.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_294:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i825
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.48.255(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_295
# %bb.296:                              # %if.else.i.i831
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_297
.LBB240_295:
	leaq	.L.str.274(%rip), %rsi
.LBB240_297:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i833
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_298:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP17_cl_command_queueP7_cl_memS7_mmmjPKP9_cl_eventPS9_EEET_PvPKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL19clEnqueueCopyBufferE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.49.256(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_306
# %bb.299:                              # %if.then.i838
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_300
# %bb.301:                              # %if.then6.i.i840
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_302
.LBB240_300:                            # %if.then.i838.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_302:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i845
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.49.256(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_303
# %bb.304:                              # %if.else.i.i851
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_305
.LBB240_303:
	leaq	.L.str.274(%rip), %rsi
.LBB240_305:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i853
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_306:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP17_cl_command_queueP7_cl_memjPKmS9_mmPvjPKP9_cl_eventPSC_EEET_SA_PKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL18clEnqueueReadImageE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.50.257(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_314
# %bb.307:                              # %if.then.i858
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_308
# %bb.309:                              # %if.then6.i.i860
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_310
.LBB240_308:                            # %if.then.i858.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_310:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i865
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.50.257(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_311
# %bb.312:                              # %if.else.i.i871
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_313
.LBB240_311:
	leaq	.L.str.274(%rip), %rsi
.LBB240_313:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i873
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_314:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP17_cl_command_queueP7_cl_memjPKmS9_mmPKvjPKP9_cl_eventPSD_EEET_PvPKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL19clEnqueueWriteImageE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.51.258(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_322
# %bb.315:                              # %if.then.i878
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_316
# %bb.317:                              # %if.then6.i.i880
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_318
.LBB240_316:                            # %if.then.i878.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_318:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i885
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.51.258(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_319
# %bb.320:                              # %if.else.i.i891
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_321
.LBB240_319:
	leaq	.L.str.274(%rip), %rsi
.LBB240_321:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i893
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_322:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFPvP17_cl_command_queueP7_cl_memjymmjPKP9_cl_eventPSA_PiEEET_S4_PKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL18clEnqueueMapBufferE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.52.259(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_330
# %bb.323:                              # %if.then.i898
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_324
# %bb.325:                              # %if.then6.i.i900
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_326
.LBB240_324:                            # %if.then.i898.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_326:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i905
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.52.259(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_327
# %bb.328:                              # %if.else.i.i911
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_329
.LBB240_327:
	leaq	.L.str.274(%rip), %rsi
.LBB240_329:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i913
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_330:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFPvP17_cl_command_queueP7_cl_memjyPKmSA_PmSB_jPKP9_cl_eventPSD_PiEEET_S4_PKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL17clEnqueueMapImageE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.53.260(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_338
# %bb.331:                              # %if.then.i918
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_332
# %bb.333:                              # %if.then6.i.i920
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_334
.LBB240_332:                            # %if.then.i918.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_334:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i925
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.53.260(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_335
# %bb.336:                              # %if.else.i.i931
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_337
.LBB240_335:
	leaq	.L.str.274(%rip), %rsi
.LBB240_337:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i933
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_338:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP17_cl_command_queueP7_cl_memPvjPKP9_cl_eventPSA_EEET_S8_PKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL23clEnqueueUnmapMemObjectE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	leaq	.L.str.54.261(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_opencl_get_symbol@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.LBB240_346
# %bb.339:                              # %if.then.i938
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB240_340
# %bb.341:                              # %if.then6.i.i940
	leaq	1023(%rbx), %r12
	movb	$0, 1023(%rbx)
	leaq	.L.str.273(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r12, %rsi
	jmp	.LBB240_342
.LBB240_340:                            # %if.then.i938.split
	leaq	.L.str.273(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB240_342:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit.i945
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	leaq	.L.str.54.261(%rip), %rdx
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%r12, %rsi
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB240_343
# %bb.344:                              # %if.else.i.i951
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB240_345
.LBB240_343:
	leaq	.L.str.274(%rip), %rsi
.LBB240_345:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit.i953
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB240_346:                            # %_ZN6Halide7Runtime8Internal6OpenCL13get_cl_symbolIPFiP17_cl_command_queueP10_cl_kerneljPKmS9_S9_jPKP9_cl_eventPSB_EEET_PvPKcb.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL22clEnqueueNDRangeKernelE@GOTPCREL(%rip), %rax
	movq	%r15, (%rax)
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end240:
	.size	_ZN6Halide7Runtime8Internal6OpenCL14load_libopenclEPv, .Lfunc_end240-_ZN6Halide7Runtime8Internal6OpenCL14load_libopenclEPv
                                        # -- End function
	.section	.text.halide_acquire_cl_context,"ax",@progbits
	.weak	halide_acquire_cl_context       # -- Begin function halide_acquire_cl_context
	.p2align	4, 0x90
	.type	halide_acquire_cl_context,@function
halide_acquire_cl_context:              # @halide_acquire_cl_context
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movl	%ecx, %r12d
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %r13
	testq	%rsi, %rsi
	je	.LBB241_1
# %bb.2:                                # %do.body1
	testq	%r14, %r14
	je	.LBB241_3
.LBB241_4:                              # %while.cond.preheader
	movq	_ZN6Halide7Runtime8Internal6OpenCL11thread_lockE@GOTPCREL(%rip), %rbx
	.p2align	4, 0x90
.LBB241_5:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movb	$1, %al
	xchgb	%al, (%rbx)
	testb	%al, %al
	jne	.LBB241_5
# %bb.6:                                # %do.end17
	movq	_ZN6Halide7Runtime8Internal6OpenCL7contextE@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.LBB241_10
# %bb.7:                                # %do.end17
	testb	%r12b, %r12b
	je	.LBB241_10
# %bb.8:                                # %if.then20
	movq	_ZN6Halide7Runtime8Internal6OpenCL7contextE@GOTPCREL(%rip), %r12
	movq	_ZN6Halide7Runtime8Internal6OpenCL13command_queueE@GOTPCREL(%rip), %rdx
	movq	%r13, %rdi
	movq	%r12, %rsi
	callq	_ZN6Halide7Runtime8Internal6OpenCL21create_opencl_contextEPvPP11_cl_contextPP17_cl_command_queue@PLT
	testl	%eax, %eax
	je	.LBB241_9
# %bb.12:                               # %if.then22
	movb	$0, (%rbx)
	jmp	.LBB241_11
.LBB241_1:                              # %if.then
	leaq	.L.str.55.203(%rip), %rsi
	movq	%r13, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
	testq	%r14, %r14
	jne	.LBB241_4
.LBB241_3:                              # %if.then3
	leaq	.L.str.56.204(%rip), %rsi
	movq	%r13, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
	jmp	.LBB241_4
.LBB241_9:                              # %if.then20.if.end24_crit_edge
	movq	(%r12), %rax
.LBB241_10:                             # %if.end24
	movq	%rax, (%r15)
	movq	_ZN6Halide7Runtime8Internal6OpenCL13command_queueE@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, (%r14)
	xorl	%eax, %eax
.LBB241_11:                             # %return
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end241:
	.size	halide_acquire_cl_context, .Lfunc_end241-halide_acquire_cl_context
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev,"ax",@progbits
	.p2align	4, 0x90                         # -- Begin function _ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev
	.type	_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev,@function
_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev: # @_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	%rdi, %rbx
	movq	(%rdi), %rsi
	leaq	24(%rdi), %r14
	testq	%rsi, %rsi
	je	.LBB242_1
# %bb.2:                                # %if.else
	movq	8(%rbx), %rdx
	movq	24(%rbx), %rdi
	subq	%rsi, %rdx
	incq	%rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	(%rbx), %rsi
	movq	(%r14), %rdi
	callq	halide_error@PLT
	cmpb	$0, 32(%rbx)
	je	.LBB242_4
.LBB242_5:                              # %if.then5
	movq	(%rbx), %rdi
	popq	%rbx
	popq	%r14
	popq	%rbp
	jmp	free@PLT                        # TAILCALL
.LBB242_1:                              # %if.then
	leaq	.L.str.274(%rip), %rsi
	movq	(%r14), %rdi
	callq	halide_error@PLT
	cmpb	$0, 32(%rbx)
	jne	.LBB242_5
.LBB242_4:                              # %if.end7
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end242:
	.size	_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev, .Lfunc_end242-_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev
                                        # -- End function
	.section	.text.halide_release_cl_context,"ax",@progbits
	.weak	halide_release_cl_context       # -- Begin function halide_release_cl_context
	.p2align	4, 0x90
	.type	halide_release_cl_context,@function
halide_release_cl_context:              # @halide_release_cl_context
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal6OpenCL11thread_lockE@GOTPCREL(%rip), %rax
	movb	$0, (%rax)
	xorl	%eax, %eax
	popq	%rbp
	retq
.Lfunc_end243:
	.size	halide_release_cl_context, .Lfunc_end243-halide_release_cl_context
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal6OpenCL21create_opencl_contextEPvPP11_cl_contextPP17_cl_command_queue,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal6OpenCL21create_opencl_contextEPvPP11_cl_contextPP17_cl_command_queue # -- Begin function _ZN6Halide7Runtime8Internal6OpenCL21create_opencl_contextEPvPP11_cl_contextPP17_cl_command_queue
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal6OpenCL21create_opencl_contextEPvPP11_cl_contextPP17_cl_command_queue,@function
_ZN6Halide7Runtime8Internal6OpenCL21create_opencl_contextEPvPP11_cl_contextPP17_cl_command_queue: # @_ZN6Halide7Runtime8Internal6OpenCL21create_opencl_contextEPvPP11_cl_contextPP17_cl_command_queue
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$1192, %rsp                     # imm = 0x4A8
	movq	%rdx, %rbx
	movq	%rsi, %r12
	movq	%rdi, %r14
	testq	%rsi, %rsi
	je	.LBB244_2
# %bb.1:                                # %land.lhs.true
	cmpq	$0, (%r12)
	je	.LBB244_3
.LBB244_2:                              # %if.then
	leaq	.L.str.68.205(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
.LBB244_3:                              # %do.body4
	testq	%rbx, %rbx
	je	.LBB244_5
# %bb.4:                                # %land.lhs.true6
	cmpq	$0, (%rbx)
	je	.LBB244_6
.LBB244_5:                              # %if.then8
	leaq	.L.str.69.206(%rip), %rsi
	movq	%r14, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
.LBB244_6:                              # %do.end10
	movq	_ZN6Halide7Runtime8Internal6OpenCL16clGetPlatformIDsE@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.LBB244_10
# %bb.7:                                # %if.end14
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	leaq	-200(%rbp), %rsi
	leaq	-48(%rbp), %rdx
	movl	$4, %edi
	callq	*%rax
	movl	%eax, -44(%rbp)
	testl	%eax, %eax
	je	.LBB244_12
# %bb.8:                                # %if.then17
	movl	%eax, %r13d
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB244_19
# %bb.9:                                # %if.then6.i292
	leaq	1023(%rbx), %r15
	movb	$0, 1023(%rbx)
	leaq	.L.str.71.208(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r15, %rsi
	jmp	.LBB244_20
.LBB244_10:                             # %if.then12
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB244_24
# %bb.11:                               # %if.else.i
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.70.207(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB244_25
.LBB244_12:                             # %if.end24
	movq	%r14, %rdi
	callq	halide_opencl_get_platform_name@PLT
	testq	%rax, %rax
	movq	%r14, -64(%rbp)                 # 8-byte Spill
	movq	%rbx, -144(%rbp)                # 8-byte Spill
	je	.LBB244_27
# %bb.13:                               # %for.cond.preheader
	cmpl	$0, -48(%rbp)
	je	.LBB244_34
# %bb.14:                               # %for.body.preheader
	movq	%rax, %r13
	xorl	%r14d, %r14d
	movq	_ZN6Halide7Runtime8Internal6OpenCL17clGetPlatformInfoE@GOTPCREL(%rip), %r15
	leaq	-1224(%rbp), %rbx
	jmp	.LBB244_16
	.p2align	4, 0x90
.LBB244_15:                             # %for.inc
                                        #   in Loop: Header=BB244_16 Depth=1
	incq	%r14
	movl	-48(%rbp), %eax
	cmpq	%rax, %r14
	jae	.LBB244_34
.LBB244_16:                             # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-200(%rbp,%r14,8), %rdi
	movl	$256, %edx                      # imm = 0x100
	movl	$2306, %esi                     # imm = 0x902
	movq	%rbx, %rcx
	xorl	%r8d, %r8d
	callq	*(%r15)
	movl	%eax, -44(%rbp)
	testl	%eax, %eax
	jne	.LBB244_15
# %bb.17:                               # %if.end33
                                        #   in Loop: Header=BB244_16 Depth=1
	movq	%rbx, %rdi
	movq	%r13, %rsi
	callq	strstr@PLT
	testq	%rax, %rax
	je	.LBB244_15
# %bb.18:                               # %cleanup
	movq	-200(%rbp,%r14,8), %r15
	jmp	.LBB244_29
.LBB244_19:                             # %if.then17.split
	leaq	.L.str.71.208(%rip), %rdx
	xorl	%r15d, %r15d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB244_20:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit295
	callq	halide_string_to_string@PLT
	movq	%rax, %r12
	movl	%r13d, %edi
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	%r12, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.72.209(%rip), %rdx
	movq	%rax, %rdi
	movq	%r15, %rsi
	callq	halide_string_to_string@PLT
	movslq	%r13d, %rdx
	movq	%rax, %rdi
	movq	%r15, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB244_22
.LBB244_21:                             # %if.else.i321
	subq	%rbx, %rax
	incq	%rax
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB244_23
.LBB244_24:                             # %if.then.i
	leaq	.L.str.70.207(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB244_25:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
.LBB244_26:                             # %return
	callq	free@PLT
	movl	$-1, %r13d
	jmp	.LBB244_38
.LBB244_27:                             # %if.else
	cmpl	$0, -48(%rbp)
	je	.LBB244_34
# %bb.28:
	movq	-200(%rbp), %r15
.LBB244_29:                             # %if.end53
	testq	%r15, %r15
	je	.LBB244_34
# %bb.30:                               # %if.end58
	movq	-64(%rbp), %r14                 # 8-byte Reload
	movq	%r14, %rdi
	callq	halide_opencl_get_device_type@PLT
	testq	%rax, %rax
	je	.LBB244_40
# %bb.31:                               # %land.lhs.true61
	movq	%rax, %rbx
	cmpb	$0, (%rax)
	je	.LBB244_40
# %bb.32:                               # %if.then63
	movq	%r15, -72(%rbp)                 # 8-byte Spill
	leaq	.L.str.75.211(%rip), %rsi
	movq	%rbx, %rdi
	callq	strstr@PLT
	xorl	%r14d, %r14d
	movq	%rax, -136(%rbp)                # 8-byte Spill
	testq	%rax, %rax
	setne	%r14b
	leaq	(%r14,%r14), %r15
	leaq	.L.str.76.212(%rip), %rsi
	movq	%rbx, %rdi
	callq	strstr@PLT
	movq	%rax, -128(%rbp)                # 8-byte Spill
	testq	%rax, %rax
	leaq	4(%r14,%r14), %r13
	cmoveq	%r15, %r13
	leaq	.L.str.77(%rip), %rsi
	movq	%rbx, %rdi
	callq	strstr@PLT
	testq	%rax, %rax
	je	.LBB244_39
# %bb.33:
	orq	$8, %r13
	movq	-64(%rbp), %r14                 # 8-byte Reload
	movq	-72(%rbp), %r15                 # 8-byte Reload
	jmp	.LBB244_41
.LBB244_34:                             # %if.then55
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB244_36
# %bb.35:                               # %if.else.i358
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.74.210(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	-64(%rbp), %r14                 # 8-byte Reload
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB244_37
.LBB244_36:                             # %if.then.i348
	leaq	.L.str.74.210(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
	movq	-64(%rbp), %r14                 # 8-byte Reload
.LBB244_37:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit366
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-32, %r13d
	jmp	.LBB244_38
.LBB244_39:                             # %if.end78
	movq	-128(%rbp), %rax                # 8-byte Reload
	orq	-136(%rbp), %rax                # 8-byte Folded Reload
	movq	-64(%rbp), %r14                 # 8-byte Reload
	movq	-72(%rbp), %r15                 # 8-byte Reload
	jne	.LBB244_41
.LBB244_40:                             # %if.end78.thread
	movl	$4294967295, %r13d              # imm = 0xFFFFFFFF
.LBB244_41:                             # %if.end78.thread558
	movl	$0, -52(%rbp)
	movq	_ZN6Halide7Runtime8Internal6OpenCL14clGetDeviceIDsE@GOTPCREL(%rip), %rax
	leaq	-1224(%rbp), %rcx
	leaq	-52(%rbp), %r8
	movq	%r15, %rdi
	movq	%r13, %rsi
	movl	$128, %edx
	callq	*(%rax)
	movl	%eax, -44(%rbp)
	testl	%eax, %eax
	je	.LBB244_44
# %bb.42:                               # %if.then85
	movl	%eax, %r13d
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB244_55
# %bb.43:                               # %if.then6.i375
	leaq	1023(%rbx), %r15
	movb	$0, 1023(%rbx)
	leaq	.L.str.78(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r15, %rsi
	jmp	.LBB244_56
.LBB244_44:                             # %if.end90
	movq	%r14, %rdi
	callq	halide_get_gpu_device@PLT
	movl	%eax, %edx
	notl	%edx
	movl	-52(%rbp), %ecx
	movl	%ecx, %esi
	xorl	$1, %esi
	xorl	%ebx, %ebx
	orl	%edx, %esi
	cmovnel	%eax, %ebx
	je	.LBB244_50
# %bb.45:                               # %if.end90
	cmpl	$-1, %eax
	jne	.LBB244_50
# %bb.46:                               # %for.cond102.preheader
	testl	%ecx, %ecx
	je	.LBB244_58
# %bb.47:                               # %for.body105.preheader
	movq	%r15, -72(%rbp)                 # 8-byte Spill
	movl	$-1, %ebx
	xorl	%r13d, %r13d
	xorl	%r14d, %r14d
.LBB244_48:                             # %for.body105
                                        # =>This Inner Loop Header: Depth=1
	movl	%ebx, %r15d
	movq	-1224(%rbp,%r13,8), %rdi
	movl	$0, -112(%rbp)
	movl	$4, %edx
	movl	$4098, %esi                     # imm = 0x1002
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	_ZN6Halide7Runtime8Internal6OpenCL15clGetDeviceInfoE@GOTPCREL(%rip), %rax
	callq	*(%rax)
	movl	-112(%rbp), %ecx
	cmpl	%r14d, %ecx
	movl	%r13d, %ebx
	cmovbl	%r15d, %ebx
	cmovbl	%r14d, %ecx
	testl	%eax, %eax
	cmovnel	%r15d, %ebx
	cmovel	%ecx, %r14d
	movl	%eax, -44(%rbp)
	incq	%r13
	movl	-52(%rbp), %ecx
	cmpq	%rcx, %r13
	jb	.LBB244_48
# %bb.49:
	movq	-64(%rbp), %r14                 # 8-byte Reload
	movq	-72(%rbp), %r15                 # 8-byte Reload
.LBB244_50:                             # %if.end138
	testl	%ebx, %ebx
	js	.LBB244_59
# %bb.51:                               # %if.end138
	cmpl	%ecx, %ebx
	jge	.LBB244_59
# %bb.52:                               # %if.end145
	movl	%ebx, %eax
	movq	-1224(%rbp,%rax,8), %rax
	movq	%rax, -120(%rbp)
	movq	$4228, -168(%rbp)               # imm = 0x1084
	movq	%r15, -160(%rbp)
	movq	$0, -152(%rbp)
	movq	_ZN6Halide7Runtime8Internal6OpenCL15clCreateContextE@GOTPCREL(%rip), %rax
	leaq	-168(%rbp), %rdi
	leaq	-120(%rbp), %rdx
	leaq	-44(%rbp), %r9
	movl	$1, %esi
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	*(%rax)
	movq	%rax, (%r12)
	movl	-44(%rbp), %edi
	testl	%edi, %edi
	je	.LBB244_63
# %bb.53:                               # %if.then155
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	%r14, -88(%rbp)
	movb	$1, -80(%rbp)
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, -112(%rbp)
	testq	%rax, %rax
	je	.LBB244_66
# %bb.54:                               # %if.then6.i456
	movq	%rax, %rbx
	addq	$1023, %rbx                     # imm = 0x3FF
	movb	$0, 1023(%rax)
	leaq	.L.str.87(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	jmp	.LBB244_67
.LBB244_55:                             # %if.then85.split
	leaq	.L.str.78(%rip), %rdx
	xorl	%r15d, %r15d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB244_56:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit378
	callq	halide_string_to_string@PLT
	movq	%rax, %r12
	movl	%r13d, %edi
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	%r12, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	jne	.LBB244_21
.LBB244_22:
	leaq	.L.str.274(%rip), %rsi
.LBB244_23:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit329
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
.LBB244_38:                             # %return
	movl	%r13d, %eax
	addq	$1192, %rsp                     # imm = 0x4A8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB244_58:
	movl	$-1, %ebx
.LBB244_59:                             # %if.then141
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r12
	testq	%rax, %rax
	je	.LBB244_61
# %bb.60:                               # %if.else.i439
	leaq	1023(%r12), %r15
	movb	$0, 1023(%r12)
	leaq	.L.str.85(%rip), %rdx
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	halide_string_to_string@PLT
	movslq	%ebx, %rdx
	movq	%rax, %rdi
	movq	%r15, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	subq	%r12, %rax
	leaq	1(%rax), %rdx
	movq	%r14, %rdi
	movq	%r12, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r12, %rsi
	jmp	.LBB244_62
.LBB244_61:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit418.thread
	leaq	.L.str.85(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	movslq	%ebx, %rdx
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB244_62:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit447
	movq	%r14, %rdi
	callq	halide_error@PLT
	movq	%r12, %rdi
	jmp	.LBB244_26
.LBB244_63:                             # %if.else165
	movq	_ZN6Halide7Runtime8Internal6OpenCL20clCreateCommandQueueE@GOTPCREL(%rip), %rbx
	movq	-120(%rbp), %rsi
	leaq	-44(%rbp), %rcx
	movq	%rax, %rdi
	xorl	%edx, %edx
	callq	*(%rbx)
	movq	-144(%rbp), %rcx                # 8-byte Reload
	movq	%rax, (%rcx)
	movl	-44(%rbp), %edi
	testl	%edi, %edi
	je	.LBB244_71
# %bb.64:                               # %if.then174
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	%r14, -88(%rbp)
	movb	$1, -80(%rbp)
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, -112(%rbp)
	testq	%rax, %rax
	je	.LBB244_68
# %bb.65:                               # %if.then6.i481
	movq	%rax, %rbx
	addq	$1023, %rbx                     # imm = 0x3FF
	movb	$0, 1023(%rax)
	leaq	.L.str.90(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	jmp	.LBB244_69
.LBB244_66:                             # %if.then155.split
	leaq	.L.str.87(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB244_67:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit459
	callq	halide_string_to_string@PLT
	movq	%rax, %r14
	movq	%rbx, -96(%rbp)
	movl	-44(%rbp), %edi
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.88(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movslq	-44(%rbp), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movl	$1, %ecx
	callq	halide_int64_to_string@PLT
	jmp	.LBB244_70
.LBB244_68:                             # %if.then174.split
	leaq	.L.str.90(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB244_69:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit484
	callq	halide_string_to_string@PLT
	movq	%rax, %r14
	movq	%rbx, -96(%rbp)
	movl	-44(%rbp), %edi
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_string_to_string@PLT
.LBB244_70:                             # %cleanup187
	movq	%rax, -104(%rbp)
	leaq	-112(%rbp), %rdi
	callq	_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev
.LBB244_71:                             # %cleanup187
	movl	-44(%rbp), %r13d
	jmp	.LBB244_38
.Lfunc_end244:
	.size	_ZN6Halide7Runtime8Internal6OpenCL21create_opencl_contextEPvPP11_cl_contextPP17_cl_command_queue, .Lfunc_end244-_ZN6Halide7Runtime8Internal6OpenCL21create_opencl_contextEPvPP11_cl_contextPP17_cl_command_queue
                                        # -- End function
	.section	.text.halide_opencl_get_platform_name,"ax",@progbits
	.weak	halide_opencl_get_platform_name # -- Begin function halide_opencl_get_platform_name
	.p2align	4, 0x90
	.type	halide_opencl_get_platform_name,@function
halide_opencl_get_platform_name:        # @halide_opencl_get_platform_name
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	movq	_ZN6Halide7Runtime8Internal6OpenCL18platform_name_lockE@GOTPCREL(%rip), %rbx
	.p2align	4, 0x90
.LBB245_1:                              # %while.cond.i
                                        # =>This Inner Loop Header: Depth=1
	movb	$1, %al
	xchgb	%al, (%rbx)
	testb	%al, %al
	jne	.LBB245_1
# %bb.2:                                # %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL25platform_name_initializedE@GOTPCREL(%rip), %r15
	cmpb	$0, (%r15)
	jne	.LBB245_6
# %bb.3:                                # %if.then.i
	leaq	.L.str.269(%rip), %rdi
	callq	getenv@PLT
	movq	_ZN6Halide7Runtime8Internal6OpenCL13platform_nameE@GOTPCREL(%rip), %r14
	testq	%rax, %rax
	je	.LBB245_5
# %bb.4:                                # %if.then.i.i
	movl	$256, %edx                      # imm = 0x100
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	strncpy@PLT
	addq	$255, %r14
.LBB245_5:                              # %_ZN12_GLOBAL__N_140halide_opencl_set_platform_name_internalEPKc.exit.i
	movb	$0, (%r14)
	movb	$1, (%r15)
.LBB245_6:                              # %_ZN12_GLOBAL__N_140halide_opencl_get_platform_name_internalEPv.exit
	movb	$0, (%rbx)
	movq	_ZN6Halide7Runtime8Internal6OpenCL13platform_nameE@GOTPCREL(%rip), %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end245:
	.size	halide_opencl_get_platform_name, .Lfunc_end245-halide_opencl_get_platform_name
                                        # -- End function
	.section	.text.halide_opencl_get_device_type,"ax",@progbits
	.weak	halide_opencl_get_device_type   # -- Begin function halide_opencl_get_device_type
	.p2align	4, 0x90
	.type	halide_opencl_get_device_type,@function
halide_opencl_get_device_type:          # @halide_opencl_get_device_type
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	movq	_ZN6Halide7Runtime8Internal6OpenCL16device_type_lockE@GOTPCREL(%rip), %rbx
	.p2align	4, 0x90
.LBB246_1:                              # %while.cond.i
                                        # =>This Inner Loop Header: Depth=1
	movb	$1, %al
	xchgb	%al, (%rbx)
	testb	%al, %al
	jne	.LBB246_1
# %bb.2:                                # %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL23device_type_initializedE@GOTPCREL(%rip), %r15
	cmpb	$0, (%r15)
	jne	.LBB246_6
# %bb.3:                                # %if.then.i
	leaq	.L.str.270(%rip), %rdi
	callq	getenv@PLT
	movq	_ZN6Halide7Runtime8Internal6OpenCL11device_typeE@GOTPCREL(%rip), %r14
	testq	%rax, %rax
	je	.LBB246_5
# %bb.4:                                # %if.then.i.i
	movl	$256, %edx                      # imm = 0x100
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	strncpy@PLT
	addq	$255, %r14
.LBB246_5:                              # %_ZN12_GLOBAL__N_138halide_opencl_set_device_type_internalEPKc.exit.i
	movb	$0, (%r14)
	movb	$1, (%r15)
.LBB246_6:                              # %_ZN12_GLOBAL__N_138halide_opencl_get_device_type_internalEPv.exit
	movb	$0, (%rbx)
	movq	_ZN6Halide7Runtime8Internal6OpenCL11device_typeE@GOTPCREL(%rip), %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end246:
	.size	halide_opencl_get_device_type, .Lfunc_end246-halide_opencl_get_device_type
                                        # -- End function
	.section	.text.halide_opencl_get_symbol,"ax",@progbits
	.weak	halide_opencl_get_symbol        # -- Begin function halide_opencl_get_symbol
	.p2align	4, 0x90
	.type	halide_opencl_get_symbol,@function
halide_opencl_get_symbol:               # @halide_opencl_get_symbol
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	%rsi, %rbx
	movq	_ZN6Halide7Runtime8Internal6OpenCL10lib_openclE@GOTPCREL(%rip), %r14
	movq	(%r14), %rdi
	callq	halide_get_library_symbol@PLT
	testq	%rax, %rax
	je	.LBB247_1
# %bb.4:                                # %cleanup13
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.LBB247_1:                              # %if.end
	leaq	.L.str.1.262(%rip), %rdi
	callq	halide_load_library@PLT
	movq	%rax, (%r14)
	testq	%rax, %rax
	jne	.LBB247_3
# %bb.2:                                # %for.body.for.body_crit_edge.lr.ph
	leaq	.L.str.2.263(%rip), %rdi
	callq	halide_load_library@PLT
	movq	%rax, (%r14)
.LBB247_3:                              # %cleanup8
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_get_library_symbol@PLT
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end247:
	.size	halide_opencl_get_symbol, .Lfunc_end247-halide_opencl_get_symbol
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal6OpenCL23validate_device_pointerEPvP15halide_buffer_tm,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal6OpenCL23validate_device_pointerEPvP15halide_buffer_tm # -- Begin function _ZN6Halide7Runtime8Internal6OpenCL23validate_device_pointerEPvP15halide_buffer_tm
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal6OpenCL23validate_device_pointerEPvP15halide_buffer_tm,@function
_ZN6Halide7Runtime8Internal6OpenCL23validate_device_pointerEPvP15halide_buffer_tm: # @_ZN6Halide7Runtime8Internal6OpenCL23validate_device_pointerEPvP15halide_buffer_tm
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	movq	(%rsi), %rcx
	testq	%rcx, %rcx
	je	.LBB248_1
# %bb.2:                                # %if.end
	movq	%rdx, %r14
	movq	%rdi, %r12
	movq	_ZN6Halide7Runtime8Internal6OpenCL18clGetMemObjectInfoE@GOTPCREL(%rip), %r15
	movq	(%r15), %rax
	testq	%rax, %rax
	jne	.LBB248_4
# %bb.3:                                # %if.then1
	movq	%rsi, %rbx
	movq	%r12, %rdi
	callq	_ZN6Halide7Runtime8Internal6OpenCL14load_libopenclEPv@PLT
	movq	(%rbx), %rcx
	movq	(%r15), %rax
.LBB248_4:                              # %if.end2
	movq	%r12, -56(%rbp)                 # 8-byte Spill
	movq	(%rcx), %r15
	movq	8(%rcx), %r12
	leaq	-64(%rbp), %rcx
	movl	$8, %edx
	movq	%r12, %rdi
	movl	$4354, %esi                     # imm = 0x1102
	xorl	%r8d, %r8d
	callq	*%rax
	testl	%eax, %eax
	sete	%bl
	je	.LBB248_12
# %bb.5:                                # %if.then7
	movl	%eax, %r13d
	movb	%bl, -41(%rbp)                  # 1-byte Spill
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r15
	testq	%rax, %rax
	je	.LBB248_6
# %bb.7:                                # %if.then6.i
	leaq	1023(%r15), %r14
	movb	$0, 1023(%r15)
	leaq	.L.str.60.264(%rip), %rdx
	movq	%r15, %rdi
	movq	%r14, %rsi
	jmp	.LBB248_8
.LBB248_1:
	movb	$1, %bl
	jmp	.LBB248_15
.LBB248_12:                             # %if.end13
	testq	%r14, %r14
	je	.LBB248_15
# %bb.13:                               # %do.body
	addq	%r14, %r15
	cmpq	%r15, -64(%rbp)
	jae	.LBB248_15
# %bb.14:                               # %if.then26
	leaq	.L.str.66.265(%rip), %rsi
	movq	-56(%rbp), %rdi                 # 8-byte Reload
	callq	halide_print@PLT
	callq	abort@PLT
	jmp	.LBB248_15
.LBB248_6:                              # %if.then7.split
	leaq	.L.str.60.264(%rip), %rdx
	xorl	%r14d, %r14d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB248_8:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%r14, %rsi
	movq	%r12, %rdx
	callq	halide_pointer_to_string@PLT
	leaq	.L.str.61.200(%rip), %rdx
	movq	%rax, %rdi
	movq	%r14, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %r12
	movl	%r13d, %edi
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	%r12, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	halide_string_to_string@PLT
	testq	%r15, %r15
	je	.LBB248_9
# %bb.10:                               # %if.else.i
	subq	%r15, %rax
	incq	%rax
	movq	-56(%rbp), %rbx                 # 8-byte Reload
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r15, %rsi
	jmp	.LBB248_11
.LBB248_9:
	leaq	.L.str.274(%rip), %rsi
	movq	-56(%rbp), %rbx                 # 8-byte Reload
.LBB248_11:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%rbx, %rdi
	callq	halide_error@PLT
	movq	%r15, %rdi
	callq	free@PLT
	movb	-41(%rbp), %bl                  # 1-byte Reload
.LBB248_15:                             # %return
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end248:
	.size	_ZN6Halide7Runtime8Internal6OpenCL23validate_device_pointerEPvP15halide_buffer_tm, .Lfunc_end248-_ZN6Halide7Runtime8Internal6OpenCL23validate_device_pointerEPvP15halide_buffer_tm
                                        # -- End function
	.section	.text.opencl_device_crop_from_offset,"ax",@progbits
	.weak	opencl_device_crop_from_offset  # -- Begin function opencl_device_crop_from_offset
	.p2align	4, 0x90
	.type	opencl_device_crop_from_offset,@function
opencl_device_crop_from_offset:         # @opencl_device_crop_from_offset
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	movq	%rcx, %r15
	movq	%rdx, -80(%rbp)                 # 8-byte Spill
	movq	%rsi, %r12
	movq	%rdi, %r13
	movq	%rdi, -72(%rbp)
	leaq	-64(%rbp), %rbx
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, -64(%rbp)
	leaq	-56(%rbp), %r14
	movl	$0, -48(%rbp)
	movq	_ZN6Halide7Runtime8Internal6OpenCL15clCreateContextE@GOTPCREL(%rip), %rax
	cmpq	$0, (%rax)
	jne	.LBB249_2
# %bb.1:                                # %if.then.i
	movq	%r13, %rdi
	callq	_ZN6Halide7Runtime8Internal6OpenCL14load_libopenclEPv@PLT
.LBB249_2:                              # %if.end.i
	movq	%r13, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	movl	$1, %ecx
	callq	halide_acquire_cl_context@PLT
	movl	%eax, -48(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB249_4
# %bb.3:                                # %if.end.i
	cmpq	$0, -56(%rbp)
	je	.LBB249_4
# %bb.8:                                # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB249_15
# %bb.9:                                # %if.end
	movq	8(%r12), %rax
	movq	%rax, 8(%r15)
	movl	$16, %edi
	callq	malloc@PLT
	testq	%rax, %rax
	je	.LBB249_10
# %bb.14:                               # %if.end6
	movq	%rax, %rbx
	movq	_ZN6Halide7Runtime8Internal6OpenCL17clRetainMemObjectE@GOTPCREL(%rip), %rax
	movq	(%r12), %rcx
	movq	8(%rcx), %rdi
	callq	*(%rax)
	movq	(%r12), %rax
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rbx)
	movq	-80(%rbp), %rcx                 # 8-byte Reload
	addq	(%rax), %rcx
	movq	%rcx, (%rbx)
	movq	%rbx, (%r15)
	xorl	%ebx, %ebx
	jmp	.LBB249_15
.LBB249_4:                              # %if.then9.i
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB249_5
# %bb.6:                                # %if.else.i.i
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.272(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	%r13, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB249_7
.LBB249_5:                              # %if.then.i.i
	leaq	.L.str.272(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB249_7:                              # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit.thread
	movq	%r13, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-1, -48(%rbp)
	movl	$-1, %ebx
.LBB249_15:                             # %cleanup15
	movq	-72(%rbp), %rdi
	callq	halide_release_cl_context@PLT
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB249_10:                             # %if.then4
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r14
	testq	%rax, %rax
	je	.LBB249_11
# %bb.12:                               # %if.else.i
	leaq	1023(%r14), %rsi
	movb	$0, 1023(%r14)
	leaq	.L.str.180(%rip), %rdx
	movq	%r14, %rdi
	callq	halide_string_to_string@PLT
	subq	%r14, %rax
	leaq	1(%rax), %rdx
	movq	%r13, %rdi
	movq	%r14, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r14, %rsi
	jmp	.LBB249_13
.LBB249_11:                             # %if.then.i36
	leaq	.L.str.180(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB249_13:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r13, %rdi
	callq	halide_error@PLT
	movq	%r14, %rdi
	callq	free@PLT
	movl	$-11, %ebx
	jmp	.LBB249_15
.Lfunc_end249:
	.size	opencl_device_crop_from_offset, .Lfunc_end249-opencl_device_crop_from_offset
                                        # -- End function
	.section	.text.opencl_do_multidimensional_copy,"ax",@progbits
	.weak	opencl_do_multidimensional_copy # -- Begin function opencl_do_multidimensional_copy
	.p2align	4, 0x90
	.type	opencl_do_multidimensional_copy,@function
opencl_do_multidimensional_copy:        # @opencl_do_multidimensional_copy
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$72, %rsp
	movq	%rsi, -48(%rbp)                 # 8-byte Spill
	movq	%rdi, %r12
	cmpl	$17, %r9d
	jl	.LBB250_5
# %bb.1:                                # %if.then
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB250_2
# %bb.3:                                # %if.else.i
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.136(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	%r12, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB250_4
.LBB250_5:                              # %if.else
	movq	%r8, %r11
	movq	%rcx, %rbx
	movq	%rdx, %r15
	movb	24(%rbp), %dl
	movb	16(%rbp), %cl
	testl	%r9d, %r9d
	je	.LBB250_11
# %bb.6:                                # %for.cond.preheader
	movslq	%r9d, %r9
	cmpl	$0, 16(%r15,%r9,8)
	jle	.LBB250_10
# %bb.7:                                # %for.body.preheader
	movq	%r12, -80(%rbp)                 # 8-byte Spill
	decq	%r9
	xorl	%r12d, %r12d
	movzbl	%dl, %edx
	movl	%edx, -56(%rbp)                 # 4-byte Spill
	movzbl	%cl, %ecx
	movl	%ecx, -52(%rbp)                 # 4-byte Spill
	xorl	%r14d, %r14d
	xorl	%r13d, %r13d
	movq	%rbx, -72(%rbp)                 # 8-byte Spill
	movq	%r11, -64(%rbp)                 # 8-byte Spill
	.p2align	4, 0x90
.LBB250_8:                              # %for.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	(%rbx,%r13), %rcx
	leaq	(%r14,%r11), %r8
	movl	-56(%rbp), %edx                 # 4-byte Reload
	movl	%edx, 8(%rsp)
	movl	-52(%rbp), %edx                 # 4-byte Reload
	movl	%edx, (%rsp)
	movq	-80(%rbp), %rdi                 # 8-byte Reload
	movq	-48(%rbp), %rsi                 # 8-byte Reload
	movq	%r15, %rdx
	movq	%r9, %rbx
                                        # kill: def $r9d killed $r9d killed $r9
	callq	opencl_do_multidimensional_copy@PLT
	testl	%eax, %eax
	jne	.LBB250_31
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB250_8 Depth=1
	movq	%rbx, %r9
	addq	152(%r15,%rbx,8), %r13
	addq	280(%r15,%rbx,8), %r14
	incl	%r12d
	cmpl	24(%r15,%rbx,8), %r12d
	movq	-64(%rbp), %r11                 # 8-byte Reload
	movq	-72(%rbp), %rbx                 # 8-byte Reload
	jl	.LBB250_8
	jmp	.LBB250_10
.LBB250_2:                              # %if.then.i
	leaq	.L.str.136(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB250_4:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r12, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-1, %eax
	jmp	.LBB250_31
.LBB250_11:                             # %if.then3
	testb	%cl, %cl
	jne	.LBB250_18
# %bb.12:                               # %if.then3
	testb	%dl, %dl
	je	.LBB250_18
# %bb.13:                               # %if.then23
	movq	_ZN6Halide7Runtime8Internal6OpenCL19clEnqueueReadBufferE@GOTPCREL(%rip), %r10
	movq	-48(%rbp), %rcx                 # 8-byte Reload
	movq	16(%rcx), %rdi
	movq	(%r15), %rcx
	movq	408(%r15), %r8
	movq	8(%rcx), %rsi
	addq	(%rcx), %rbx
	addq	8(%r15), %r11
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, 8(%rsp)
	movl	$0, (%rsp)
	xorl	%edx, %edx
	movq	%rbx, %rcx
	movq	%r11, %r9
	callq	*(%r10)
	testl	%eax, %eax
	jne	.LBB250_16
	jmp	.LBB250_10
.LBB250_18:                             # %if.else30
	testb	%cl, %cl
	je	.LBB250_21
# %bb.19:                               # %if.else30
	testb	%dl, %dl
	jne	.LBB250_21
# %bb.20:                               # %if.then34
	movq	_ZN6Halide7Runtime8Internal6OpenCL20clEnqueueWriteBufferE@GOTPCREL(%rip), %r10
	movq	-48(%rbp), %rcx                 # 8-byte Reload
	movq	16(%rcx), %rdi
	movq	8(%r15), %rcx
	movq	408(%r15), %r8
	movq	8(%rcx), %rsi
	addq	(%rcx), %r11
	addq	(%r15), %rbx
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, 8(%rsp)
	movl	$0, (%rsp)
	xorl	%edx, %edx
	movq	%r11, %rcx
	movq	%rbx, %r9
	callq	*(%r10)
	testl	%eax, %eax
	je	.LBB250_10
.LBB250_16:                             # %if.then80
	movl	%eax, %r13d
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB250_17
# %bb.26:                               # %if.then6.i207
	leaq	1023(%rbx), %r14
	movb	$0, 1023(%rbx)
	leaq	.L.str.145(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r14, %rsi
	jmp	.LBB250_27
.LBB250_21:                             # %if.else45
	testb	%cl, %cl
	jne	.LBB250_24
# %bb.22:                               # %if.else45
	testb	%dl, %dl
	jne	.LBB250_24
# %bb.23:                               # %if.then49
	movq	_ZN6Halide7Runtime8Internal6OpenCL19clEnqueueCopyBufferE@GOTPCREL(%rip), %r10
	movq	-48(%rbp), %rcx                 # 8-byte Reload
	movq	16(%rcx), %rdi
	movq	(%r15), %rcx
	movq	8(%r15), %r8
	movq	8(%rcx), %rsi
	addq	(%rcx), %rbx
	movq	8(%r8), %rdx
	addq	(%r8), %r11
	movq	408(%r15), %r9
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, 8(%rsp)
	movl	$0, (%rsp)
	movq	%rbx, %rcx
	movq	%r11, %r8
	callq	*(%r10)
	testl	%eax, %eax
	jne	.LBB250_16
.LBB250_10:
	xorl	%eax, %eax
	jmp	.LBB250_31
.LBB250_17:                             # %if.then80.split
	leaq	.L.str.145(%rip), %rdx
	xorl	%r14d, %r14d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB250_27:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit210
	callq	halide_string_to_string@PLT
	movq	%rax, %r15
	movl	%r13d, %edi
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB250_28
# %bb.29:                               # %if.else.i230
	subq	%rbx, %rax
	incq	%rax
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB250_30
.LBB250_28:
	leaq	.L.str.274(%rip), %rsi
.LBB250_30:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit238
	movq	%r12, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	%r13d, %eax
.LBB250_31:                             # %return
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB250_24:                             # %if.else63
	addq	8(%r15), %r11
	addq	(%r15), %rbx
	xorl	%eax, %eax
	cmpq	%rbx, %r11
	je	.LBB250_31
# %bb.25:                               # %if.then69
	movq	408(%r15), %rdx
	movq	%r11, %rdi
	movq	%rbx, %rsi
	callq	memcpy@PLT
	xorl	%eax, %eax
	jmp	.LBB250_31
.Lfunc_end250:
	.size	opencl_do_multidimensional_copy, .Lfunc_end250-opencl_do_multidimensional_copy
                                        # -- End function
	.section	.text._GLOBAL__sub_I_opencl.cpp,"ax",@progbits
	.p2align	4, 0x90                         # -- Begin function _GLOBAL__sub_I_opencl.cpp
	.type	_GLOBAL__sub_I_opencl.cpp,@function
_GLOBAL__sub_I_opencl.cpp:              # @_GLOBAL__sub_I_opencl.cpp
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZGVN6Halide7Runtime8Internal6OpenCL17compilation_cacheE@GOTPCREL(%rip), %rax
	cmpb	$0, (%rax)
	je	.LBB251_1
# %bb.2:                                # %__cxx_global_var_init.exit
	popq	%rbp
	retq
.LBB251_1:                              # %init.check.i
	movq	_ZN6Halide7Runtime8Internal6OpenCL17compilation_cacheE@GOTPCREL(%rip), %rcx
	movl	$0, 8(%rcx)
	movq	$0, 16(%rcx)
	movabsq	$8589934592, %rdx               # imm = 0x200000000
	movq	%rdx, 24(%rcx)
	movb	$1, (%rax)
	popq	%rbp
	retq
.Lfunc_end251:
	.size	_GLOBAL__sub_I_opencl.cpp, .Lfunc_end251-_GLOBAL__sub_I_opencl.cpp
                                        # -- End function
	.section	.text.halide_opencl_cleanup,"ax",@progbits
	.weak	halide_opencl_cleanup           # -- Begin function halide_opencl_cleanup
	.p2align	4, 0x90
	.type	halide_opencl_cleanup,@function
halide_opencl_cleanup:                  # @halide_opencl_cleanup
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal6OpenCL17compilation_cacheE@GOTPCREL(%rip), %rdi
	movq	_ZN6Halide7Runtime8Internal6OpenCL16clReleaseProgramE@GOTPCREL(%rip), %rdx
	xorl	%esi, %esi
	callq	_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE11release_allIPFiS5_EEEvPvRT_@PLT
	xorl	%edi, %edi
	popq	%rbp
	jmp	halide_opencl_device_release@PLT # TAILCALL
.Lfunc_end252:
	.size	halide_opencl_cleanup, .Lfunc_end252-halide_opencl_cleanup
                                        # -- End function
	.section	.text._ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE11release_allIPFiS5_EEEvPvRT_,"axG",@progbits,_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE11release_allIPFiS5_EEEvPvRT_,comdat
	.weak	_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE11release_allIPFiS5_EEEvPvRT_ # -- Begin function _ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE11release_allIPFiS5_EEEvPvRT_
	.p2align	4, 0x90
	.type	_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE11release_allIPFiS5_EEEvPvRT_,@function
_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE11release_allIPFiS5_EEEvPvRT_: # @_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE11release_allIPFiS5_EEEvPvRT_
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movq	%rdx, %r14
	movq	%rdi, %r15
	callq	halide_mutex_lock@PLT
	movl	24(%r15), %eax
	testl	%eax, %eax
	je	.LBB253_1
# %bb.2:                                # %for.cond.preheader.i
	movl	8(%r15), %ecx
	cmpl	$31, %ecx
	je	.LBB253_10
# %bb.3:                                # %for.body.lr.ph.i
	movq	16(%r15), %rdi
	movl	$16, %ebx
	xorl	%r12d, %r12d
	movl	$1, %r13d
	jmp	.LBB253_4
	.p2align	4, 0x90
.LBB253_7:                              # %for.inc.us.i
                                        #   in Loop: Header=BB253_4 Depth=1
	incq	%r12
	shlxl	%ecx, %r13d, %edx
	movslq	%edx, %rdx
	addq	$24, %rbx
	cmpq	%rdx, %r12
	jge	.LBB253_8
.LBB253_4:                              # %for.body.us.i
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, (%rdi,%rbx)
	je	.LBB253_7
# %bb.5:                                # %land.lhs.true.us.i
                                        #   in Loop: Header=BB253_4 Depth=1
	cmpl	$0, 4(%rdi,%rbx)
	jne	.LBB253_7
# %bb.6:                                # %if.then14.us.i
                                        #   in Loop: Header=BB253_4 Depth=1
	movq	-8(%rdi,%rbx), %rdi
	callq	*(%r14)
	movq	16(%r15), %rdi
	movq	$0, -8(%rdi,%rbx)
	movl	$1, (%rdi,%rbx)
	movl	8(%r15), %ecx
	movl	24(%r15), %eax
	decl	%eax
	movl	%eax, 24(%r15)
	jmp	.LBB253_7
.LBB253_1:                              # %entry.if.then_crit_edge
	movq	16(%r15), %rdi
	jmp	.LBB253_9
.LBB253_8:                              # %_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE15release_contextIPFiS5_EEEvPvbS3_RT_.exit
	testl	%eax, %eax
	jne	.LBB253_10
.LBB253_9:                              # %if.then
	callq	free@PLT
	movq	$0, 16(%r15)
	movl	$0, 8(%r15)
.LBB253_10:                             # %if.end
	movq	%r15, %rdi
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	halide_mutex_unlock@PLT         # TAILCALL
.Lfunc_end253:
	.size	_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE11release_allIPFiS5_EEEvPvRT_, .Lfunc_end253-_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE11release_allIPFiS5_EEEvPvRT_
                                        # -- End function
	.section	.text.halide_opencl_set_platform_name,"ax",@progbits
	.weak	halide_opencl_set_platform_name # -- Begin function halide_opencl_set_platform_name
	.p2align	4, 0x90
	.type	halide_opencl_set_platform_name,@function
halide_opencl_set_platform_name:        # @halide_opencl_set_platform_name
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	%rdi, %rsi
	movq	_ZN6Halide7Runtime8Internal6OpenCL18platform_name_lockE@GOTPCREL(%rip), %rbx
	.p2align	4, 0x90
.LBB254_1:                              # %while.cond.i
                                        # =>This Inner Loop Header: Depth=1
	movb	$1, %al
	xchgb	%al, (%rbx)
	testb	%al, %al
	jne	.LBB254_1
# %bb.2:                                # %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL13platform_nameE@GOTPCREL(%rip), %r14
	testq	%rsi, %rsi
	je	.LBB254_4
# %bb.3:                                # %if.then.i
	movl	$256, %edx                      # imm = 0x100
	movq	%r14, %rdi
	callq	strncpy@PLT
	addq	$255, %r14
.LBB254_4:                              # %_ZN12_GLOBAL__N_140halide_opencl_set_platform_name_internalEPKc.exit
	movb	$0, (%r14)
	movq	_ZN6Halide7Runtime8Internal6OpenCL25platform_name_initializedE@GOTPCREL(%rip), %rax
	movb	$1, (%rax)
	movb	$0, (%rbx)
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end254:
	.size	halide_opencl_set_platform_name, .Lfunc_end254-halide_opencl_set_platform_name
                                        # -- End function
	.section	.text.halide_opencl_set_device_type,"ax",@progbits
	.weak	halide_opencl_set_device_type   # -- Begin function halide_opencl_set_device_type
	.p2align	4, 0x90
	.type	halide_opencl_set_device_type,@function
halide_opencl_set_device_type:          # @halide_opencl_set_device_type
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	%rdi, %rsi
	movq	_ZN6Halide7Runtime8Internal6OpenCL16device_type_lockE@GOTPCREL(%rip), %rbx
	.p2align	4, 0x90
.LBB255_1:                              # %while.cond.i
                                        # =>This Inner Loop Header: Depth=1
	movb	$1, %al
	xchgb	%al, (%rbx)
	testb	%al, %al
	jne	.LBB255_1
# %bb.2:                                # %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL11device_typeE@GOTPCREL(%rip), %r14
	testq	%rsi, %rsi
	je	.LBB255_4
# %bb.3:                                # %if.then.i
	movl	$256, %edx                      # imm = 0x100
	movq	%r14, %rdi
	callq	strncpy@PLT
	addq	$255, %r14
.LBB255_4:                              # %_ZN12_GLOBAL__N_138halide_opencl_set_device_type_internalEPKc.exit
	movb	$0, (%r14)
	movq	_ZN6Halide7Runtime8Internal6OpenCL23device_type_initializedE@GOTPCREL(%rip), %rax
	movb	$1, (%rax)
	movb	$0, (%rbx)
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end255:
	.size	halide_opencl_set_device_type, .Lfunc_end255-halide_opencl_set_device_type
                                        # -- End function
	.section	.text.halide_opencl_set_build_options,"ax",@progbits
	.weak	halide_opencl_set_build_options # -- Begin function halide_opencl_set_build_options
	.p2align	4, 0x90
	.type	halide_opencl_set_build_options,@function
halide_opencl_set_build_options:        # @halide_opencl_set_build_options
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rbx
	movq	%rdi, %rsi
	movq	_ZN6Halide7Runtime8Internal6OpenCL18build_options_lockE@GOTPCREL(%rip), %rbx
	.p2align	4, 0x90
.LBB256_1:                              # %while.cond.i
                                        # =>This Inner Loop Header: Depth=1
	movb	$1, %al
	xchgb	%al, (%rbx)
	testb	%al, %al
	jne	.LBB256_1
# %bb.2:                                # %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL13build_optionsE@GOTPCREL(%rip), %r14
	testq	%rsi, %rsi
	je	.LBB256_4
# %bb.3:                                # %if.then.i
	movl	$1024, %edx                     # imm = 0x400
	movq	%r14, %rdi
	callq	strncpy@PLT
	addq	$1023, %r14                     # imm = 0x3FF
.LBB256_4:                              # %_ZN12_GLOBAL__N_140halide_opencl_set_build_options_internalEPKc.exit
	movb	$0, (%r14)
	movq	_ZN6Halide7Runtime8Internal6OpenCL25build_options_initializedE@GOTPCREL(%rip), %rax
	movb	$1, (%rax)
	movb	$0, (%rbx)
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end256:
	.size	halide_opencl_set_build_options, .Lfunc_end256-halide_opencl_set_build_options
                                        # -- End function
	.section	.text.halide_opencl_get_build_options,"ax",@progbits
	.weak	halide_opencl_get_build_options # -- Begin function halide_opencl_get_build_options
	.p2align	4, 0x90
	.type	halide_opencl_get_build_options,@function
halide_opencl_get_build_options:        # @halide_opencl_get_build_options
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	movq	_ZN6Halide7Runtime8Internal6OpenCL18build_options_lockE@GOTPCREL(%rip), %rbx
	.p2align	4, 0x90
.LBB257_1:                              # %while.cond.i
                                        # =>This Inner Loop Header: Depth=1
	movb	$1, %al
	xchgb	%al, (%rbx)
	testb	%al, %al
	jne	.LBB257_1
# %bb.2:                                # %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
	movq	_ZN6Halide7Runtime8Internal6OpenCL25build_options_initializedE@GOTPCREL(%rip), %r15
	cmpb	$0, (%r15)
	jne	.LBB257_6
# %bb.3:                                # %if.then.i
	leaq	.L.str.271(%rip), %rdi
	callq	getenv@PLT
	movq	_ZN6Halide7Runtime8Internal6OpenCL13build_optionsE@GOTPCREL(%rip), %r14
	testq	%rax, %rax
	je	.LBB257_5
# %bb.4:                                # %if.then.i.i
	movl	$1024, %edx                     # imm = 0x400
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	strncpy@PLT
	addq	$1023, %r14                     # imm = 0x3FF
.LBB257_5:                              # %_ZN12_GLOBAL__N_140halide_opencl_set_build_options_internalEPKc.exit.i
	movb	$0, (%r14)
	movb	$1, (%r15)
.LBB257_6:                              # %_ZN12_GLOBAL__N_140halide_opencl_get_build_options_internalEPv.exit
	movb	$0, (%rbx)
	movq	_ZN6Halide7Runtime8Internal6OpenCL13build_optionsE@GOTPCREL(%rip), %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end257:
	.size	halide_opencl_get_build_options, .Lfunc_end257-halide_opencl_get_build_options
                                        # -- End function
	.section	.text._ZN6Halide7Runtime8Internal6OpenCL14compile_kernelEPvP11_cl_contextPKci,"ax",@progbits
	.weak	_ZN6Halide7Runtime8Internal6OpenCL14compile_kernelEPvP11_cl_contextPKci # -- Begin function _ZN6Halide7Runtime8Internal6OpenCL14compile_kernelEPvP11_cl_contextPKci
	.p2align	4, 0x90
	.type	_ZN6Halide7Runtime8Internal6OpenCL14compile_kernelEPvP11_cl_contextPKci,@function
_ZN6Halide7Runtime8Internal6OpenCL14compile_kernelEPvP11_cl_contextPKci: # @_ZN6Halide7Runtime8Internal6OpenCL14compile_kernelEPvP11_cl_contextPKci
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$104, %rsp
	movq	%rdx, %r12
	movq	%rsi, %rbx
	movq	%rdi, %r13
	movl	$0, -44(%rbp)
	movq	_ZN6Halide7Runtime8Internal6OpenCL16clGetContextInfoE@GOTPCREL(%rip), %rax
	leaq	-72(%rbp), %rcx
	movl	$8, %edx
	movq	%rsi, %rdi
	movl	$4225, %esi                     # imm = 0x1081
	xorl	%r8d, %r8d
	callq	*(%rax)
	movl	%eax, -44(%rbp)
	testl	%eax, %eax
	je	.LBB258_3
# %bb.1:                                # %if.then
	movl	%eax, %r14d
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB258_6
# %bb.2:                                # %if.then6.i
	leaq	1023(%rbx), %r15
	movb	$0, 1023(%rbx)
	leaq	.L.str.91(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r15, %rsi
	jmp	.LBB258_8
.LBB258_3:                              # %if.end
	movq	-72(%rbp), %rdi
	movq	%rdi, -104(%rbp)
	movq	$0, -88(%rbp)
	movq	_ZN6Halide7Runtime8Internal6OpenCL15clGetDeviceInfoE@GOTPCREL(%rip), %r15
	leaq	-88(%rbp), %rcx
	movl	$8, %edx
	movl	$4128, %esi                     # imm = 0x1020
	xorl	%r8d, %r8d
	callq	*(%r15)
	movl	%eax, -44(%rbp)
	testl	%eax, %eax
	je	.LBB258_10
# %bb.4:                                # %if.then6
	movl	%eax, %r14d
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB258_13
# %bb.5:                                # %if.then6.i114
	leaq	1023(%rbx), %r15
	movb	$0, 1023(%rbx)
	leaq	.L.str.92(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r15, %rsi
	jmp	.LBB258_8
.LBB258_6:                              # %if.then.split
	leaq	.L.str.91(%rip), %rdx
	jmp	.LBB258_7
.LBB258_10:                             # %if.end11
	movl	$0, -48(%rbp)
	movq	-72(%rbp), %rdi
	leaq	-48(%rbp), %rcx
	movl	$4, %edx
	movl	$4129, %esi                     # imm = 0x1021
	xorl	%r8d, %r8d
	callq	*(%r15)
	movl	%eax, %r15d
	movl	%eax, -44(%rbp)
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r14
	testl	%r15d, %r15d
	je	.LBB258_17
# %bb.11:                               # %if.then14
	testq	%r14, %r14
	je	.LBB258_19
# %bb.12:                               # %if.then6.i154
	leaq	1023(%r14), %r12
	movb	$0, 1023(%r14)
	leaq	.L.str.93(%rip), %rdx
	movq	%r14, %rdi
	movq	%r12, %rsi
	jmp	.LBB258_20
.LBB258_13:                             # %if.then6.split
	leaq	.L.str.92(%rip), %rdx
.LBB258_7:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	xorl	%r15d, %r15d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB258_8:                              # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %r12
	movl	%r14d, %edi
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	%r12, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB258_9
# %bb.14:                               # %if.else.i
	subq	%rbx, %rax
	incq	%rax
	movq	%r13, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB258_15
.LBB258_9:
	leaq	.L.str.274(%rip), %rsi
.LBB258_15:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	movq	%r13, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	xorl	%ebx, %ebx
.LBB258_16:                             # %cleanup76
	movq	%rbx, %rax
	addq	$104, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB258_17:                             # %if.end19
	testq	%r14, %r14
	movq	%r14, -64(%rbp)                 # 8-byte Spill
	je	.LBB258_24
# %bb.18:                               # %if.then6.i194
	leaq	1023(%r14), %r15
	movb	$0, 1023(%r14)
	leaq	.L.str.94(%rip), %rdx
	movq	%r14, %rdi
	movq	%r15, %rsi
	jmp	.LBB258_25
.LBB258_19:                             # %if.then14.split
	leaq	.L.str.93(%rip), %rdx
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB258_20:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit157
	callq	halide_string_to_string@PLT
	movq	%rax, %rbx
	movl	%r15d, %edi
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	callq	halide_string_to_string@PLT
	testq	%r14, %r14
	je	.LBB258_22
# %bb.21:                               # %if.else.i177
	subq	%r14, %rax
	incq	%rax
	movq	%r13, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r14, %rsi
	jmp	.LBB258_23
.LBB258_22:
	leaq	.L.str.274(%rip), %rsi
.LBB258_23:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit185
	movq	%r13, %rdi
	callq	halide_error@PLT
	xorl	%ebx, %ebx
	jmp	.LBB258_48
.LBB258_24:                             # %if.end19.split
	leaq	.L.str.94(%rip), %rdx
	xorl	%r15d, %r15d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB258_25:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	-88(%rbp), %rdx
	movq	%r15, %rsi
	movl	$1, %ecx
	callq	halide_uint64_to_string@PLT
	leaq	.L.str.95(%rip), %rdx
	movq	%rax, %rdi
	movq	%r15, %rsi
	callq	halide_string_to_string@PLT
	movl	-48(%rbp), %edx
	movq	%rax, %rdi
	movq	%r15, %rsi
	movl	$1, %ecx
	callq	halide_uint64_to_string@PLT
	movq	%rax, %r14
	movq	%r13, %rdi
	callq	halide_opencl_get_build_options@PLT
	movq	%rax, -56(%rbp)                 # 8-byte Spill
	leaq	.L.str.72.209(%rip), %rdx
	movq	%r14, %rdi
	movq	%r15, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%r15, %rsi
	movq	-56(%rbp), %rdx                 # 8-byte Reload
	callq	halide_string_to_string@PLT
	movq	%rax, -56(%rbp)                 # 8-byte Spill
	movq	%r12, -96(%rbp)
	movq	_ZN6Halide7Runtime8Internal6OpenCL25clCreateProgramWithSourceE@GOTPCREL(%rip), %rax
	leaq	-96(%rbp), %rdx
	leaq	-44(%rbp), %r8
	movq	%rbx, %rdi
	movl	$1, %esi
	xorl	%ecx, %ecx
	callq	*(%rax)
	movl	-44(%rbp), %edi
	testl	%edi, %edi
	je	.LBB258_28
# %bb.26:                               # %if.then31
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r12
	testq	%rax, %rax
	je	.LBB258_30
# %bb.27:                               # %if.then6.i223
	leaq	1023(%r12), %rbx
	movb	$0, 1023(%r12)
	leaq	.L.str.97(%rip), %rdx
	movq	%r12, %rdi
	movq	%rbx, %rsi
	jmp	.LBB258_31
.LBB258_28:                             # %if.else
	movq	%rax, %rbx
	movq	-64(%rbp), %r14                 # 8-byte Reload
	testq	%r14, %r14
	je	.LBB258_35
# %bb.29:                               # %if.then.i274
	movq	%r14, %r12
	movq	-56(%rbp), %r14                 # 8-byte Reload
	subq	%r12, %r14
	incq	%r14
	movq	%r13, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	_ZN6Halide7Runtime8Internal6OpenCL14clBuildProgramE@GOTPCREL(%rip), %rax
	movq	(%rax), %r15
	movq	%r13, %rdi
	movq	%r12, %rsi
	movq	%r14, %rdx
	movq	%r12, %r14
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r12, %rcx
	jmp	.LBB258_36
.LBB258_30:                             # %if.then31.split
	leaq	.L.str.97(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB258_31:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit226
	callq	halide_string_to_string@PLT
	movq	%rax, %r15
	movl	-44(%rbp), %edi
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_string_to_string@PLT
	testq	%r12, %r12
	je	.LBB258_33
# %bb.32:                               # %if.else.i246
	subq	%r12, %rax
	incq	%rax
	movq	%r13, %rdi
	movq	%r12, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r12, %rsi
	jmp	.LBB258_34
.LBB258_33:
	leaq	.L.str.274(%rip), %rsi
.LBB258_34:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit254
	movq	-64(%rbp), %r14                 # 8-byte Reload
	movq	%r13, %rdi
	callq	halide_error@PLT
	jmp	.LBB258_44
.LBB258_35:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit.thread
	movq	_ZN6Halide7Runtime8Internal6OpenCL14clBuildProgramE@GOTPCREL(%rip), %rax
	movq	(%rax), %r15
	leaq	.L.str.274(%rip), %rcx
.LBB258_36:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit276
	leaq	-104(%rbp), %rdx
	movq	%rbx, %rdi
	movl	$1, %esi
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	callq	*%r15
	movl	%eax, -44(%rbp)
	testl	%eax, %eax
	je	.LBB258_45
# %bb.37:                               # %if.then54
	movl	$16384, %edi                    # imm = 0x4000
	callq	malloc@PLT
	movq	%rax, %r12
	testq	%rax, %rax
	je	.LBB258_39
# %bb.38:                               # %lor.lhs.false
	movq	_ZN6Halide7Runtime8Internal6OpenCL21clGetProgramBuildInfoE@GOTPCREL(%rip), %rax
	movq	-72(%rbp), %rsi
	movl	$16384, %ecx                    # imm = 0x4000
	movq	%rbx, %rdi
	movl	$4483, %edx                     # imm = 0x1183
	movq	%r12, %r8
	xorl	%r9d, %r9d
	callq	*(%rax)
	movq	%r12, %r15
	testl	%eax, %eax
	je	.LBB258_40
.LBB258_39:                             # %if.then59
	leaq	.L.str.99(%rip), %r15
.LBB258_40:                             # %if.end60
	movq	%r13, -120(%rbp)
	movb	$1, -112(%rbp)
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, -144(%rbp)
	testq	%rax, %rax
	je	.LBB258_42
# %bb.41:                               # %if.then6.i286
	movq	%rax, %rbx
	addq	$1023, %rbx                     # imm = 0x3FF
	movb	$0, 1023(%rax)
	leaq	.L.str.100(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	jmp	.LBB258_43
.LBB258_42:                             # %if.end60.split
	leaq	.L.str.100(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB258_43:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit289
	callq	halide_string_to_string@PLT
	movq	%rax, -80(%rbp)                 # 8-byte Spill
	movq	%rbx, -128(%rbp)
	movl	-44(%rbp), %edi
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	-80(%rbp), %rdi                 # 8-byte Reload
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.101(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, -136(%rbp)
	leaq	-144(%rbp), %rdi
	callq	_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev
.LBB258_44:                             # %cleanup.sink.split
	movq	%r12, %rdi
	callq	free@PLT
	xorl	%ebx, %ebx
.LBB258_45:                             # %cleanup
	testq	%r14, %r14
	je	.LBB258_47
# %bb.46:                               # %if.else.i314
	movq	-56(%rbp), %rdx                 # 8-byte Reload
	subq	%r14, %rdx
	incq	%rdx
	movq	%r13, %rdi
	movq	%r14, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	jmp	.LBB258_48
.LBB258_47:                             # %if.then.i308
	leaq	.L.str.274(%rip), %rsi
	movq	%r13, %rdi
	callq	halide_error@PLT
.LBB258_48:                             # %cleanup73
	movq	%r14, %rdi
	callq	free@PLT
	jmp	.LBB258_16
.Lfunc_end258:
	.size	_ZN6Halide7Runtime8Internal6OpenCL14compile_kernelEPvP11_cl_contextPKci, .Lfunc_end258-_ZN6Halide7Runtime8Internal6OpenCL14compile_kernelEPvP11_cl_contextPKci
                                        # -- End function
	.section	.text.halide_opencl_initialize_kernels,"ax",@progbits
	.weak	halide_opencl_initialize_kernels # -- Begin function halide_opencl_initialize_kernels
	.p2align	4, 0x90
	.type	halide_opencl_initialize_kernels,@function
halide_opencl_initialize_kernels:       # @halide_opencl_initialize_kernels
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$56, %rsp
	movl	%ecx, %r15d
	movq	%rdx, -80(%rbp)                 # 8-byte Spill
	movq	%rsi, %r13
	movq	%rdi, %r12
	movq	%rdi, -72(%rbp)
	leaq	-64(%rbp), %rbx
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, -64(%rbp)
	leaq	-56(%rbp), %r14
	movl	$0, -48(%rbp)
	movq	_ZN6Halide7Runtime8Internal6OpenCL15clCreateContextE@GOTPCREL(%rip), %rax
	cmpq	$0, (%rax)
	jne	.LBB259_2
# %bb.1:                                # %if.then.i
	movq	%r12, %rdi
	callq	_ZN6Halide7Runtime8Internal6OpenCL14load_libopenclEPv@PLT
.LBB259_2:                              # %if.end.i
	movq	%r12, %rdi
	movq	%rbx, %rsi
	movq	%r14, %rdx
	movl	$1, %ecx
	callq	halide_acquire_cl_context@PLT
	movl	%eax, -48(%rbp)
	movq	-64(%rbp), %rcx
	testq	%rcx, %rcx
	je	.LBB259_4
# %bb.3:                                # %if.end.i
	cmpq	$0, -56(%rbp)
	je	.LBB259_4
# %bb.8:                                # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit
	movl	%eax, %ebx
	testl	%eax, %eax
	jne	.LBB259_12
# %bb.9:                                # %if.end
	movq	_ZN6Halide7Runtime8Internal6OpenCL17compilation_cacheE@GOTPCREL(%rip), %rdi
	movq	_ZN6Halide7Runtime8Internal6OpenCL14compile_kernelEPvP11_cl_contextPKci@GOTPCREL(%rip), %r9
	leaq	-88(%rbp), %r8
	movq	%r12, %rsi
	movq	%r13, %rdx
	pushq	%r15
	pushq	-80(%rbp)                       # 8-byte Folded Reload
	pushq	%rcx
	pushq	%r12
	callq	_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE18kernel_state_setupIPFS5_PvS3_PKciEJS8_S3_SA_iEEEbS8_PS8_S3_RS5_T_DpT0_@PLT
	addq	$32, %rsp
	movl	$-1, %ebx
	testb	%al, %al
	je	.LBB259_12
# %bb.10:                               # %do.body
	xorl	%ebx, %ebx
	cmpq	$0, -88(%rbp)
	jne	.LBB259_12
# %bb.11:                               # %if.then16
	leaq	.L.str.115(%rip), %rsi
	movq	%r12, %rdi
	callq	halide_print@PLT
	callq	abort@PLT
	jmp	.LBB259_12
.LBB259_4:                              # %if.then9.i
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB259_5
# %bb.6:                                # %if.else.i.i
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.272(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	%r12, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB259_7
.LBB259_5:                              # %if.then.i.i
	leaq	.L.str.272(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB259_7:                              # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit.thread
	movq	%r12, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-1, -48(%rbp)
	movl	$-1, %ebx
.LBB259_12:                             # %cleanup18
	movq	-72(%rbp), %rdi
	callq	halide_release_cl_context@PLT
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end259:
	.size	halide_opencl_initialize_kernels, .Lfunc_end259-halide_opencl_initialize_kernels
                                        # -- End function
	.section	.text._ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE18kernel_state_setupIPFS5_PvS3_PKciEJS8_S3_SA_iEEEbS8_PS8_S3_RS5_T_DpT0_,"axG",@progbits,_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE18kernel_state_setupIPFS5_PvS3_PKciEJS8_S3_SA_iEEEbS8_PS8_S3_RS5_T_DpT0_,comdat
	.weak	_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE18kernel_state_setupIPFS5_PvS3_PKciEJS8_S3_SA_iEEEbS8_PS8_S3_RS5_T_DpT0_ # -- Begin function _ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE18kernel_state_setupIPFS5_PvS3_PKciEJS8_S3_SA_iEEEbS8_PS8_S3_RS5_T_DpT0_
	.p2align	4, 0x90
	.type	_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE18kernel_state_setupIPFS5_PvS3_PKciEJS8_S3_SA_iEEEbS8_PS8_S3_RS5_T_DpT0_,@function
_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE18kernel_state_setupIPFS5_PvS3_PKciEJS8_S3_SA_iEEEbS8_PS8_S3_RS5_T_DpT0_: # @_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE18kernel_state_setupIPFS5_PvS3_PKciEJS8_S3_SA_iEEEbS8_PS8_S3_RS5_T_DpT0_
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	movq	%r9, %r13
	movq	%r8, -48(%rbp)                  # 8-byte Spill
	movq	%rcx, %r14
	movq	%rdx, %r12
	movq	%rdi, %r15
	callq	halide_mutex_lock@PLT
	movl	(%r12), %r8d
	testl	%r8d, %r8d
	je	.LBB260_1
# %bb.2:                                # %if.end
	movl	8(%r15), %esi
	testl	%esi, %esi
	jne	.LBB260_3
	jmp	.LBB260_11
.LBB260_1:                              # %if.then
	movl	28(%r15), %r8d
	leal	1(%r8), %eax
	movl	%eax, 28(%r15)
	movl	%r8d, (%r12)
	movl	8(%r15), %esi
	testl	%esi, %esi
	je	.LBB260_11
.LBB260_3:                              # %if.end.i
	cmpl	$31, %esi
	jne	.LBB260_4
.LBB260_11:                             # %if.end9
	movl	40(%rbp), %ecx
	movq	32(%rbp), %rdx
	movq	24(%rbp), %rsi
	movq	16(%rbp), %rdi
	callq	*%r13
	testq	%rax, %rax
	je	.LBB260_13
# %bb.12:                               # %if.end19
	movq	%rax, %rbx
	movl	(%r12), %eax
	movq	%r14, -72(%rbp)
	movq	%rbx, -64(%rbp)
	movl	%eax, -56(%rbp)
	movl	$1, -52(%rbp)
	leaq	-72(%rbp), %rsi
	movq	%r15, %rdi
	callq	_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE6insertERKNS6_17CachedCompilationE@PLT
	testb	%al, %al
	jne	.LBB260_10
.LBB260_13:
	xorl	%ebx, %ebx
	jmp	.LBB260_14
.LBB260_4:                              # %for.body.preheader.i
	movl	%r8d, %eax
	addq	%r14, %rax
	movabsq	$-7046029254386353131, %rcx     # imm = 0x9E3779B97F4A7C15
	imulq	%rax, %rcx
	movl	%esi, %eax
	negb	%al
	shrxq	%rax, %rcx, %rcx
	movl	$1, %edx
	shlxl	%esi, %edx, %eax
	leal	-1(%rax), %esi
	movslq	%esi, %rdi
	movq	16(%r15), %rsi
	cmpl	$2, %eax
	cmovgel	%eax, %edx
	jmp	.LBB260_6
	.p2align	4, 0x90
.LBB260_5:                              # %for.cond.i
                                        #   in Loop: Header=BB260_6 Depth=1
	incq	%rcx
	decq	%rdx
	je	.LBB260_11
.LBB260_6:                              # %for.body.i
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %rax
	andq	%rdi, %rax
	leaq	(%rax,%rax,2), %rbx
	movl	16(%rsi,%rbx,8), %eax
	testl	%eax, %eax
	je	.LBB260_11
# %bb.7:                                # %if.end10.i
                                        #   in Loop: Header=BB260_6 Depth=1
	cmpq	%r14, (%rsi,%rbx,8)
	jne	.LBB260_5
# %bb.8:                                # %if.end10.i
                                        #   in Loop: Header=BB260_6 Depth=1
	cmpl	%r8d, %eax
	jne	.LBB260_5
# %bb.9:                                # %if.then8
	incl	20(%rsi,%rbx,8)
	movq	8(%rsi,%rbx,8), %rbx
.LBB260_10:                             # %cleanup24.sink.split
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	%rbx, (%rax)
	movb	$1, %bl
.LBB260_14:                             # %cleanup24
	movq	%r15, %rdi
	callq	halide_mutex_unlock@PLT
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end260:
	.size	_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE18kernel_state_setupIPFS5_PvS3_PKciEJS8_S3_SA_iEEEbS8_PS8_S3_RS5_T_DpT0_, .Lfunc_end260-_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE18kernel_state_setupIPFS5_PvS3_PKciEJS8_S3_SA_iEEEbS8_PS8_S3_RS5_T_DpT0_
                                        # -- End function
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2                               # -- Begin function _ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE6insertERKNS6_17CachedCompilationE
.LCPI261_0:
	.long	0x3f000000                      # float 0.5
	.section	.text._ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE6insertERKNS6_17CachedCompilationE,"axG",@progbits,_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE6insertERKNS6_17CachedCompilationE,comdat
	.weak	_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE6insertERKNS6_17CachedCompilationE
	.p2align	4, 0x90
	.type	_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE6insertERKNS6_17CachedCompilationE,@function
_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE6insertERKNS6_17CachedCompilationE: # @_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE6insertERKNS6_17CachedCompilationE
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	movq	%rsi, %r13
	movq	%rdi, %r12
	movl	8(%rdi), %ebx
	testl	%ebx, %ebx
	jne	.LBB261_6
# %bb.1:                                # %if.then.i
	movl	$3072, %edi                     # imm = 0xC00
	callq	malloc@PLT
	testq	%rax, %rax
	je	.LBB261_23
# %bb.2:                                # %if.end.i
	movq	%rax, %rbx
	movl	$3072, %edx                     # imm = 0xC00
	movq	%rax, %rdi
	xorl	%esi, %esi
	callq	memset@PLT
	movq	16(%r12), %r15
	movq	%rbx, 16(%r12)
	movl	$7, 8(%r12)
	cmpl	$0, 24(%r12)
	jle	.LBB261_5
# %bb.3:                                # %for.body.i
	cmpl	$2, 16(%r15)
	jb	.LBB261_5
# %bb.4:                                # %if.then19.i
	movq	%r12, %rdi
	movq	%r15, %rsi
	callq	_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE6insertERKNS6_17CachedCompilationE@PLT
.LBB261_5:                              # %_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE12resize_tableEi.exit.thread
	movq	%r15, %rdi
	callq	free@PLT
	movl	8(%r12), %ebx
.LBB261_6:                              # %if.end4
	movl	24(%r12), %eax
	incl	%eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movl	$1, %ecx
	shlxl	%ebx, %ecx, %r14d
	vcvtsi2ss	%r14d, %xmm1, %xmm1
	vmulss	.LCPI261_0(%rip), %xmm1, %xmm1
	vucomiss	%xmm1, %xmm0
	jbe	.LBB261_15
# %bb.7:                                # %if.then.i53
	movq	%r13, -56(%rbp)                 # 8-byte Spill
	leal	1(%rbx), %eax
	movl	%eax, -44(%rbp)                 # 4-byte Spill
	shlxl	%eax, %ecx, %eax
	cltq
	shlq	$3, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rdi
	callq	malloc@PLT
	testq	%rax, %rax
	je	.LBB261_23
# %bb.8:                                # %if.end.i58
	movq	%rax, %r13
	movq	%rax, %rdi
	xorl	%esi, %esi
	movq	%r15, %rdx
	callq	memset@PLT
	movq	16(%r12), %r15
	movq	%r13, 16(%r12)
	movl	-44(%rbp), %eax                 # 4-byte Reload
	movl	%eax, 8(%r12)
	cmpl	$0, 24(%r12)
	jle	.LBB261_14
# %bb.9:                                # %if.end.i58
	cmpl	$31, %ebx
	je	.LBB261_14
# %bb.10:                               # %for.body.i66.preheader
	cmpl	$2, %r14d
	movl	$1, %r13d
	cmovgel	%r14d, %r13d
	movq	%r15, %rbx
	jmp	.LBB261_12
	.p2align	4, 0x90
.LBB261_11:                             # %for.inc.i70
                                        #   in Loop: Header=BB261_12 Depth=1
	addq	$24, %rbx
	decq	%r13
	je	.LBB261_14
.LBB261_12:                             # %for.body.i66
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, 16(%rbx)
	jb	.LBB261_11
# %bb.13:                               # %if.then19.i68
                                        #   in Loop: Header=BB261_12 Depth=1
	movq	%r12, %rdi
	movq	%rbx, %rsi
	callq	_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE6insertERKNS6_17CachedCompilationE@PLT
	jmp	.LBB261_11
.LBB261_14:                             # %_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE12resize_tableEi.exit74.thread
	movq	%r15, %rdi
	callq	free@PLT
	movl	8(%r12), %ebx
	movl	24(%r12), %eax
	incl	%eax
	movl	$1, %ecx
	shlxl	%ebx, %ecx, %r14d
	movq	-56(%rbp), %r13                 # 8-byte Reload
.LBB261_15:                             # %if.end14
	movl	%eax, 24(%r12)
	cmpl	$31, %ebx
	je	.LBB261_23
# %bb.17:                               # %for.body.preheader
	movl	16(%r13), %eax
	addq	(%r13), %rax
	movabsq	$-7046029254386353131, %rcx     # imm = 0x9E3779B97F4A7C15
	imulq	%rax, %rcx
	negb	%bl
	shrxq	%rbx, %rcx, %rcx
	leal	-1(%r14), %eax
	movslq	%eax, %rdx
	movq	16(%r12), %rax
	cmpl	$2, %r14d
	movl	$1, %esi
	cmovgel	%r14d, %esi
	.p2align	4, 0x90
.LBB261_18:                             # %for.body
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %rdi
	andq	%rdx, %rdi
	leaq	(%rdi,%rdi,2), %rdi
	cmpl	$1, 16(%rax,%rdi,8)
	jbe	.LBB261_21
# %bb.19:                               # %for.cond
                                        #   in Loop: Header=BB261_18 Depth=1
	incq	%rcx
	decq	%rsi
	jne	.LBB261_18
.LBB261_23:
	xorl	%eax, %eax
.LBB261_24:                             # %return
                                        # kill: def $al killed $al killed $eax
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB261_21:                             # %if.then29
	movq	16(%r13), %rcx
	movq	%rcx, 16(%rax,%rdi,8)
	vmovups	(%r13), %xmm0
	vmovups	%xmm0, (%rax,%rdi,8)
	movb	$1, %al
	jmp	.LBB261_24
.Lfunc_end261:
	.size	_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE6insertERKNS6_17CachedCompilationE, .Lfunc_end261-_ZN6Halide8Internal19GPUCompilationCacheIP11_cl_contextP11_cl_programE6insertERKNS6_17CachedCompilationE
                                        # -- End function
	.section	.text.halide_opencl_finalize_kernels,"ax",@progbits
	.weak	halide_opencl_finalize_kernels  # -- Begin function halide_opencl_finalize_kernels
	.p2align	4, 0x90
	.type	halide_opencl_finalize_kernels,@function
halide_opencl_finalize_kernels:         # @halide_opencl_finalize_kernels
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$32, %rsp
	movq	%rsi, %r14
	movq	%rdi, %r15
	movq	%rdi, -64(%rbp)
	leaq	-56(%rbp), %r12
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, -56(%rbp)
	leaq	-48(%rbp), %rbx
	movl	$0, -40(%rbp)
	movq	_ZN6Halide7Runtime8Internal6OpenCL15clCreateContextE@GOTPCREL(%rip), %rax
	cmpq	$0, (%rax)
	jne	.LBB262_2
# %bb.1:                                # %if.then.i
	movq	%r15, %rdi
	callq	_ZN6Halide7Runtime8Internal6OpenCL14load_libopenclEPv@PLT
.LBB262_2:                              # %if.end.i
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%rbx, %rdx
	movl	$1, %ecx
	callq	halide_acquire_cl_context@PLT
	movl	%eax, -40(%rbp)
	movq	-56(%rbp), %rcx
	testq	%rcx, %rcx
	je	.LBB262_4
# %bb.3:                                # %if.end.i
	cmpq	$0, -48(%rbp)
	je	.LBB262_4
# %bb.8:                                # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit
	testl	%eax, %eax
	jne	.LBB262_17
# %bb.9:                                # %if.then
	movq	_ZN6Halide7Runtime8Internal6OpenCL17compilation_cacheE@GOTPCREL(%rip), %rsi
	movl	8(%rsi), %edi
	testl	%edi, %edi
	je	.LBB262_17
# %bb.10:                               # %if.end.i.i
	cmpl	$31, %edi
	je	.LBB262_17
# %bb.11:                               # %for.body.preheader.i.i
	movl	%r14d, %eax
	addq	%rcx, %rax
	movabsq	$-7046029254386353131, %rdx     # imm = 0x9E3779B97F4A7C15
	imulq	%rax, %rdx
	movl	%edi, %eax
	negb	%al
	shrxq	%rax, %rdx, %rax
	movl	$1, %edx
	shlxl	%edi, %edx, %edi
	leal	-1(%rdi), %ebx
	movslq	%ebx, %r8
	movq	16(%rsi), %rsi
	cmpl	$2, %edi
	cmovgel	%edi, %edx
	jmp	.LBB262_13
	.p2align	4, 0x90
.LBB262_12:                             # %for.cond.i.i
                                        #   in Loop: Header=BB262_13 Depth=1
	incq	%rax
	decq	%rdx
	je	.LBB262_17
.LBB262_13:                             # %for.body.i.i
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rdi
	andq	%r8, %rdi
	leaq	(%rdi,%rdi,2), %rbx
	movl	16(%rsi,%rbx,8), %edi
	testl	%edi, %edi
	je	.LBB262_17
# %bb.14:                               # %if.end10.i.i
                                        #   in Loop: Header=BB262_13 Depth=1
	cmpq	%rcx, (%rsi,%rbx,8)
	jne	.LBB262_12
# %bb.15:                               # %if.end10.i.i
                                        #   in Loop: Header=BB262_13 Depth=1
	cmpl	%r14d, %edi
	jne	.LBB262_12
# %bb.16:                               # %if.then19.i.i
	decl	20(%rsi,%rbx,8)
	jmp	.LBB262_17
.LBB262_4:                              # %if.then9.i
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB262_5
# %bb.6:                                # %if.else.i.i
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.272(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	%r15, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
	jmp	.LBB262_7
.LBB262_5:                              # %if.then.i.i
	leaq	.L.str.272(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
.LBB262_7:                              # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit.thread
	movq	%r15, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-1, -40(%rbp)
.LBB262_17:                             # %if.end
	movq	-64(%rbp), %rdi
	callq	halide_release_cl_context@PLT
	addq	$32, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end262:
	.size	halide_opencl_finalize_kernels, .Lfunc_end262-halide_opencl_finalize_kernels
                                        # -- End function
	.section	.text.halide_opencl_run,"ax",@progbits
	.weak	halide_opencl_run               # -- Begin function halide_opencl_run
	.p2align	4, 0x90
	.type	halide_opencl_run,@function
halide_opencl_run:                      # @halide_opencl_run
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$200, %rsp
	movl	%r9d, -48(%rbp)                 # 4-byte Spill
	movl	%r8d, -72(%rbp)                 # 4-byte Spill
	movl	%ecx, %r14d
	movq	%rdx, %r15
	movq	%rsi, %r12
	movq	%rdi, -128(%rbp)
	leaq	-120(%rbp), %r13
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, -120(%rbp)
	leaq	-112(%rbp), %rbx
	movl	$0, -104(%rbp)
	movq	_ZN6Halide7Runtime8Internal6OpenCL15clCreateContextE@GOTPCREL(%rip), %rax
	cmpq	$0, (%rax)
	movq	%rdi, -56(%rbp)                 # 8-byte Spill
	jne	.LBB263_2
# %bb.1:                                # %if.then.i
	movq	-56(%rbp), %rdi                 # 8-byte Reload
	callq	_ZN6Halide7Runtime8Internal6OpenCL14load_libopenclEPv@PLT
	movq	-56(%rbp), %rdi                 # 8-byte Reload
.LBB263_2:                              # %if.end.i
	movq	%r13, %rsi
	movq	%rbx, %rdx
	movl	$1, %ecx
	callq	halide_acquire_cl_context@PLT
	movl	%eax, -104(%rbp)
	movq	-120(%rbp), %rbx
	testq	%rbx, %rbx
	je	.LBB263_9
# %bb.3:                                # %if.end.i
	cmpq	$0, -112(%rbp)
	je	.LBB263_9
# %bb.4:                                # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit
	movl	%eax, %r13d
	testl	%eax, %eax
	jne	.LBB263_39
# %bb.5:                                # %do.body
	testq	%r12, %r12
	je	.LBB263_18
# %bb.6:                                # %do.body.split
	movq	_ZN6Halide7Runtime8Internal6OpenCL17compilation_cacheE@GOTPCREL(%rip), %r13
	movq	%r13, %rdi
	callq	halide_mutex_lock@PLT
	movl	8(%r13), %edx
	testl	%edx, %edx
	je	.LBB263_19
# %bb.7:                                # %if.end.i.i354
	cmpl	$31, %edx
	je	.LBB263_19
# %bb.8:                                # %for.body.preheader.i.i356
	movl	%r12d, %eax
	addq	%rbx, %rax
	movabsq	$-7046029254386353131, %rcx     # imm = 0x9E3779B97F4A7C15
	imulq	%rax, %rcx
	movl	%edx, %eax
	negb	%al
	shrxq	%rax, %rcx, %rax
	movl	$1, %ecx
	shlxl	%edx, %ecx, %esi
	leal	-1(%rsi), %edx
	movslq	%edx, %r8
	movq	16(%r13), %rdx
	cmpl	$2, %esi
	cmovgel	%esi, %ecx
	jmp	.LBB263_12
.LBB263_9:                              # %if.then9.i
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB263_16
# %bb.10:                               # %if.else.i.i
	leaq	1023(%rbx), %rsi
	movb	$0, 1023(%rbx)
	leaq	.L.str.272(%rip), %rdx
	movq	%rbx, %rdi
	callq	halide_string_to_string@PLT
	subq	%rbx, %rax
	leaq	1(%rax), %rdx
	movq	-56(%rbp), %r14                 # 8-byte Reload
	movq	%r14, %rdi
	movq	%rbx, %rsi
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r14, %rdi
	movq	%rbx, %rsi
	jmp	.LBB263_17
	.p2align	4, 0x90
.LBB263_11:                             # %for.cond.i.i
                                        #   in Loop: Header=BB263_12 Depth=1
	incq	%rax
	decq	%rcx
	je	.LBB263_19
.LBB263_12:                             # %for.body.i.i360
                                        # =>This Inner Loop Header: Depth=1
	movq	%rax, %rsi
	andq	%r8, %rsi
	leaq	(%rsi,%rsi,2), %rdi
	movl	16(%rdx,%rdi,8), %esi
	testl	%esi, %esi
	je	.LBB263_19
# %bb.13:                               # %if.end10.i.i
                                        #   in Loop: Header=BB263_12 Depth=1
	cmpq	%rbx, (%rdx,%rdi,8)
	jne	.LBB263_11
# %bb.14:                               # %if.end10.i.i
                                        #   in Loop: Header=BB263_12 Depth=1
	cmpl	%r12d, %esi
	jne	.LBB263_11
# %bb.15:                               # %do.end
	movq	8(%rdx,%rdi,8), %rbx
	movq	_ZN6Halide7Runtime8Internal6OpenCL17compilation_cacheE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_unlock@PLT
	testq	%rbx, %rbx
	jne	.LBB263_21
	jmp	.LBB263_20
.LBB263_16:                             # %if.then.i.i
	leaq	.L.str.272(%rip), %rdx
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
	movq	-56(%rbp), %rdi                 # 8-byte Reload
.LBB263_17:                             # %_ZN6Halide7Runtime8Internal6OpenCL9ClContextC2EPv.exit.thread
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	movl	$-1, -104(%rbp)
	movl	$-1, %r13d
	jmp	.LBB263_39
.LBB263_18:                             # %if.then24
	leaq	.L.str.159(%rip), %rsi
	movq	-56(%rbp), %rdi                 # 8-byte Reload
	callq	halide_print@PLT
	callq	abort@PLT
	movq	_ZN6Halide7Runtime8Internal6OpenCL17compilation_cacheE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_lock@PLT
.LBB263_19:                             # %if.then29.sink.split
	movq	_ZN6Halide7Runtime8Internal6OpenCL17compilation_cacheE@GOTPCREL(%rip), %rdi
	callq	halide_mutex_unlock@PLT
.LBB263_20:                             # %if.then29
	leaq	.L.str.160(%rip), %rsi
	movq	-56(%rbp), %rdi                 # 8-byte Reload
	callq	halide_print@PLT
	callq	abort@PLT
	xorl	%ebx, %ebx
.LBB263_21:                             # %do.end32
	movq	_ZN6Halide7Runtime8Internal6OpenCL14clCreateKernelE@GOTPCREL(%rip), %rax
	leaq	-44(%rbp), %rdx
	movq	%rbx, %rdi
	movq	%r15, %rsi
	callq	*(%rax)
	movl	-44(%rbp), %edi
	testl	%edi, %edi
	je	.LBB263_24
# %bb.22:                               # %if.then39
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %r14
	testq	%rax, %rax
	je	.LBB263_29
# %bb.23:                               # %if.then6.i
	leaq	1023(%r14), %rbx
	movb	$0, 1023(%r14)
	leaq	.L.str.162(%rip), %rdx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	jmp	.LBB263_30
.LBB263_24:                             # %if.end51
	movq	%rax, %r13
	movq	64(%rbp), %r15
	movq	48(%rbp), %rbx
	movl	32(%rbp), %eax
	movl	24(%rbp), %ecx
	movslq	%r14d, %rdx
	movslq	16(%rbp), %rsi
	imulq	%rsi, %rdx
	movq	%rdx, -216(%rbp)
	movslq	-72(%rbp), %rdx                 # 4-byte Folded Reload
	movslq	%ecx, %rcx
	imulq	%rcx, %rdx
	movq	%rdx, -208(%rbp)
	movslq	-48(%rbp), %rdx                 # 4-byte Folded Reload
	cltq
	imulq	%rax, %rdx
	movq	%rdx, -200(%rbp)
	movq	%rsi, -192(%rbp)
	movq	%rcx, -184(%rbp)
	movq	%rax, -176(%rbp)
	xorl	%r12d, %r12d
	cmpq	$0, (%rbx)
	je	.LBB263_40
# %bb.25:                               # %while.body.preheader
	xorl	%eax, %eax
	jmp	.LBB263_27
	.p2align	4, 0x90
.LBB263_26:                             # %if.end75
                                        #   in Loop: Header=BB263_27 Depth=1
	cmpq	$0, 8(%rbx,%rax,8)
	leaq	1(%rax), %rax
	je	.LBB263_32
.LBB263_27:                             # %while.body
                                        # =>This Inner Loop Header: Depth=1
	cmpb	$0, (%r15,%rax)
	je	.LBB263_26
# %bb.28:                               # %land.lhs.true70
                                        #   in Loop: Header=BB263_27 Depth=1
	movq	56(%rbp), %rcx
	movq	(%rcx,%rax,8), %rcx
	movq	(%rcx), %rcx
	cmpq	$1, (%rcx)
	sbbl	$-1, %r12d
	jmp	.LBB263_26
.LBB263_29:                             # %if.then39.split
	leaq	.L.str.162(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB263_30:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
	callq	halide_string_to_string@PLT
	movq	%rax, %rdi
	movq	%rbx, %rsi
	movq	%r15, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.163(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, %r15
	movl	-44(%rbp), %edi
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	testq	%r14, %r14
	je	.LBB263_35
# %bb.31:                               # %if.else.i
	subq	%r14, %rax
	incq	%rax
	movq	-56(%rbp), %rbx                 # 8-byte Reload
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rdi
	movq	%r14, %rsi
	jmp	.LBB263_36
.LBB263_32:                             # %while.end
	testl	%r12d, %r12d
	jle	.LBB263_41
# %bb.33:                               # %if.then77
	movl	%r12d, %r14d
	shlq	$3, %r14
	movq	%r14, %rdi
	callq	malloc@PLT
	testq	%rax, %rax
	je	.LBB263_111
# %bb.34:                               # %if.end83
	movq	%rax, %r12
	movq	%r13, -80(%rbp)                 # 8-byte Spill
	movq	%rax, %rdi
	xorl	%esi, %esi
	movq	%r14, %rdx
	callq	memset@PLT
	jmp	.LBB263_42
.LBB263_35:
	leaq	.L.str.274(%rip), %rsi
	movq	-56(%rbp), %rdi                 # 8-byte Reload
.LBB263_36:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit
	callq	halide_error@PLT
	movq	%r14, %rdi
.LBB263_37:                             # %cleanup240
	callq	free@PLT
.LBB263_38:                             # %cleanup240
	movl	-44(%rbp), %r13d
.LBB263_39:                             # %cleanup240
	movq	-128(%rbp), %rdi
	callq	halide_release_cl_context@PLT
	movl	%r13d, %eax
	addq	$200, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.LBB263_40:
	movq	%r13, -80(%rbp)                 # 8-byte Spill
	jmp	.LBB263_42
.LBB263_41:
	movq	%r13, -80(%rbp)                 # 8-byte Spill
	xorl	%r12d, %r12d
.LBB263_42:                             # %if.end87
	xorl	%eax, %eax
	movq	%rax, -72(%rbp)                 # 8-byte Spill
	xorl	%r14d, %r14d
                                        # implicit-def: $r13d
	jmp	.LBB263_45
	.p2align	4, 0x90
.LBB263_43:                             # %if.end162
                                        #   in Loop: Header=BB263_45 Depth=1
	movq	-72(%rbp), %rax                 # 8-byte Reload
	incl	%eax
	movq	%rax, -72(%rbp)                 # 8-byte Spill
	testl	%r14d, %r14d
	movq	48(%rbp), %rbx
	movl	-48(%rbp), %r14d                # 4-byte Reload
	jne	.LBB263_39
.LBB263_45:                             # %while.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB263_84 Depth 2
                                        #     Child Loop BB263_56 Depth 2
                                        #     Child Loop BB263_94 Depth 2
                                        #     Child Loop BB263_64 Depth 2
                                        #     Child Loop BB263_80 Depth 2
	movslq	-72(%rbp), %rax                 # 4-byte Folded Reload
	movq	(%rbx,%rax,8), %rdx
	testq	%rdx, %rdx
	je	.LBB263_102
# %bb.46:                               # %while.body92
                                        #   in Loop: Header=BB263_45 Depth=1
	movl	%r14d, -48(%rbp)                # 4-byte Spill
	movq	56(%rbp), %rcx
	movq	(%rcx,%rax,8), %r14
	movl	$0, -60(%rbp)
	cmpb	$0, (%r15,%rax)
	je	.LBB263_58
# %bb.47:                               # %do.body117
                                        #   in Loop: Header=BB263_45 Depth=1
	cmpq	$8, %rdx
	je	.LBB263_49
# %bb.48:                               # %if.then121
                                        #   in Loop: Header=BB263_45 Depth=1
	movq	-56(%rbp), %rdi                 # 8-byte Reload
	leaq	.L.str.167(%rip), %rsi
	callq	halide_print@PLT
	callq	abort@PLT
.LBB263_49:                             # %do.end124
                                        #   in Loop: Header=BB263_45 Depth=1
	movq	(%r14), %rax
	movq	8(%rax), %rdi
	movq	%rdi, -96(%rbp)
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.LBB263_69
# %bb.50:                               # %if.then131
                                        #   in Loop: Header=BB263_45 Depth=1
	movq	%rax, -168(%rbp)
	movl	36(%r14), %r9d
	testl	%r9d, %r9d
	jle	.LBB263_67
# %bb.51:                               # %for.body.preheader.i.i
                                        #   in Loop: Header=BB263_45 Depth=1
	movq	40(%r14), %rax
	leaq	-1(%r9), %r10
	movl	%r9d, %r11d
	andl	$3, %r11d
	cmpq	$3, %r10
	movq	%rax, -88(%rbp)                 # 8-byte Spill
	jae	.LBB263_82
# %bb.52:                               #   in Loop: Header=BB263_45 Depth=1
	xorl	%edx, %edx
	xorl	%r8d, %r8d
.LBB263_53:                             # %for.body.i12.i.preheader.unr-lcssa
                                        #   in Loop: Header=BB263_45 Depth=1
	testq	%r11, %r11
	movq	64(%rbp), %r15
	je	.LBB263_59
# %bb.54:                               # %for.body.i.i.epil.preheader
                                        #   in Loop: Header=BB263_45 Depth=1
	shlq	$4, %rdx
	movq	-88(%rbp), %rax                 # 8-byte Reload
	leaq	(%rax,%rdx), %rcx
	addq	$8, %rcx
	movq	%r11, %rdx
	shlq	$4, %rdx
	xorl	%esi, %esi
	jmp	.LBB263_56
	.p2align	4, 0x90
.LBB263_55:                             # %if.end.i.i.epil
                                        #   in Loop: Header=BB263_56 Depth=2
	addq	$16, %rsi
	cmpq	%rsi, %rdx
	je	.LBB263_59
.LBB263_56:                             # %for.body.i.i.epil
                                        #   Parent Loop BB263_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	(%rcx,%rsi), %ebx
	testl	%ebx, %ebx
	jle	.LBB263_55
# %bb.57:                               # %if.then.i.i349.epil
                                        #   in Loop: Header=BB263_56 Depth=2
	movslq	-4(%rcx,%rsi), %rax
	decq	%rax
	imulq	%rbx, %rax
	addq	%rax, %r8
	jmp	.LBB263_55
	.p2align	4, 0x90
.LBB263_58:                             # %if.else146
                                        #   in Loop: Header=BB263_45 Depth=1
	movq	-80(%rbp), %rdi                 # 8-byte Reload
	movq	-72(%rbp), %rsi                 # 8-byte Reload
                                        # kill: def $esi killed $esi killed $rsi
	movq	%r14, %rcx
	jmp	.LBB263_71
	.p2align	4, 0x90
.LBB263_59:                             # %for.body.i12.i.preheader
                                        #   in Loop: Header=BB263_45 Depth=1
	cmpq	$3, %r10
	jae	.LBB263_92
# %bb.60:                               #   in Loop: Header=BB263_45 Depth=1
	xorl	%edx, %edx
	xorl	%ebx, %ebx
	jmp	.LBB263_61
.LBB263_67:                             #   in Loop: Header=BB263_45 Depth=1
	movl	$1, %r8d
	xorl	%ebx, %ebx
	jmp	.LBB263_68
.LBB263_82:                             # %for.body.preheader.i.i.new
                                        #   in Loop: Header=BB263_45 Depth=1
	movl	%r9d, %r15d
	andl	$-4, %r15d
	leaq	56(%rax), %rbx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	jmp	.LBB263_84
	.p2align	4, 0x90
.LBB263_83:                             # %if.end.i.i.3
                                        #   in Loop: Header=BB263_84 Depth=2
	addq	$4, %rdx
	addq	$64, %rbx
	cmpq	%rdx, %r15
	je	.LBB263_53
.LBB263_84:                             # %for.body.i.i
                                        #   Parent Loop BB263_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbx), %ecx
	testl	%ecx, %ecx
	jle	.LBB263_86
# %bb.85:                               # %if.then.i.i349
                                        #   in Loop: Header=BB263_84 Depth=2
	movslq	-52(%rbx), %rsi
	decq	%rsi
	imulq	%rcx, %rsi
	addq	%rsi, %r8
.LBB263_86:                             # %if.end.i.i
                                        #   in Loop: Header=BB263_84 Depth=2
	movl	-32(%rbx), %ecx
	testl	%ecx, %ecx
	jle	.LBB263_88
# %bb.87:                               # %if.then.i.i349.1
                                        #   in Loop: Header=BB263_84 Depth=2
	movslq	-36(%rbx), %rax
	decq	%rax
	imulq	%rcx, %rax
	addq	%rax, %r8
.LBB263_88:                             # %if.end.i.i.1
                                        #   in Loop: Header=BB263_84 Depth=2
	movl	-16(%rbx), %ecx
	testl	%ecx, %ecx
	jle	.LBB263_90
# %bb.89:                               # %if.then.i.i349.2
                                        #   in Loop: Header=BB263_84 Depth=2
	movslq	-20(%rbx), %rax
	decq	%rax
	imulq	%rcx, %rax
	addq	%rax, %r8
.LBB263_90:                             # %if.end.i.i.2
                                        #   in Loop: Header=BB263_84 Depth=2
	movl	(%rbx), %ecx
	testl	%ecx, %ecx
	jle	.LBB263_83
# %bb.91:                               # %if.then.i.i349.3
                                        #   in Loop: Header=BB263_84 Depth=2
	movslq	-4(%rbx), %rax
	decq	%rax
	imulq	%rcx, %rax
	addq	%rax, %r8
	jmp	.LBB263_83
.LBB263_92:                             # %for.body.i12.i.preheader.new
                                        #   in Loop: Header=BB263_45 Depth=1
	movl	%r9d, %r10d
	andl	$-4, %r10d
	movq	-88(%rbp), %rax                 # 8-byte Reload
	leaq	56(%rax), %rcx
	xorl	%edx, %edx
	xorl	%ebx, %ebx
	jmp	.LBB263_94
	.p2align	4, 0x90
.LBB263_100:                            # %if.then.i18.i.2
                                        #   in Loop: Header=BB263_94 Depth=2
	movslq	-20(%rcx), %rax
	decq	%rax
	imulq	%rsi, %rax
	addq	%rax, %rbx
	movslq	(%rcx), %rsi
	testq	%rsi, %rsi
	js	.LBB263_101
.LBB263_93:                             # %if.end.i22.i.3
                                        #   in Loop: Header=BB263_94 Depth=2
	addq	$4, %rdx
	addq	$64, %rcx
	cmpq	%rdx, %r10
	je	.LBB263_61
.LBB263_94:                             # %for.body.i12.i
                                        #   Parent Loop BB263_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	-48(%rcx), %rsi
	testq	%rsi, %rsi
	js	.LBB263_98
# %bb.95:                               # %if.end.i22.i
                                        #   in Loop: Header=BB263_94 Depth=2
	movslq	-32(%rcx), %rsi
	testq	%rsi, %rsi
	js	.LBB263_99
.LBB263_96:                             # %if.end.i22.i.1
                                        #   in Loop: Header=BB263_94 Depth=2
	movslq	-16(%rcx), %rsi
	testq	%rsi, %rsi
	jns	.LBB263_97
	jmp	.LBB263_100
	.p2align	4, 0x90
.LBB263_98:                             # %if.then.i18.i
                                        #   in Loop: Header=BB263_94 Depth=2
	movslq	-52(%rcx), %rax
	decq	%rax
	imulq	%rsi, %rax
	addq	%rax, %rbx
	movslq	-32(%rcx), %rsi
	testq	%rsi, %rsi
	jns	.LBB263_96
.LBB263_99:                             # %if.then.i18.i.1
                                        #   in Loop: Header=BB263_94 Depth=2
	movslq	-36(%rcx), %rax
	decq	%rax
	imulq	%rsi, %rax
	addq	%rax, %rbx
	movslq	-16(%rcx), %rsi
	testq	%rsi, %rsi
	js	.LBB263_100
.LBB263_97:                             # %if.end.i22.i.2
                                        #   in Loop: Header=BB263_94 Depth=2
	movslq	(%rcx), %rsi
	testq	%rsi, %rsi
	jns	.LBB263_93
.LBB263_101:                            # %if.then.i18.i.3
                                        #   in Loop: Header=BB263_94 Depth=2
	movslq	-4(%rcx), %rax
	decq	%rax
	imulq	%rsi, %rax
	addq	%rax, %rbx
	addq	$4, %rdx
	addq	$64, %rcx
	cmpq	%rdx, %r10
	jne	.LBB263_94
	.p2align	4, 0x90
.LBB263_61:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit.unr-lcssa
                                        #   in Loop: Header=BB263_45 Depth=1
	testb	$3, %r9b
	je	.LBB263_66
# %bb.62:                               # %for.body.i12.i.epil.preheader
                                        #   in Loop: Header=BB263_45 Depth=1
	shlq	$4, %rdx
	movq	-88(%rbp), %rax                 # 8-byte Reload
	leaq	(%rax,%rdx), %rcx
	addq	$8, %rcx
	shlq	$4, %r11
	xorl	%edx, %edx
	jmp	.LBB263_64
	.p2align	4, 0x90
.LBB263_63:                             # %if.end.i22.i.epil
                                        #   in Loop: Header=BB263_64 Depth=2
	addq	$16, %rdx
	cmpq	%rdx, %r11
	je	.LBB263_66
.LBB263_64:                             # %for.body.i12.i.epil
                                        #   Parent Loop BB263_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	(%rcx,%rdx), %rsi
	testq	%rsi, %rsi
	jns	.LBB263_63
# %bb.65:                               # %if.then.i18.i.epil
                                        #   in Loop: Header=BB263_64 Depth=2
	movslq	-4(%rcx,%rdx), %rax
	decq	%rax
	imulq	%rsi, %rax
	addq	%rax, %rbx
	jmp	.LBB263_63
	.p2align	4, 0x90
.LBB263_66:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
                                        #   in Loop: Header=BB263_45 Depth=1
	incq	%r8
.LBB263_68:                             # %_ZNK15halide_buffer_t13size_in_bytesEv.exit
                                        #   in Loop: Header=BB263_45 Depth=1
	subq	%rbx, %r8
	movzbl	33(%r14), %eax
	addq	$7, %rax
	shrq	$3, %rax
	imulq	%r8, %rax
	movq	%rax, -160(%rbp)
	movl	$1, %esi
	movl	$4640, %edx                     # imm = 0x1220
	leaq	-168(%rbp), %rcx
	leaq	-60(%rbp), %r8
	movq	_ZN6Halide7Runtime8Internal6OpenCL17clCreateSubBufferE@GOTPCREL(%rip), %rax
	callq	*(%rax)
	movq	%rax, -96(%rbp)
	movl	-48(%rbp), %edx                 # 4-byte Reload
	movslq	%edx, %rcx
	incl	%edx
	movl	%edx, -48(%rbp)                 # 4-byte Spill
	movq	%rax, (%r12,%rcx,8)
.LBB263_69:                             # %if.end137
                                        #   in Loop: Header=BB263_45 Depth=1
	movl	-60(%rbp), %r14d
	testl	%r14d, %r14d
	jne	.LBB263_72
# %bb.70:                               # %if.then139
                                        #   in Loop: Header=BB263_45 Depth=1
	movl	$8, %edx
	movq	-80(%rbp), %rdi                 # 8-byte Reload
	movq	-72(%rbp), %rsi                 # 8-byte Reload
                                        # kill: def $esi killed $esi killed $rsi
	leaq	-96(%rbp), %rcx
.LBB263_71:                             # %if.end150
                                        #   in Loop: Header=BB263_45 Depth=1
	movq	_ZN6Halide7Runtime8Internal6OpenCL14clSetKernelArgE@GOTPCREL(%rip), %rax
	callq	*(%rax)
	movl	%eax, %r14d
	movl	%eax, -60(%rbp)
.LBB263_72:                             # %if.end150
                                        #   in Loop: Header=BB263_45 Depth=1
	testl	%r14d, %r14d
	je	.LBB263_43
# %bb.73:                               # %if.then152
                                        #   in Loop: Header=BB263_45 Depth=1
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB263_75
# %bb.74:                               # %if.then6.i427
                                        #   in Loop: Header=BB263_45 Depth=1
	leaq	1023(%rbx), %r15
	movb	$0, 1023(%rbx)
	movq	%rbx, %rdi
	movq	%r15, %rsi
	leaq	.L.str.169(%rip), %rdx
	callq	halide_string_to_string@PLT
	movq	%rax, %r13
	jmp	.LBB263_76
	.p2align	4, 0x90
.LBB263_75:                             # %if.then152.split
                                        #   in Loop: Header=BB263_45 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	leaq	.L.str.169(%rip), %rdx
	callq	halide_string_to_string@PLT
	movq	%rax, %r13
	xorl	%r15d, %r15d
.LBB263_76:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit430
                                        #   in Loop: Header=BB263_45 Depth=1
	movl	-60(%rbp), %edi
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	%r13, %rdi
	movq	%r15, %rsi
	movq	%rax, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.274(%rip), %rsi
	testq	%rbx, %rbx
	movq	-56(%rbp), %r15                 # 8-byte Reload
	je	.LBB263_78
# %bb.77:                               # %if.else.i450
                                        #   in Loop: Header=BB263_45 Depth=1
	subq	%rbx, %rax
	incq	%rax
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%rbx, %rsi
.LBB263_78:                             # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit458
                                        #   in Loop: Header=BB263_45 Depth=1
	movq	%r15, %rdi
	callq	halide_error@PLT
	movq	%rbx, %rdi
	callq	free@PLT
	cmpl	$0, -48(%rbp)                   # 4-byte Folded Reload
	movq	_ZN6Halide7Runtime8Internal6OpenCL18clReleaseMemObjectE@GOTPCREL(%rip), %r13
	jle	.LBB263_81
# %bb.79:                               # %for.body.preheader
                                        #   in Loop: Header=BB263_45 Depth=1
	movl	-48(%rbp), %r15d                # 4-byte Reload
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB263_80:                             # %for.body
                                        #   Parent Loop BB263_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	(%r12,%rbx,8), %rdi
	callq	*(%r13)
	incq	%rbx
	cmpq	%rbx, %r15
	jne	.LBB263_80
.LBB263_81:                             # %for.cond.cleanup
                                        #   in Loop: Header=BB263_45 Depth=1
	movq	%r12, %rdi
	callq	free@PLT
	movl	-60(%rbp), %r13d
	movq	64(%rbp), %r15
	testl	%r14d, %r14d
	movq	48(%rbp), %rbx
	movl	-48(%rbp), %r14d                # 4-byte Reload
	je	.LBB263_45
	jmp	.LBB263_39
.LBB263_102:                            # %while.end165
	movl	40(%rbp), %eax
	testl	%eax, %eax
	movl	$1, %edx
	cmovgl	%eax, %edx
	movq	-80(%rbp), %r15                 # 8-byte Reload
	movq	%r15, %rdi
	movq	-72(%rbp), %rsi                 # 8-byte Reload
                                        # kill: def $esi killed $esi killed $rsi
	xorl	%ecx, %ecx
	movq	_ZN6Halide7Runtime8Internal6OpenCL14clSetKernelArgE@GOTPCREL(%rip), %rax
	callq	*(%rax)
	movl	%eax, -44(%rbp)
	testl	%eax, %eax
	je	.LBB263_105
# %bb.103:                              # %if.then176
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, %rbx
	testq	%rax, %rax
	je	.LBB263_112
# %bb.104:                              # %if.then6.i467
	leaq	1023(%rbx), %r14
	movb	$0, 1023(%rbx)
	leaq	.L.str.171(%rip), %rdx
	movq	%rbx, %rdi
	movq	%r14, %rsi
	jmp	.LBB263_113
.LBB263_105:                            # %if.end181
	movq	_ZN6Halide7Runtime8Internal6OpenCL22clEnqueueNDRangeKernelE@GOTPCREL(%rip), %rax
	movq	-112(%rbp), %rdi
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, 8(%rsp)
	movl	$0, (%rsp)
	leaq	-216(%rbp), %r8
	leaq	-192(%rbp), %r9
	movq	%r15, %rsi
	movl	$3, %edx
	xorl	%ecx, %ecx
	callq	*(%rax)
	movl	%eax, -44(%rbp)
	movl	%eax, %edi
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	testl	%r14d, %r14d
	movq	_ZN6Halide7Runtime8Internal6OpenCL18clReleaseMemObjectE@GOTPCREL(%rip), %r13
	jle	.LBB263_108
# %bb.106:                              # %for.body206.preheader
	movl	%r14d, %r14d
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB263_107:                            # %for.body206
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r12,%rbx,8), %rdi
	callq	*(%r13)
	incq	%rbx
	cmpq	%rbx, %r14
	jne	.LBB263_107
.LBB263_108:                            # %for.cond.cleanup205
	movq	%r12, %rdi
	callq	free@PLT
	cmpl	$0, -44(%rbp)
	je	.LBB263_117
# %bb.109:                              # %if.then215
	movq	-56(%rbp), %rax                 # 8-byte Reload
	movq	%rax, -144(%rbp)
	movb	$1, -136(%rbp)
	movl	$1024, %edi                     # imm = 0x400
	callq	malloc@PLT
	movq	%rax, -168(%rbp)
	testq	%rax, %rax
	je	.LBB263_118
# %bb.110:                              # %if.then6.i507
	movq	%rax, %rbx
	addq	$1023, %rbx                     # imm = 0x3FF
	movb	$0, 1023(%rax)
	leaq	.L.str.173(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	jmp	.LBB263_119
.LBB263_111:
	movl	$-11, %r13d
	jmp	.LBB263_39
.LBB263_112:                            # %if.then176.split
	leaq	.L.str.171(%rip), %rdx
	xorl	%r14d, %r14d
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB263_113:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit470
	callq	halide_string_to_string@PLT
	movq	%rax, %r15
	movl	-44(%rbp), %edi
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rax, %rdx
	callq	halide_string_to_string@PLT
	testq	%rbx, %rbx
	je	.LBB263_115
# %bb.114:                              # %if.else.i490
	subq	%rbx, %rax
	incq	%rax
	movq	-56(%rbp), %r14                 # 8-byte Reload
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_msan_annotate_memory_is_initialized@PLT
	movq	%r14, %rdi
	movq	%rbx, %rsi
	jmp	.LBB263_116
.LBB263_115:
	leaq	.L.str.274(%rip), %rsi
	movq	-56(%rbp), %rdi                 # 8-byte Reload
.LBB263_116:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit498
	callq	halide_error@PLT
	movq	%rbx, %rdi
	jmp	.LBB263_37
.LBB263_117:                            # %if.end221
	movq	_ZN6Halide7Runtime8Internal6OpenCL15clReleaseKernelE@GOTPCREL(%rip), %rax
	movq	%r15, %rdi
	callq	*(%rax)
	xorl	%r13d, %r13d
	jmp	.LBB263_39
.LBB263_118:                            # %if.then215.split
	leaq	.L.str.173(%rip), %rdx
	xorl	%ebx, %ebx
	xorl	%edi, %edi
	xorl	%esi, %esi
.LBB263_119:                            # %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit510
	callq	halide_string_to_string@PLT
	movq	%rax, %r14
	movq	%rbx, -152(%rbp)
	movl	-44(%rbp), %edi
	callq	_ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi@PLT
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_string_to_string@PLT
	leaq	.L.str.4.215(%rip), %rdx
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	halide_string_to_string@PLT
	movq	%rax, -160(%rbp)
	leaq	-168(%rbp), %rdi
	callq	_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev
	jmp	.LBB263_38
.Lfunc_end263:
	.size	halide_opencl_run, .Lfunc_end263-halide_opencl_run
                                        # -- End function
	.section	.text.halide_opencl_get_cl_mem,"ax",@progbits
	.weak	halide_opencl_get_cl_mem        # -- Begin function halide_opencl_get_cl_mem
	.p2align	4, 0x90
	.type	halide_opencl_get_cl_mem,@function
halide_opencl_get_cl_mem:               # @halide_opencl_get_cl_mem
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%rax
	movq	(%rsi), %rax
	testq	%rax, %rax
	je	.LBB264_1
# %bb.2:                                # %do.body
	movq	%rsi, %rbx
	movq	8(%rsi), %rcx
	cmpq	_ZN6Halide7Runtime8Internal6OpenCL23opencl_device_interfaceE@GOTPCREL(%rip), %rcx
	je	.LBB264_5
# %bb.3:                                # %do.body
	cmpq	_ZN6Halide7Runtime8Internal6OpenCL29opencl_image_device_interfaceE@GOTPCREL(%rip), %rcx
	je	.LBB264_5
# %bb.4:                                # %if.then4
	leaq	.L.str.178(%rip), %rsi
	callq	halide_print@PLT
	callq	abort@PLT
	movq	(%rbx), %rax
.LBB264_5:                              # %do.end
	movq	8(%rax), %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
.LBB264_1:
	xorl	%eax, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end264:
	.size	halide_opencl_get_cl_mem, .Lfunc_end264-halide_opencl_get_cl_mem
                                        # -- End function
	.section	.text.halide_opencl_get_crop_offset,"ax",@progbits
	.weak	halide_opencl_get_crop_offset   # -- Begin function halide_opencl_get_crop_offset
	.p2align	4, 0x90
	.type	halide_opencl_get_crop_offset,@function
halide_opencl_get_crop_offset:          # @halide_opencl_get_crop_offset
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rbx
	pushq	%rax
	movq	(%rsi), %rax
	testq	%rax, %rax
	je	.LBB265_1
# %bb.2:                                # %do.body
	movq	%rsi, %rbx
	movq	8(%rsi), %rcx
	cmpq	_ZN6Halide7Runtime8Internal6OpenCL23opencl_device_interfaceE@GOTPCREL(%rip), %rcx
	je	.LBB265_4
# %bb.3:                                # %if.then2
	leaq	.L.str.179(%rip), %rsi
	callq	halide_print@PLT
	callq	abort@PLT
	movq	(%rbx), %rax
.LBB265_4:                              # %do.end
	movq	(%rax), %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
.LBB265_1:
	xorl	%eax, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end265:
	.size	halide_opencl_get_crop_offset, .Lfunc_end265-halide_opencl_get_crop_offset
                                        # -- End function
	.section	.text.halide_opencl_device_interface,"ax",@progbits
	.weak	halide_opencl_device_interface  # -- Begin function halide_opencl_device_interface
	.p2align	4, 0x90
	.type	halide_opencl_device_interface,@function
halide_opencl_device_interface:         # @halide_opencl_device_interface
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal6OpenCL23opencl_device_interfaceE@GOTPCREL(%rip), %rax
	popq	%rbp
	retq
.Lfunc_end266:
	.size	halide_opencl_device_interface, .Lfunc_end266-halide_opencl_device_interface
                                        # -- End function
	.section	.text.halide_opencl_image_device_interface,"ax",@progbits
	.weak	halide_opencl_image_device_interface # -- Begin function halide_opencl_image_device_interface
	.p2align	4, 0x90
	.type	halide_opencl_image_device_interface,@function
halide_opencl_image_device_interface:   # @halide_opencl_image_device_interface
# %bb.0:                                # %entry
	pushq	%rbp
	movq	%rsp, %rbp
	movq	_ZN6Halide7Runtime8Internal6OpenCL29opencl_image_device_interfaceE@GOTPCREL(%rip), %rax
	popq	%rbp
	retq
.Lfunc_end267:
	.size	halide_opencl_image_device_interface, .Lfunc_end267-halide_opencl_image_device_interface
                                        # -- End function
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	5                               # -- Begin function simple_ex
.LCPI268_0:
	.long	0                               # 0x0
	.long	3                               # 0x3
	.long	1                               # 0x1
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	7                               # 0x7
	.long	3                               # 0x3
	.long	0                               # 0x0
.LCPI268_1:
	.long	0                               # 0x0
	.long	7                               # 0x7
	.long	21                              # 0x15
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	147                             # 0x93
	.long	0                               # 0x0
.LCPI268_2:
	.long	0                               # 0x0
	.long	64                              # 0x40
	.long	1                               # 0x1
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	3                               # 0x3
	.long	64                              # 0x40
	.long	0                               # 0x0
.LCPI268_4:
	.quad	262144                          # 0x40000
	.quad	2097152                         # 0x200000
	.quad	4096                            # 0x1000
	.quad	4194304                         # 0x400000
.LCPI268_5:
	.quad	16384                           # 0x4000
	.quad	1024                            # 0x400
	.quad	65536                           # 0x10000
	.quad	0                               # 0x0
.LCPI268_6:
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.quad	128                             # 0x80
.LCPI268_8:
	.quad	-9223372036854775806            # 0x8000000000000002
	.quad	1099511627776                   # 0x10000000000
	.quad	8                               # 0x8
	.quad	4                               # 0x4
.LCPI268_9:
	.quad	2199023255552                   # 0x20000000000
	.quad	32                              # 0x20
	.quad	16                              # 0x10
	.quad	4398046511104                   # 0x40000000000
.LCPI268_10:
	.quad	131072                          # 0x20000
	.quad	65536                           # 0x10000
	.quad	524288                          # 0x80000
	.quad	262144                          # 0x40000
.LCPI268_11:
	.quad	128                             # 0x80
	.quad	64                              # 0x40
	.quad	1024                            # 0x400
	.quad	512                             # 0x200
.LCPI268_12:
	.quad	4096                            # 0x1000
	.quad	2048                            # 0x800
	.quad	16384                           # 0x4000
	.quad	8192                            # 0x2000
.LCPI268_13:
	.quad	8                               # 0x8
	.quad	4                               # 0x4
	.quad	32                              # 0x20
	.quad	16                              # 0x10
.LCPI268_14:
	.quad	8                               # 0x8
	.quad	8                               # 0x8
	.quad	4                               # 0x4
	.quad	4                               # 0x4
.LCPI268_16:
	.quad	8                               # 0x8
	.quad	8                               # 0x8
	.quad	8                               # 0x8
	.quad	4                               # 0x4
.LCPI268_17:
	.quad	4                               # 0x4
	.quad	4                               # 0x4
	.quad	4                               # 0x4
	.quad	0                               # 0x0
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI268_3:
	.long	0                               # 0x0
	.long	3                               # 0x3
	.long	192                             # 0xc0
	.long	0                               # 0x0
.LCPI268_7:
	.quad	-9223372036854775808            # 0x8000000000000000
	.quad	0                               # 0x0
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3
.LCPI268_15:
	.quad	4                               # 0x4
	.section	.text.simple_ex,"ax",@progbits
	.globl	simple_ex
	.p2align	4, 0x90
	.type	simple_ex,@function
simple_ex:                              # @simple_ex
# %bb.0:                                # %entry
	pushq	%rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$3176, %rsp                     # imm = 0xC68
	movq	%r8, %r15
	movq	%rcx, %rbx
	movq	%rdx, %r13
	movq	%rsi, %r12
	movq	%rdi, %rbp
	leaq	.Lopencl_buf.data(%rip), %rsi
	leaq	.Lopencl_gpu_source_kernels.data(%rip), %rdx
	xorl	%edi, %edi
	movl	$23235, %ecx                    # imm = 0x5AC3
	callq	halide_opencl_initialize_kernels@PLT
	testl	%eax, %eax
	jne	.LBB268_80
# %bb.1:                                # %"assert succeeded"
	movabsq	$-9223372036854775808, %r8      # imm = 0x8000000000000000
	xorl	%eax, %eax
	movq	%rbx, 488(%rsp)                 # 8-byte Spill
	testq	%rbx, %rbx
	sete	%al
	xorl	%ecx, %ecx
	testq	%r13, %r13
	sete	%cl
	xorl	%edx, %edx
	testq	%r15, %r15
	sete	%dl
	xorl	%esi, %esi
	testq	%r12, %r12
	sete	%sil
	shlq	$4, %rsi
	leaq	8(%r8), %rdi
	testq	%rbp, %rbp
	cmovneq	%r8, %rdi
	orq	%rsi, %rdi
	leaq	(%rdi,%rcx,2), %rcx
	orq	%rax, %rcx
	leaq	(%rcx,%rdx,4), %rax
	tzcntq	%rax, %rax
	cmpl	$4, %eax
	jbe	.LBB268_81
# %bb.2:                                # %no_errors_bb
	movq	%rbp, %r10
	movq	40(%rbp), %rsi
	movl	(%rsi), %ecx
	movl	4(%rsi), %r8d
	movq	40(%r15), %rdi
	movl	(%rdi), %r9d
	movl	48(%rdi), %ebx
	movl	52(%rdi), %eax
	movq	%rax, 48(%rsp)                  # 8-byte Spill
	addl	%ebx, %eax
	cmpl	$65, %eax
	movl	$64, %ebp
	movl	%eax, 120(%rsp)                 # 4-byte Spill
	cmovgel	%eax, %ebp
	movl	%ebp, 200(%rsp)                 # 4-byte Spill
	movl	4(%rdi), %edx
	movl	%ebx, %eax
	sarl	$31, %eax
	movq	%rbx, 128(%rsp)                 # 8-byte Spill
	andl	%ebx, %eax
	movl	%eax, 96(%rsp)                  # 4-byte Spill
	leal	(%r8,%rcx), %ebp
	movq	%rdx, 40(%rsp)                  # 8-byte Spill
	leal	(%rdx,%r9), %eax
	cmpl	%eax, %ebp
	movl	%ebp, %ebx
	movl	%eax, 296(%rsp)                 # 4-byte Spill
	cmovgl	%eax, %ebx
	leal	1(%rcx), %eax
	cmpl	%eax, %ebx
	cmovlel	%eax, %ebx
	movl	%ebx, 88(%rsp)                  # 4-byte Spill
	movq	%r8, 144(%rsp)                  # 8-byte Spill
	leal	(%r8,%rcx), %eax
	decl	%eax
	movl	%ebp, 300(%rsp)                 # 4-byte Spill
	cmpl	%ebp, %r9d
	movq	%rax, 1320(%rsp)                # 8-byte Spill
	movl	%eax, %r8d
	movq	%r9, 112(%rsp)                  # 8-byte Spill
	cmovll	%r9d, %r8d
	cmpl	%ecx, %r8d
	movq	%rcx, 576(%rsp)                 # 8-byte Spill
	cmovlel	%ecx, %r8d
	movslq	20(%rdi), %r9
	leal	1(%r9), %eax
	andl	$-16, %eax
	movl	16(%rsi), %edx
	movl	20(%rsi), %r11d
	movl	16(%rdi), %ecx
	leal	(%r11,%rdx), %ebp
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	leal	(%rcx,%rax), %ebx
	addl	$22, %ebx
	cmpl	%ebx, %ebp
	cmovlel	%ebp, %ebx
	leal	1(%rdx), %eax
	cmpl	%eax, %ebx
	cmovlel	%eax, %ebx
	movl	%ebx, 32(%rsp)                  # 4-byte Spill
	movl	%ebp, 340(%rsp)                 # 4-byte Spill
	subl	%ecx, %ebp
	movl	%ebp, 640(%rsp)                 # 4-byte Spill
	movq	%r11, 80(%rsp)                  # 8-byte Spill
	leal	-1(%r11,%rdx), %eax
	movq	%rax, 1312(%rsp)                # 8-byte Spill
                                        # kill: def $eax killed $eax killed $rax
	movq	%rcx, 168(%rsp)                 # 8-byte Spill
	cmovgl	%ecx, %eax
	cmpl	%edx, %eax
	movq	%rdx, 568(%rsp)                 # 8-byte Spill
	cmovlel	%edx, %eax
	movl	%eax, 352(%rsp)                 # 4-byte Spill
	movslq	36(%rdi), %rbp
	leal	1(%rbp), %eax
	andl	$-8, %eax
	movl	32(%rsi), %edx
	movq	%r15, %r14
	movl	36(%rsi), %r15d
	movl	32(%rdi), %ecx
	leal	(%r15,%rdx), %ebx
	movq	%rax, 504(%rsp)                 # 8-byte Spill
	leal	(%rcx,%rax), %r11d
	addl	$14, %r11d
	cmpl	%r11d, %ebx
	cmovlel	%ebx, %r11d
	leal	1(%rdx), %eax
	cmpl	%eax, %r11d
	cmovlel	%eax, %r11d
	movl	%r11d, 24(%rsp)                 # 4-byte Spill
	movl	%ebx, 336(%rsp)                 # 4-byte Spill
	subl	%ecx, %ebx
	movl	%ebx, 636(%rsp)                 # 4-byte Spill
	movq	%r15, 208(%rsp)                 # 8-byte Spill
	leal	-1(%r15,%rdx), %eax
	movq	%rax, 1304(%rsp)                # 8-byte Spill
                                        # kill: def $eax killed $eax killed $rax
	movq	%rcx, 160(%rsp)                 # 8-byte Spill
	cmovgl	%ecx, %eax
	cmpl	%edx, %eax
	movq	%rdx, 560(%rsp)                 # 8-byte Spill
	cmovlel	%edx, %eax
	movl	%eax, 344(%rsp)                 # 4-byte Spill
	movl	48(%rsi), %eax
	movl	52(%rsi), %ecx
	movq	%rcx, 136(%rsp)                 # 8-byte Spill
	addl	%eax, %ecx
	cmpl	$3, %ecx
	movl	$3, %ebx
	cmovll	%ecx, %ebx
	testl	%ecx, %ecx
	movl	$1, %edx
	movq	%rcx, 544(%rsp)                 # 8-byte Spill
	cmovlel	%ecx, %edx
	decl	%edx
	cmpl	%eax, %edx
	movq	%rax, 552(%rsp)                 # 8-byte Spill
	cmovlel	%eax, %edx
	movl	%edx, 72(%rsp)                  # 4-byte Spill
	cmpq	$9, %rbp
	movl	$8, %edx
	movq	%rbp, 56(%rsp)                  # 8-byte Spill
	cmovgel	%ebp, %edx
	movl	8(%rsi), %eax
	movl	%eax, 464(%rsp)                 # 4-byte Spill
	movl	24(%rsi), %eax
	movl	%eax, 292(%rsp)                 # 4-byte Spill
	movl	40(%rsi), %eax
	movl	%eax, 288(%rsp)                 # 4-byte Spill
	movl	56(%rsi), %eax
	movl	%eax, 284(%rsp)                 # 4-byte Spill
	cmpq	$17, %r9
	movl	8(%rdi), %eax
	movl	%eax, 456(%rsp)                 # 4-byte Spill
	movl	24(%rdi), %eax
	movl	%eax, 316(%rsp)                 # 4-byte Spill
	movl	40(%rdi), %eax
	movl	%eax, 312(%rsp)                 # 4-byte Spill
	movslq	56(%rdi), %rax
	movq	%rax, 608(%rsp)                 # 8-byte Spill
	movq	40(%r13), %rax
	movl	(%rax), %ecx
	movq	%rcx, 480(%rsp)                 # 8-byte Spill
	movl	4(%rax), %ebp
	movl	8(%rax), %ecx
	movl	%ecx, 448(%rsp)                 # 4-byte Spill
	movl	16(%rax), %ecx
	movq	%rcx, 104(%rsp)                 # 8-byte Spill
	movl	20(%rax), %ecx
	movq	%rcx, 256(%rsp)                 # 8-byte Spill
	movl	24(%rax), %ecx
	movl	%ecx, 280(%rsp)                 # 4-byte Spill
	movl	32(%rax), %ecx
	movq	%rcx, 8(%rsp)                   # 8-byte Spill
	movl	36(%rax), %ecx
	movq	%rcx, 248(%rsp)                 # 8-byte Spill
	movl	40(%rax), %ecx
	movl	%ecx, 276(%rsp)                 # 4-byte Spill
	movl	48(%rax), %ecx
	movq	%rcx, 328(%rsp)                 # 8-byte Spill
	movl	52(%rax), %ecx
	movq	%rcx, 240(%rsp)                 # 8-byte Spill
	movslq	56(%rax), %rax
	movq	%rax, 592(%rsp)                 # 8-byte Spill
	movl	$16, %esi
	movq	%r9, 64(%rsp)                   # 8-byte Spill
	cmovgel	%r9d, %esi
	cmpq	$0, 16(%r12)
	movq	488(%rsp), %r11                 # 8-byte Reload
	movq	40(%r11), %rax
	movl	(%rax), %ecx
	movq	%rcx, 536(%rsp)                 # 8-byte Spill
	movl	4(%rax), %ecx
	movq	%rcx, 176(%rsp)                 # 8-byte Spill
	movl	8(%rax), %ecx
	movl	%ecx, 440(%rsp)                 # 4-byte Spill
	movl	16(%rax), %ecx
	movq	%rcx, 512(%rsp)                 # 8-byte Spill
	movl	20(%rax), %ecx
	movq	%rcx, 232(%rsp)                 # 8-byte Spill
	movl	24(%rax), %ecx
	movl	%ecx, 308(%rsp)                 # 4-byte Spill
	movl	32(%rax), %ecx
	movq	%rcx, 520(%rsp)                 # 8-byte Spill
	movl	36(%rax), %ecx
	movq	%rcx, 224(%rsp)                 # 8-byte Spill
	movl	40(%rax), %ecx
	movl	%ecx, 304(%rsp)                 # 4-byte Spill
	movl	48(%rax), %ecx
	movq	%rcx, 528(%rsp)                 # 8-byte Spill
	movl	52(%rax), %ecx
	movq	%rcx, 216(%rsp)                 # 8-byte Spill
	movslq	56(%rax), %rax
	movq	%rax, 600(%rsp)                 # 8-byte Spill
	movq	.Lopencl_buf.data(%rip), %rax
	movq	%rax, (%rsp)                    # 8-byte Spill
	movl	32(%r12), %eax
	movl	%eax, 424(%rsp)                 # 4-byte Spill
	movl	36(%r12), %r9d
	movq	40(%r12), %rax
	movl	(%rax), %ecx
	movq	%rcx, 472(%rsp)                 # 8-byte Spill
	movl	4(%rax), %ecx
	movq	%rcx, 152(%rsp)                 # 8-byte Spill
	movl	8(%rax), %ecx
	movl	%ecx, 432(%rsp)                 # 4-byte Spill
	movl	32(%r10), %ecx
	movl	%ecx, 416(%rsp)                 # 4-byte Spill
	movq	%r10, %r15
	movl	36(%r10), %ecx
	movl	%ecx, 408(%rsp)                 # 4-byte Spill
	movl	32(%r14), %ecx
	movl	%ecx, 400(%rsp)                 # 4-byte Spill
	movl	36(%r14), %ecx
	movl	%ecx, 392(%rsp)                 # 4-byte Spill
	movl	32(%r13), %ecx
	movl	%ecx, 384(%rsp)                 # 4-byte Spill
	movl	36(%r13), %ecx
	movl	%ecx, 376(%rsp)                 # 4-byte Spill
	movl	32(%r11), %ecx
	movl	%ecx, 368(%rsp)                 # 4-byte Spill
	movl	36(%r11), %ecx
	movl	%ecx, 360(%rsp)                 # 4-byte Spill
	movq	%r14, %rdi
	movq	%r12, %r14
	jne	.LBB268_5
# %bb.3:                                # %_halide_buffer_is_bounds_query.exit
	cmpq	$0, (%r14)
	jne	.LBB268_5
# %bb.4:                                # %then_bb
	movl	200(%rsp), %ecx                 # 4-byte Reload
	vpxor	%xmm0, %xmm0, %xmm0
	vmovdqu	%xmm0, (%r14)
	movl	%r8d, 184(%rsp)                 # 4-byte Spill
	movl	%r9d, %r8d
	movl	96(%rsp), %r9d                  # 4-byte Reload
	subl	%r9d, %ecx
	movq	$0, 16(%r14)
	movq	%rdi, %r10
	movabsq	$4295041026, %rdi               # imm = 0x100012002
	movq	%rdi, 32(%r14)
	movq	%r10, %rdi
	movl	%r9d, (%rax)
	movl	%r8d, %r9d
	movl	184(%rsp), %r8d                 # 4-byte Reload
	movl	%ecx, 4(%rax)
	movq	$1, 8(%rax)
	movq	$0, 24(%r14)
.LBB268_5:                              # %after_bb
	movl	%ebx, %r12d
	subl	72(%rsp), %r12d                 # 4-byte Folded Reload
	cmpq	$0, 16(%r15)
	movq	%rbp, 928(%rsp)                 # 8-byte Spill
	movl	32(%rsp), %eax                  # 4-byte Reload
	movl	24(%rsp), %ebp                  # 4-byte Reload
	movq	%r14, 496(%rsp)                 # 8-byte Spill
	jne	.LBB268_7
# %bb.6:                                # %_halide_buffer_is_bounds_query.exit320
	cmpq	$0, (%r15)
	je	.LBB268_12
.LBB268_7:                              # %after_bb5
	cmpq	$0, 16(%rdi)
	jne	.LBB268_15
.LBB268_8:                              # %_halide_buffer_is_bounds_query.exit328
	cmpq	$0, (%rdi)
	jne	.LBB268_15
# %bb.9:                                # %then_bb9
	movl	%ebx, 192(%rsp)                 # 4-byte Spill
	movq	%r15, 320(%rsp)                 # 8-byte Spill
	movq	%r13, 264(%rsp)                 # 8-byte Spill
	movq	%r11, %r10
	movl	%esi, %eax
	movq	%rdi, %r11
	movq	40(%rsp), %rdi                  # 8-byte Reload
	imull	%edi, %eax
	movl	%edx, %ecx
	imull	%eax, %ecx
	movq	64(%rsp), %rbx                  # 8-byte Reload
	cmpl	$16, %ebx
	movl	$16, %ebp
	cmovll	%ebx, %ebp
	movq	168(%rsp), %rbx                 # 8-byte Reload
	leal	-16(%rbx,%rbp), %ebp
	movq	112(%rsp), %rbx                 # 8-byte Reload
	movl	%ebx, 1056(%rsp)
	movl	%edi, 1060(%rsp)
	movq	$1, 1064(%rsp)
	movl	%ebp, 1072(%rsp)
	movq	56(%rsp), %rbx                  # 8-byte Reload
	cmpl	$8, %ebx
	movl	%esi, 1076(%rsp)
	movl	$8, %esi
	cmovll	%ebx, %esi
	movq	160(%rsp), %rbp                 # 8-byte Reload
	leal	-8(%rbp,%rsi), %esi
	movl	%edi, 1080(%rsp)
	movq	%r11, %rdi
	movl	$0, 1084(%rsp)
	movl	%esi, 1088(%rsp)
	movl	%edx, 1092(%rsp)
	movl	%eax, 1096(%rsp)
	movq	40(%r11), %rax
	movl	$0, 1100(%rsp)
	movq	128(%rsp), %rdx                 # 8-byte Reload
	movl	%edx, 1104(%rsp)
	movq	48(%rsp), %rdx                  # 8-byte Reload
	movl	%edx, 1108(%rsp)
	movl	%ecx, 1112(%rsp)
	movl	$0, 1116(%rsp)
	vpxor	%xmm0, %xmm0, %xmm0
	vmovdqu	%xmm0, (%r11)
	movq	$0, 16(%r11)
	movabsq	$17179942914, %rcx              # imm = 0x400012002
	movq	%rcx, 32(%r11)
	leaq	1056(%rsp), %rcx
	cmpq	%rcx, %rax
	je	.LBB268_11
# %bb.10:                               # %for.body.preheader.i358
	vmovups	1056(%rsp), %xmm0
	vmovups	%xmm0, (%rax)
	movq	40(%rdi), %rax
	vmovups	1072(%rsp), %xmm0
	vmovups	%xmm0, 16(%rax)
	movq	40(%rdi), %rax
	vmovups	1088(%rsp), %xmm0
	vmovups	%xmm0, 32(%rax)
	movq	40(%rdi), %rax
	vmovdqu	1104(%rsp), %xmm0
	vmovdqu	%xmm0, 48(%rax)
.LBB268_11:                             # %_halide_buffer_init.exit367
	movq	$0, 24(%rdi)
	movq	%r10, %r11
	movq	264(%rsp), %r13                 # 8-byte Reload
	movq	320(%rsp), %r15                 # 8-byte Reload
	movl	192(%rsp), %ebx                 # 4-byte Reload
	jmp	.LBB268_15
.LBB268_12:                             # %then_bb6
	movl	%r9d, 272(%rsp)                 # 4-byte Spill
	movl	%ebx, 192(%rsp)                 # 4-byte Spill
	movq	%r13, 264(%rsp)                 # 8-byte Spill
	movl	88(%rsp), %ecx                  # 4-byte Reload
	subl	%r8d, %ecx
	movl	352(%rsp), %ebx                 # 4-byte Reload
	subl	%ebx, %eax
	movl	344(%rsp), %r14d                # 4-byte Reload
	subl	%r14d, %ebp
	movl	%r8d, 184(%rsp)                 # 4-byte Spill
	movl	%r8d, 992(%rsp)
	movl	%ecx, 996(%rsp)
	movq	$1, 1000(%rsp)
	movl	%ebx, 1008(%rsp)
	movl	%eax, 1012(%rsp)
	imull	%ecx, %eax
	testl	%r12d, %r12d
	movl	$1, %ebx
	cmovgl	%r12d, %ebx
	movq	40(%r15), %r8
	movl	%ecx, 1016(%rsp)
	movl	$0, 1020(%rsp)
	movl	%r14d, 1024(%rsp)
	movl	%ebp, 1028(%rsp)
	imull	%eax, %ebp
	movl	%eax, 1032(%rsp)
	movl	$0, 1036(%rsp)
	movl	72(%rsp), %eax                  # 4-byte Reload
	movl	%eax, 1040(%rsp)
	movl	%ebx, 1044(%rsp)
	movl	%ebp, 1048(%rsp)
	movl	$0, 1052(%rsp)
	vpxor	%xmm0, %xmm0, %xmm0
	vmovdqu	%xmm0, (%r15)
	movq	$0, 16(%r15)
	movabsq	$17179942914, %rax              # imm = 0x400012002
	movq	%rax, 32(%r15)
	leaq	992(%rsp), %rax
	cmpq	%rax, %r8
	je	.LBB268_14
# %bb.13:                               # %for.body.preheader.i339
	vmovups	992(%rsp), %xmm0
	vmovups	%xmm0, (%r8)
	movq	40(%r15), %rax
	vmovups	1008(%rsp), %xmm0
	vmovups	%xmm0, 16(%rax)
	movq	40(%r15), %rax
	vmovups	1024(%rsp), %xmm0
	vmovups	%xmm0, 32(%rax)
	movq	40(%r15), %rax
	vmovdqu	1040(%rsp), %xmm0
	vmovdqu	%xmm0, 48(%rax)
.LBB268_14:                             # %_halide_buffer_init.exit341
	movq	$0, 24(%r15)
	movq	488(%rsp), %r11                 # 8-byte Reload
	movq	496(%rsp), %r14                 # 8-byte Reload
	movq	264(%rsp), %r13                 # 8-byte Reload
	movl	192(%rsp), %ebx                 # 4-byte Reload
	movl	184(%rsp), %r8d                 # 4-byte Reload
	movl	272(%rsp), %r9d                 # 4-byte Reload
	cmpq	$0, 16(%rdi)
	je	.LBB268_8
.LBB268_15:                             # %after_bb8
	cmpq	$0, 16(%r13)
	jne	.LBB268_17
# %bb.16:                               # %_halide_buffer_is_bounds_query.exit347
	cmpq	$0, (%r13)
	je	.LBB268_19
.LBB268_17:                             # %after_bb11
	cmpq	$0, 16(%r11)
	je	.LBB268_20
.LBB268_18:
	xorl	%edx, %edx
	cmpq	$0, 16(%r13)
	je	.LBB268_72
.LBB268_22:
	xorl	%eax, %eax
	cmpq	$0, 16(%rdi)
	je	.LBB268_73
.LBB268_23:
	xorl	%ecx, %ecx
	cmpq	$0, 16(%r14)
	je	.LBB268_74
.LBB268_24:
	xorl	%esi, %esi
	xorl	%r14d, %r14d
	cmpq	$0, 16(%r15)
	movl	$0, %ebp
	jne	.LBB268_26
.LBB268_25:                             # %land.rhs.i422
	cmpq	$0, (%r15)
	sete	%bpl
.LBB268_26:                             # %_halide_buffer_is_bounds_query.exit423
	orb	%bpl, %sil
	orb	%sil, %cl
	orb	%cl, %al
	orb	%al, %dl
	movq	(%rsp), %rbp                    # 8-byte Reload
	jne	.LBB268_67
# %bb.27:                               # %then_bb18
	movl	%r8d, 184(%rsp)                 # 4-byte Spill
	movl	%ebx, 192(%rsp)                 # 4-byte Spill
	movq	%r15, 320(%rsp)                 # 8-byte Spill
	movq	%r13, 264(%rsp)                 # 8-byte Spill
	movq	%rdi, 584(%rsp)                 # 8-byte Spill
	xorl	%eax, %eax
	cmpl	$73730, 424(%rsp)               # 4-byte Folded Reload
                                        # imm = 0x12002
	setne	%al
	movq	%rax, 1296(%rsp)                # 8-byte Spill
	xorl	%r11d, %r11d
	cmpl	$1, %r9d
	sete	%r11b
	xorl	%eax, %eax
	cmpl	$73730, 416(%rsp)               # 4-byte Folded Reload
                                        # imm = 0x12002
	sete	%al
	movl	%eax, 628(%rsp)                 # 4-byte Spill
	xorl	%eax, %eax
	cmpl	$4, 408(%rsp)                   # 4-byte Folded Reload
	sete	%al
	movl	%eax, 620(%rsp)                 # 4-byte Spill
	xorl	%eax, %eax
	cmpl	$73730, 400(%rsp)               # 4-byte Folded Reload
                                        # imm = 0x12002
	sete	%al
	movl	%eax, 632(%rsp)                 # 4-byte Spill
	xorl	%eax, %eax
	cmpl	$4, 392(%rsp)                   # 4-byte Folded Reload
	sete	%al
	movl	%eax, 624(%rsp)                 # 4-byte Spill
	xorl	%eax, %eax
	cmpl	$73730, 384(%rsp)               # 4-byte Folded Reload
                                        # imm = 0x12002
	setne	%al
	shlq	$6, %rax
	movq	%rax, 1288(%rsp)                # 8-byte Spill
	xorl	%ebx, %ebx
	cmpl	$4, 376(%rsp)                   # 4-byte Folded Reload
	sete	%bl
	xorl	%eax, %eax
	cmpl	$73730, 368(%rsp)               # 4-byte Folded Reload
                                        # imm = 0x12002
	setne	%al
	shlq	$8, %rax
	movq	%rax, 1280(%rsp)                # 8-byte Spill
	xorl	%eax, %eax
	cmpl	$4, 360(%rsp)                   # 4-byte Folded Reload
	setne	%al
	shlq	$9, %rax
	movq	%rax, 1272(%rsp)                # 8-byte Spill
	movq	472(%rsp), %rcx                 # 8-byte Reload
	cmpl	96(%rsp), %ecx                  # 4-byte Folded Reload
	setg	%al
	movq	152(%rsp), %rdx                 # 8-byte Reload
	addl	%edx, %ecx
	movq	%rcx, 1184(%rsp)                # 8-byte Spill
	cmpl	%ecx, 200(%rsp)                 # 4-byte Folded Reload
	setg	%cl
	orb	%al, %cl
	shrq	$20, %rdx
	andl	$2048, %edx                     # imm = 0x800
	movq	%rdx, 1264(%rsp)                # 8-byte Spill
	xorl	%r10d, %r10d
	movl	88(%rsp), %eax                  # 4-byte Reload
	cmpl	300(%rsp), %eax                 # 4-byte Folded Reload
	setg	%r10b
	movq	144(%rsp), %rax                 # 8-byte Reload
	shrq	$18, %rax
	andl	$8192, %eax                     # imm = 0x2000
	movq	%rax, 1256(%rsp)                # 8-byte Spill
	xorl	%r14d, %r14d
	movl	32(%rsp), %eax                  # 4-byte Reload
	cmpl	340(%rsp), %eax                 # 4-byte Folded Reload
	setg	%r14b
	movq	80(%rsp), %rax                  # 8-byte Reload
	shrq	$16, %rax
	andl	$32768, %eax                    # imm = 0x8000
	movq	%rax, 1248(%rsp)                # 8-byte Spill
	xorl	%esi, %esi
	movl	24(%rsp), %eax                  # 4-byte Reload
	cmpl	336(%rsp), %eax                 # 4-byte Folded Reload
	setg	%sil
	movl	%r9d, 272(%rsp)                 # 4-byte Spill
	movq	256(%rsp), %rbp                 # 8-byte Reload
	movq	208(%rsp), %rax                 # 8-byte Reload
	shrq	$14, %rax
	andl	$131072, %eax                   # imm = 0x20000
	movq	%rax, 1240(%rsp)                # 8-byte Spill
	testl	%r12d, %r12d
	movl	$1, %eax
	cmovgl	%r12d, %eax
	addl	72(%rsp), %eax                  # 4-byte Folded Reload
	xorl	%edi, %edi
	movl	%eax, 616(%rsp)                 # 4-byte Spill
	cmpl	544(%rsp), %eax                 # 4-byte Folded Reload
	setg	%dil
	vmovd	%edi, %xmm0
	movq	136(%rsp), %rax                 # 8-byte Reload
	shrq	$12, %rax
	andl	$524288, %eax                   # imm = 0x80000
	movq	%rax, 1232(%rsp)                # 8-byte Spill
	movq	40(%rsp), %rax                  # 8-byte Reload
	shrq	$11, %rax
	andl	$1048576, %eax                  # imm = 0x100000
	movq	%rax, 1224(%rsp)                # 8-byte Spill
	xorl	%eax, %eax
	cmpl	$16, 64(%rsp)                   # 4-byte Folded Reload
	setl	%al
	vpinsrb	$4, %eax, %xmm0, %xmm0
	vpinsrb	$8, %r10d, %xmm0, %xmm0
	xorl	%eax, %eax
	cmpl	$8, 56(%rsp)                    # 4-byte Folded Reload
	setl	%al
	vpinsrb	$12, %eax, %xmm0, %xmm0
	vmovd	%r14d, %xmm1
	movzbl	%cl, %eax
	vpinsrb	$4, %eax, %xmm1, %xmm1
	vpinsrb	$8, %esi, %xmm1, %xmm1
	vpinsrb	$12, %ebx, %xmm1, %xmm1
	vmovd	%r11d, %xmm2
	movq	48(%rsp), %rbx                  # 8-byte Reload
	shrq	$8, %rbx
	andl	$8388608, %ebx                  # imm = 0x800000
	movq	480(%rsp), %rcx                 # 8-byte Reload
	testl	%ecx, %ecx
	setg	%al
	movq	928(%rsp), %r12                 # 8-byte Reload
	addl	%r12d, %ecx
	movq	%rcx, 1176(%rsp)                # 8-byte Spill
	cmpl	$3, %ecx
	setl	%cl
	orb	%al, %cl
	movzbl	%cl, %eax
	shlq	$24, %rax
	movq	%rax, 1208(%rsp)                # 8-byte Spill
	shrq	$6, %r12
	andl	$33554432, %r12d                # imm = 0x2000000
	movq	104(%rsp), %rcx                 # 8-byte Reload
	testl	%ecx, %ecx
	setg	%al
	addl	%ebp, %ecx
	movq	%rcx, 1168(%rsp)                # 8-byte Spill
	cmpl	$7, %ecx
	setl	%cl
	orb	%al, %cl
	movzbl	%cl, %eax
	shlq	$26, %rax
	movq	%rax, 1200(%rsp)                # 8-byte Spill
	movq	%rbp, %r14
	shrq	$4, %r14
	andl	$134217728, %r14d               # imm = 0x8000000
	movq	8(%rsp), %rcx                   # 8-byte Reload
	testl	%ecx, %ecx
	setg	%al
	movq	248(%rsp), %r10                 # 8-byte Reload
	addl	%r10d, %ecx
	movq	%rcx, 1160(%rsp)                # 8-byte Spill
	cmpl	$7, %ecx
	setl	%cl
	orb	%al, %cl
	movzbl	%cl, %eax
	shlq	$28, %rax
	movq	%rax, 1192(%rsp)                # 8-byte Spill
	shrq	$2, %r10
	andl	$536870912, %r10d               # imm = 0x20000000
	movq	328(%rsp), %rcx                 # 8-byte Reload
	testl	%ecx, %ecx
	setg	%al
	movq	240(%rsp), %rdx                 # 8-byte Reload
	addl	%edx, %ecx
	movq	%rcx, 1152(%rsp)                # 8-byte Spill
	cmpl	$64, %ecx
	setl	%cl
	orb	%al, %cl
	movzbl	%cl, %r13d
	shlq	$30, %r13
                                        # kill: def $edx killed $edx killed $rdx def $rdx
	andl	$-2147483648, %edx              # imm = 0x80000000
	movq	%rdx, 1216(%rsp)                # 8-byte Spill
	movq	536(%rsp), %rcx                 # 8-byte Reload
	testl	%ecx, %ecx
	setg	%al
	movq	176(%rsp), %rbp                 # 8-byte Reload
	addl	%ebp, %ecx
	movq	%rcx, 1136(%rsp)                # 8-byte Spill
	cmpl	$64, %ecx
	setl	%cl
	orb	%al, %cl
	movzbl	%cl, %r15d
	shlq	$32, %r15
                                        # kill: def $ebp killed $ebp killed $rbp def $rbp
	andl	$-2147483648, %ebp              # imm = 0x80000000
	shlq	$2, %rbp
	movq	512(%rsp), %rcx                 # 8-byte Reload
	testl	%ecx, %ecx
	setg	%al
	movq	232(%rsp), %rdx                 # 8-byte Reload
	addl	%edx, %ecx
	movq	%rcx, 1144(%rsp)                # 8-byte Spill
	cmpl	$3, %ecx
	setl	%cl
	orb	%al, %cl
	movzbl	%cl, %r11d
	shlq	$34, %r11
	movl	%edx, %r9d
	andl	$-2147483648, %r9d              # imm = 0x80000000
	shlq	$4, %r9
	movq	520(%rsp), %rcx                 # 8-byte Reload
	testl	%ecx, %ecx
	setg	%al
	movq	224(%rsp), %rsi                 # 8-byte Reload
	addl	%esi, %ecx
	movq	%rcx, 1128(%rsp)                # 8-byte Spill
	cmpl	$3, %ecx
	setl	%cl
	orb	%al, %cl
	movzbl	%cl, %edi
	shlq	$36, %rdi
                                        # kill: def $esi killed $esi killed $rsi def $rsi
	andl	$-2147483648, %esi              # imm = 0x80000000
	shlq	$6, %rsi
	movq	528(%rsp), %rcx                 # 8-byte Reload
	cmpl	128(%rsp), %ecx                 # 4-byte Folded Reload
	setg	%al
	movq	216(%rsp), %r8                  # 8-byte Reload
	addl	%r8d, %ecx
	movq	%rcx, 1120(%rsp)                # 8-byte Spill
	cmpl	%ecx, 120(%rsp)                 # 4-byte Folded Reload
	setg	%dl
	orb	%al, %dl
	movzbl	%dl, %edx
	shlq	$38, %rdx
                                        # kill: def $r8d killed $r8d killed $r8 def $r8
	andl	$-2147483648, %r8d              # imm = 0x80000000
	shlq	$8, %r8
	xorl	%eax, %eax
	cmpl	$1, 432(%rsp)                   # 4-byte Folded Reload
	sete	%al
	vpinsrb	$4, %eax, %xmm2, %xmm2
	vpinsrb	$8, 620(%rsp), %xmm2, %xmm2     # 4-byte Folded Reload
	vpinsrb	$12, 628(%rsp), %xmm2, %xmm2    # 4-byte Folded Reload
	xorl	%eax, %eax
	cmpl	$1, 464(%rsp)                   # 4-byte Folded Reload
	sete	%al
	vmovd	%eax, %xmm3
	vpinsrb	$4, 624(%rsp), %xmm3, %xmm3     # 4-byte Folded Reload
	vpinsrb	$8, 632(%rsp), %xmm3, %xmm3     # 4-byte Folded Reload
	xorl	%eax, %eax
	cmpl	$1, 456(%rsp)                   # 4-byte Folded Reload
	sete	%al
	vpinsrb	$12, %eax, %xmm3, %xmm3
	xorl	%eax, %eax
	cmpl	$1, 448(%rsp)                   # 4-byte Folded Reload
	setne	%al
	shlq	$43, %rax
	xorl	%ecx, %ecx
	cmpl	$1, 440(%rsp)                   # 4-byte Folded Reload
	setne	%cl
	orq	1288(%rsp), %rax                # 8-byte Folded Reload
	orq	1208(%rsp), %rax                # 8-byte Folded Reload
	orq	1200(%rsp), %rax                # 8-byte Folded Reload
	orq	1192(%rsp), %rax                # 8-byte Folded Reload
	orq	%r13, %rax
	orq	1272(%rsp), %rax                # 8-byte Folded Reload
	orq	1280(%rsp), %rax                # 8-byte Folded Reload
	shlq	$44, %rcx
	orq	%rcx, %rax
	orq	%r15, %rax
	orq	%r11, %rax
	orq	%rdi, %rax
	orq	%rdx, %rax
	orq	1296(%rsp), %rax                # 8-byte Folded Reload
	orq	1264(%rsp), %rax                # 8-byte Folded Reload
	orq	1256(%rsp), %rax                # 8-byte Folded Reload
	orq	1248(%rsp), %rax                # 8-byte Folded Reload
	orq	1240(%rsp), %rax                # 8-byte Folded Reload
	orq	1232(%rsp), %rax                # 8-byte Folded Reload
	orq	1224(%rsp), %rax                # 8-byte Folded Reload
	orq	%rbx, %rax
	orq	%r12, %rax
	orq	%r14, %rax
	orq	%r10, %rax
	orq	1216(%rsp), %rax                # 8-byte Folded Reload
	orq	%rbp, %rax
	orq	%r9, %rax
	vpslld	$31, %xmm2, %xmm2
	vpmovsxdq	%xmm2, %ymm2
	vmovapd	.LCPI268_7(%rip), %xmm4         # xmm4 = [9223372036854775808,0]
	vmovapd	.LCPI268_8(%rip), %ymm5         # ymm5 = [9223372036854775810,1099511627776,8,4]
	vblendvpd	%ymm2, %ymm4, %ymm5, %ymm2
	vpslld	$31, %xmm0, %xmm0
	vpsrad	$31, %xmm0, %xmm0
	vpmovzxdq	%xmm0, %ymm0            # ymm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero
	vpand	.LCPI268_4(%rip), %ymm0, %ymm0
	orq	%rsi, %rax
	vpslld	$31, %xmm1, %xmm1
	vpmovsxdq	%xmm1, %ymm1
	vmovapd	.LCPI268_6(%rip), %ymm4         # ymm4 = [0,0,0,128]
	vblendvpd	%ymm1, .LCPI268_5(%rip), %ymm4, %ymm1
	vpslld	$31, %xmm3, %xmm3
	vpsrad	$31, %xmm3, %xmm3
	vpmovsxdq	%xmm3, %ymm3
	vpandn	.LCPI268_9(%rip), %ymm3, %ymm3
	vpor	%ymm1, %ymm3, %ymm1
	vorpd	%ymm1, %ymm2, %ymm1
	vpor	%ymm1, %ymm0, %ymm0
	vextracti128	$1, %ymm0, %xmm1
	vpor	%xmm1, %xmm0, %xmm0
	vpshufd	$238, %xmm0, %xmm1              # xmm1 = xmm0[2,3,2,3]
	vpor	%xmm1, %xmm0, %xmm0
	orq	%r8, %rax
	vmovq	%xmm0, %rcx
	orq	%rcx, %rax
	tzcntq	%rax, %rax
	cmpl	$44, %eax
	jbe	.LBB268_83
# %bb.28:                               # %no_errors_bb20
	movslq	144(%rsp), %rdi                 # 4-byte Folded Reload
	movslq	80(%rsp), %rax                  # 4-byte Folded Reload
	movq	152(%rsp), %rcx                 # 8-byte Reload
	shrq	$31, %rcx
	movq	%rdi, %rdx
	shrq	$30, %rdx
	andl	$2, %edx
	orq	%rcx, %rdx
	movq	%rdx, 200(%rsp)                 # 8-byte Spill
	movslq	292(%rsp), %rdx                 # 4-byte Folded Reload
	movslq	208(%rsp), %rbx                 # 4-byte Folded Reload
	movq	%rbx, 96(%rsp)                  # 8-byte Spill
	movslq	136(%rsp), %rbp                 # 4-byte Folded Reload
	movq	%rbp, 120(%rsp)                 # 8-byte Spill
	movslq	256(%rsp), %r14                 # 4-byte Folded Reload
	movq	%r14, 88(%rsp)                  # 8-byte Spill
	movslq	248(%rsp), %rcx                 # 4-byte Folded Reload
	movq	%rcx, 32(%rsp)                  # 8-byte Spill
	movslq	240(%rsp), %rcx                 # 4-byte Folded Reload
	movq	%rcx, 208(%rsp)                 # 8-byte Spill
	movslq	232(%rsp), %r15                 # 4-byte Folded Reload
	movq	%r15, 240(%rsp)                 # 8-byte Spill
	movslq	224(%rsp), %r13                 # 4-byte Folded Reload
	movq	%r13, 248(%rsp)                 # 8-byte Spill
	movslq	216(%rsp), %rsi                 # 4-byte Folded Reload
	movq	%rsi, 72(%rsp)                  # 8-byte Spill
	imulq	%rax, %rdx
	movq	%rax, %rsi
	movq	%rdi, 464(%rsp)                 # 8-byte Spill
	imulq	%rdi, %rsi
	movq	%rsi, %rdi
	imulq	%rbx, %rdi
	movq	%rdi, %r8
	imulq	%rbp, %r8
	movslq	40(%rsp), %rax                  # 4-byte Folded Reload
	movq	64(%rsp), %r9                   # 8-byte Reload
	movq	%rax, 384(%rsp)                 # 8-byte Spill
	imulq	%rax, %r9
	movq	%r9, %r10
	imulq	56(%rsp), %r10                  # 8-byte Folded Reload
	movslq	48(%rsp), %r11                  # 4-byte Folded Reload
	movq	%r10, %r12
	imulq	%r11, %r12
	movslq	928(%rsp), %rbp                 # 4-byte Folded Reload
	movq	%rbp, 448(%rsp)                 # 8-byte Spill
	imulq	%rbp, %r14
	movq	%r14, %rbp
	imulq	32(%rsp), %rbp                  # 8-byte Folded Reload
	movq	%rbp, %rax
	imulq	%rcx, %rax
	movq	%rax, 24(%rsp)                  # 8-byte Spill
	movslq	176(%rsp), %rcx                 # 4-byte Folded Reload
	movq	%rcx, 440(%rsp)                 # 8-byte Spill
	imulq	%rcx, %r15
	movq	%r15, 144(%rsp)                 # 8-byte Spill
	imulq	%r13, %r15
	movq	%r15, 80(%rsp)                  # 8-byte Spill
	imulq	72(%rsp), %r15                  # 8-byte Folded Reload
	movq	%r15, 136(%rsp)                 # 8-byte Spill
	movq	%rdx, %rax
	negq	%rax
	cmovlq	%rdx, %rax
	xorl	%ecx, %ecx
	movq	%rax, 432(%rsp)                 # 8-byte Spill
	cmpq	$2147483647, %rax               # imm = 0x7FFFFFFF
	seta	%cl
	movl	%ecx, 232(%rsp)                 # 4-byte Spill
	xorl	%eax, %eax
	movq	%rsi, 408(%rsp)                 # 8-byte Spill
	cmpq	$2147483647, %rsi               # imm = 0x7FFFFFFF
	setg	%al
	movl	%eax, 224(%rsp)                 # 4-byte Spill
	movslq	288(%rsp), %rcx                 # 4-byte Folded Reload
	imulq	96(%rsp), %rcx                  # 8-byte Folded Reload
	movq	%rcx, %rax
	negq	%rax
	cmovlq	%rcx, %rax
	xorl	%ecx, %ecx
	movq	%rax, 424(%rsp)                 # 8-byte Spill
	cmpq	$2147483647, %rax               # imm = 0x7FFFFFFF
	seta	%cl
	movl	%ecx, 216(%rsp)                 # 4-byte Spill
	xorl	%eax, %eax
	movq	%rdi, 400(%rsp)                 # 8-byte Spill
	cmpq	$2147483647, %rdi               # imm = 0x7FFFFFFF
	setg	%al
	movl	%eax, 96(%rsp)                  # 4-byte Spill
	movslq	284(%rsp), %rcx                 # 4-byte Folded Reload
	imulq	120(%rsp), %rcx                 # 8-byte Folded Reload
	movq	%rcx, %rax
	negq	%rax
	cmovlq	%rcx, %rax
	xorl	%ecx, %ecx
	movq	%rax, 416(%rsp)                 # 8-byte Spill
	cmpq	$2147483647, %rax               # imm = 0x7FFFFFFF
	seta	%cl
	movl	%ecx, 120(%rsp)                 # 4-byte Spill
	xorl	%ebx, %ebx
	movq	%r8, 392(%rsp)                  # 8-byte Spill
	cmpq	$2147483647, %r8                # imm = 0x7FFFFFFF
	setg	%bl
	movq	40(%rsp), %r13                  # 8-byte Reload
	shrq	$23, %r13
	andl	$256, %r13d                     # imm = 0x100
	movq	%r13, 256(%rsp)                 # 8-byte Spill
	movslq	316(%rsp), %rcx                 # 4-byte Folded Reload
	imulq	64(%rsp), %rcx                  # 8-byte Folded Reload
	movq	%rcx, %rax
	negq	%rax
	cmovlq	%rcx, %rax
	xorl	%r13d, %r13d
	movq	%rax, 376(%rsp)                 # 8-byte Spill
	cmpq	$2147483647, %rax               # imm = 0x7FFFFFFF
	seta	%r13b
	xorl	%edi, %edi
	movq	%r9, 368(%rsp)                  # 8-byte Spill
	cmpq	$2147483647, %r9                # imm = 0x7FFFFFFF
	setg	%dil
	movslq	312(%rsp), %rcx                 # 4-byte Folded Reload
	imulq	56(%rsp), %rcx                  # 8-byte Folded Reload
	movq	%rcx, %rax
	negq	%rax
	cmovlq	%rcx, %rax
	xorl	%r15d, %r15d
	movq	%rax, 352(%rsp)                 # 8-byte Spill
	cmpq	$2147483647, %rax               # imm = 0x7FFFFFFF
	seta	%r15b
	xorl	%r9d, %r9d
	movq	%r10, 360(%rsp)                 # 8-byte Spill
	cmpq	$2147483647, %r10               # imm = 0x7FFFFFFF
	setg	%r9b
	imulq	608(%rsp), %r11                 # 8-byte Folded Reload
	movq	%r11, %rax
	negq	%rax
	cmovlq	%r11, %rax
	xorl	%r8d, %r8d
	movq	%rax, 344(%rsp)                 # 8-byte Spill
	cmpq	$2147483647, %rax               # imm = 0x7FFFFFFF
	seta	%r8b
	xorl	%edx, %edx
	movq	%r12, 456(%rsp)                 # 8-byte Spill
	cmpq	$2147483647, %r12               # imm = 0x7FFFFFFF
	setg	%dl
	movslq	280(%rsp), %rsi                 # 4-byte Folded Reload
	imulq	88(%rsp), %rsi                  # 8-byte Folded Reload
	movq	928(%rsp), %rax                 # 8-byte Reload
	shrl	$16, %eax
	andl	$32768, %eax                    # imm = 0x8000
	movq	%rax, 928(%rsp)                 # 8-byte Spill
	movq	%rsi, %rax
	negq	%rax
	cmovlq	%rsi, %rax
	xorl	%ecx, %ecx
	movq	%rax, 184(%rsp)                 # 8-byte Spill
	cmpq	$2147483647, %rax               # imm = 0x7FFFFFFF
	seta	%cl
	xorl	%r12d, %r12d
	movq	%r14, 88(%rsp)                  # 8-byte Spill
	cmpq	$2147483647, %r14               # imm = 0x7FFFFFFF
	setg	%r12b
	movslq	276(%rsp), %rax                 # 4-byte Folded Reload
	imulq	32(%rsp), %rax                  # 8-byte Folded Reload
	movq	%rax, %r14
	negq	%r14
	cmovlq	%rax, %r14
	vmovd	%r12d, %xmm0
	movq	%rbp, %r12
	vpinsrb	$4, %ecx, %xmm0, %xmm0
	xorl	%eax, %eax
	cmpq	$2147483647, %r14               # imm = 0x7FFFFFFF
	seta	%al
	xorl	%ecx, %ecx
	cmpq	$2147483647, %rbp               # imm = 0x7FFFFFFF
	setg	%cl
	vpinsrb	$8, %ecx, %xmm0, %xmm0
	vpinsrb	$12, %eax, %xmm0, %xmm0
	vmovd	%ebx, %xmm1
	vpinsrb	$4, 120(%rsp), %xmm1, %xmm1     # 4-byte Folded Reload
	vpinsrb	$8, %edi, %xmm1, %xmm1
	vpinsrb	$12, %r13d, %xmm1, %xmm1
	vmovd	%r9d, %xmm2
	vpinsrb	$4, %r15d, %xmm2, %xmm2
	vpinsrb	$8, %edx, %xmm2, %xmm2
	vpinsrb	$12, %r8d, %xmm2, %xmm2
	vmovd	224(%rsp), %xmm3                # 4-byte Folded Reload
                                        # xmm3 = mem[0],zero,zero,zero
	vpinsrb	$4, 232(%rsp), %xmm3, %xmm3     # 4-byte Folded Reload
	vpinsrb	$8, 96(%rsp), %xmm3, %xmm3      # 4-byte Folded Reload
	vpinsrb	$12, 216(%rsp), %xmm3, %xmm3    # 4-byte Folded Reload
	movq	208(%rsp), %rax                 # 8-byte Reload
	imulq	592(%rsp), %rax                 # 8-byte Folded Reload
	movq	%rax, %r9
	negq	%r9
	cmovlq	%rax, %r9
	xorl	%r8d, %r8d
	cmpq	$2147483647, %r9                # imm = 0x7FFFFFFF
	seta	%r8b
	shlq	$20, %r8
	xorl	%eax, %eax
	cmpq	$2147483647, 24(%rsp)           # 8-byte Folded Reload
                                        # imm = 0x7FFFFFFF
	setg	%al
	movslq	308(%rsp), %rcx                 # 4-byte Folded Reload
	imulq	240(%rsp), %rcx                 # 8-byte Folded Reload
	shlq	$21, %rax
	movq	176(%rsp), %r13                 # 8-byte Reload
	shrl	$9, %r13d
	andl	$4194304, %r13d                 # imm = 0x400000
	movq	%rcx, %r11
	negq	%r11
	cmovlq	%rcx, %r11
	xorl	%r15d, %r15d
	cmpq	$2147483647, %r11               # imm = 0x7FFFFFFF
	seta	%r15b
	shlq	$23, %r15
	xorl	%esi, %esi
	cmpq	$2147483647, 144(%rsp)          # 8-byte Folded Reload
                                        # imm = 0x7FFFFFFF
	setg	%sil
	movslq	304(%rsp), %rdi                 # 4-byte Folded Reload
	imulq	248(%rsp), %rdi                 # 8-byte Folded Reload
	shlq	$24, %rsi
	movq	%rdi, %rdx
	negq	%rdx
	cmovlq	%rdi, %rdx
	xorl	%edi, %edi
	cmpq	$2147483647, %rdx               # imm = 0x7FFFFFFF
	seta	%dil
	shlq	$25, %rdi
	xorl	%ebx, %ebx
	cmpq	$2147483647, 80(%rsp)           # 8-byte Folded Reload
                                        # imm = 0x7FFFFFFF
	setg	%bl
	shlq	$26, %rbx
	movq	72(%rsp), %rcx                  # 8-byte Reload
	imulq	600(%rsp), %rcx                 # 8-byte Folded Reload
	movq	%rcx, %r10
	negq	%r10
	cmovlq	%rcx, %r10
	xorl	%ebp, %ebp
	cmpq	$2147483647, %r10               # imm = 0x7FFFFFFF
	seta	%bpl
	shlq	$27, %rbp
	xorl	%ecx, %ecx
	cmpq	$2147483647, 136(%rsp)          # 8-byte Folded Reload
                                        # imm = 0x7FFFFFFF
	setg	%cl
	orq	%r8, %rax
	orq	%rsi, %rax
	orq	%r15, %rax
	orq	%rbx, %rax
	orq	%rdi, %rax
	shlq	$28, %rcx
	orq	%rcx, %rax
	orq	%rbp, %rax
	orq	200(%rsp), %rax                 # 8-byte Folded Reload
	orq	256(%rsp), %rax                 # 8-byte Folded Reload
	orq	928(%rsp), %rax                 # 8-byte Folded Reload
	vpslld	$31, %xmm0, %xmm0
	vpsrad	$31, %xmm0, %xmm0
	vpmovzxdq	%xmm0, %ymm0            # ymm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero
	vpand	.LCPI268_10(%rip), %ymm0, %ymm0
	orq	%r13, %rax
	vpslld	$31, %xmm1, %xmm1
	vpsrad	$31, %xmm1, %xmm1
	vpmovzxdq	%xmm1, %ymm1            # ymm1 = xmm1[0],zero,xmm1[1],zero,xmm1[2],zero,xmm1[3],zero
	vpand	.LCPI268_11(%rip), %ymm1, %ymm1
	vpslld	$31, %xmm2, %xmm2
	vpsrad	$31, %xmm2, %xmm2
	vpmovzxdq	%xmm2, %ymm2            # ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero
	vpand	.LCPI268_12(%rip), %ymm2, %ymm2
	vpslld	$31, %xmm3, %xmm3
	vpsrad	$31, %xmm3, %xmm3
	vpmovzxdq	%xmm3, %ymm3            # ymm3 = xmm3[0],zero,xmm3[1],zero,xmm3[2],zero,xmm3[3],zero
	vpand	.LCPI268_13(%rip), %ymm3, %ymm3
	vpor	%ymm0, %ymm1, %ymm0
	vpor	%ymm2, %ymm3, %ymm1
	vpor	%ymm0, %ymm1, %ymm0
	vextracti128	$1, %ymm0, %xmm1
	vpor	%xmm1, %xmm0, %xmm0
	vpshufd	$238, %xmm0, %xmm1              # xmm1 = xmm0[2,3,2,3]
	vpor	%xmm1, %xmm0, %xmm0
	vmovq	%xmm0, %rcx
	orq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx     # imm = 0x8000000000000000
	orq	%rcx, %rax
	tzcntq	%rax, %rax
	cmpl	$28, %eax
	jbe	.LBB268_85
# %bb.29:                               # %no_errors_bb66
	movq	56(%rsp), %rax                  # 8-byte Reload
	decl	%eax
	andl	$-8, %eax
	movq	%rax, 120(%rsp)                 # 8-byte Spill
	leal	2(%rax), %ebx
	movq	504(%rsp), %rax                 # 8-byte Reload
	cmpl	%ebx, %eax
	cmovgl	%eax, %ebx
	movq	64(%rsp), %rax                  # 8-byte Reload
	decl	%eax
	andl	$-16, %eax
	movq	%rax, 504(%rsp)                 # 8-byte Spill
	leal	2(%rax), %ebp
	movq	16(%rsp), %rax                  # 8-byte Reload
	cmpl	%ebp, %eax
	cmovgl	%eax, %ebp
	addl	$16, %ebp
	movl	%ebp, %r14d
	movq	40(%rsp), %r15                  # 8-byte Reload
	imull	%r15d, %r14d
	addl	$8, %ebx
	movl	%ebx, %r13d
	imull	%r14d, %r13d
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
	vzeroupper
	callq	halide_malloc@PLT
	movq	%rax, 16(%rsp)                  # 8-byte Spill
	movq	112(%rsp), %rax                 # 8-byte Reload
	movl	%eax, 1392(%rsp)
	movl	%r15d, 1396(%rsp)
	movq	$1, 1400(%rsp)
	movq	168(%rsp), %rax                 # 8-byte Reload
	movl	%eax, 1408(%rsp)
	movl	%ebp, 1412(%rsp)
	movl	%r15d, 1416(%rsp)
	movl	$0, 1420(%rsp)
	movq	160(%rsp), %rax                 # 8-byte Reload
	movl	%eax, 1424(%rsp)
	movl	%ebx, 1428(%rsp)
	movl	%r14d, 72(%rsp)                 # 4-byte Spill
	movl	%r14d, 1432(%rsp)
	movq	$0, 1436(%rsp)
	movl	$64, 1444(%rsp)
	movl	%r13d, 176(%rsp)                # 4-byte Spill
	movl	%r13d, 1448(%rsp)
	movl	$0, 1452(%rsp)
	vpxor	%xmm0, %xmm0, %xmm0
	vmovdqa	%xmm0, 1472(%rsp)
	movq	$0, 1488(%rsp)
	movabsq	$17179942914, %rax              # imm = 0x400012002
	movq	%rax, 1504(%rsp)
	leaq	1392(%rsp), %rax
	movq	%rax, 1512(%rsp)
	movq	$0, 1496(%rsp)
	callq	halide_opencl_device_interface@PLT
	leaq	1472(%rsp), %rsi
	xorl	%edi, %edi
	movq	%rax, %rdx
	callq	halide_device_malloc@PLT
	testl	%eax, %eax
	movq	56(%rsp), %rbx                  # 8-byte Reload
	jne	.LBB268_79
# %bb.30:                               # %"assert succeeded99"
	callq	halide_opencl_device_interface@PLT
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	movq	496(%rsp), %rsi                 # 8-byte Reload
	movq	%rax, %rdx
	callq	halide_copy_to_device@PLT
	testl	%eax, %eax
	jne	.LBB268_79
# %bb.31:                               # %"assert succeeded101"
	leal	9(%rbx), %eax
	sarl	$3, %eax
	movl	%eax, 32(%rsp)                  # 4-byte Spill
	movq	64(%rsp), %rax                  # 8-byte Reload
	addl	$17, %eax
	sarl	$4, %eax
	movl	%eax, 24(%rsp)                  # 4-byte Spill
	leaq	964(%rsp), %rbp
	movq	472(%rsp), %rbx                 # 8-byte Reload
                                        # kill: def $ebx killed $ebx killed $rbx def $rbx
	negl	%ebx
	vpbroadcastq	.LCPI268_15(%rip), %ymm0 # ymm0 = [4,4,4,4]
	vmovdqu	%ymm0, 928(%rsp)                # 32-byte Spill
	leaq	.Lstr.284(%rip), %r15
	xorl	%r13d, %r13d
	.p2align	4, 0x90
.LBB268_32:                             # %"for conv1.s0.z"
                                        # =>This Inner Loop Header: Depth=1
	leal	(%rbx,%r13), %eax
	movl	%eax, 660(%rsp)
	movq	.Lopencl_buf.data(%rip), %rsi
	vmovaps	.LCPI268_14(%rip), %ymm0        # ymm0 = [8,8,4,4]
	vmovups	%ymm0, 2472(%rsp)
	vmovdqu	928(%rsp), %ymm0                # 32-byte Reload
	vmovdqu	%ymm0, 2504(%rsp)
	movq	$0, 2536(%rsp)
	movq	40(%rsp), %rax                  # 8-byte Reload
	movl	%eax, 644(%rsp)
	movq	64(%rsp), %rax                  # 8-byte Reload
	movl	%eax, 648(%rsp)
	movq	56(%rsp), %rax                  # 8-byte Reload
	movl	%eax, 652(%rsp)
	movl	72(%rsp), %eax                  # 4-byte Reload
	movl	%eax, 656(%rsp)
	movl	%r12d, 664(%rsp)
	movq	496(%rsp), %rax                 # 8-byte Reload
	movq	%rax, 1656(%rsp)
	leaq	1472(%rsp), %rax
	movq	%rax, 1664(%rsp)
	leaq	644(%rsp), %rax
	movq	%rax, 1672(%rsp)
	leaq	648(%rsp), %rax
	movq	%rax, 1680(%rsp)
	leaq	652(%rsp), %rax
	movq	%rax, 1688(%rsp)
	leaq	656(%rsp), %rax
	movq	%rax, 1696(%rsp)
	leaq	660(%rsp), %rax
	movq	%rax, 1704(%rsp)
	leaq	664(%rsp), %rax
	movq	%rax, 1712(%rsp)
	movq	$0, 1720(%rsp)
	movw	$257, 962(%rsp)                 # imm = 0x101
	movl	$0, 3(%rbp)
	movl	$0, (%rbp)
	subq	$8, %rsp
	xorl	%edi, %edi
	movq	%r15, %rdx
	movl	32(%rsp), %ecx                  # 4-byte Reload
	movl	40(%rsp), %r8d                  # 4-byte Reload
	movl	$1, %r9d
	leaq	970(%rsp), %rax
	pushq	%rax
	leaq	1672(%rsp), %rax
	pushq	%rax
	leaq	2496(%rsp), %rax
	pushq	%rax
	pushq	$0
	pushq	$1
	pushq	$8
	pushq	$16
	vzeroupper
	callq	halide_opencl_run@PLT
	addq	$64, %rsp
	testl	%eax, %eax
	jne	.LBB268_76
# %bb.33:                               # %"assert succeeded103"
                                        #   in Loop: Header=BB268_32 Depth=1
	incl	%r13d
	addl	176(%rsp), %r12d                # 4-byte Folded Reload
	cmpl	$64, %r13d
	jne	.LBB268_32
# %bb.34:                               # %"end for conv1.s0.z"
	orb	$2, 1496(%rsp)
	callq	halide_opencl_device_interface@PLT
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	movq	320(%rsp), %rsi                 # 8-byte Reload
	movq	%rax, %rdx
	callq	halide_copy_to_device@PLT
	testl	%eax, %eax
	jne	.LBB268_79
# %bb.35:                               # %"assert succeeded105"
	callq	halide_opencl_device_interface@PLT
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	movq	264(%rsp), %rsi                 # 8-byte Reload
	movq	%rax, %rdx
	callq	halide_copy_to_device@PLT
	testl	%eax, %eax
	jne	.LBB268_79
# %bb.36:                               # %"assert succeeded107"
	movl	292(%rsp), %ebp                 # 4-byte Reload
	movq	568(%rsp), %rdi                 # 8-byte Reload
	imull	%edi, %ebp
	movl	284(%rsp), %eax                 # 4-byte Reload
	movq	552(%rsp), %rsi                 # 8-byte Reload
	imull	%esi, %eax
	movl	%eax, 152(%rsp)                 # 4-byte Spill
	movl	288(%rsp), %eax                 # 4-byte Reload
	movq	560(%rsp), %r8                  # 8-byte Reload
	imull	%r8d, %eax
	movl	%eax, 80(%rsp)                  # 4-byte Spill
	movq	104(%rsp), %r15                 # 8-byte Reload
	imull	280(%rsp), %r15d                # 4-byte Folded Reload
	movq	328(%rsp), %r13                 # 8-byte Reload
	imull	592(%rsp), %r13d                # 4-byte Folded Reload
	movq	8(%rsp), %r14                   # 8-byte Reload
	imull	276(%rsp), %r14d                # 4-byte Folded Reload
	movl	192(%rsp), %ecx                 # 4-byte Reload
	movl	%ecx, %edx
	sarl	$31, %edx
	andnl	%ecx, %edx, %r9d
	cmpl	$3, %esi
	movl	$3, %edx
	cmovll	%esi, %edx
	movl	%edx, %esi
	sarl	$31, %esi
	andnl	%edx, %esi, %r10d
	movq	576(%rsp), %rbx                 # 8-byte Reload
	movq	112(%rsp), %r11                 # 8-byte Reload
	cmpl	%r11d, %ebx
	movl	%r11d, %eax
	cmovgl	%ebx, %eax
	movl	%edi, %edx
	subl	168(%rsp), %edx                 # 4-byte Folded Reload
	addl	$15, %edx
	movl	%edx, %esi
	sarl	$4, %esi
	sarl	$31, %edx
	andnl	%esi, %edx, %edi
	movl	24(%rsp), %ecx                  # 4-byte Reload
	cmpl	%edi, %ecx
	cmovlel	%ecx, %edi
	movl	%r8d, %edx
	subl	160(%rsp), %edx                 # 4-byte Folded Reload
	addl	$7, %edx
	movl	%edx, %esi
	sarl	$3, %esi
	sarl	$31, %edx
	andnl	%esi, %edx, %edx
	movl	32(%rsp), %ecx                  # 4-byte Reload
	cmpl	%edx, %ecx
	cmovlel	%ecx, %edx
	movq	56(%rsp), %rcx                  # 8-byte Reload
	leal	15(%rcx), %esi
	movl	636(%rsp), %ecx                 # 4-byte Reload
	cmpl	%ecx, %esi
	cmovgl	%ecx, %esi
	addl	$-6, %esi
	sarl	$3, %esi
	cmpl	%edx, %esi
	movl	%edx, 248(%rsp)                 # 4-byte Spill
	cmovlel	%edx, %esi
	movl	%esi, 240(%rsp)                 # 4-byte Spill
	movq	64(%rsp), %rdx                  # 8-byte Reload
	addl	$23, %edx
	movl	640(%rsp), %ecx                 # 4-byte Reload
	cmpl	%ecx, %edx
	cmovgl	%ecx, %edx
	addl	$-6, %edx
	sarl	$4, %edx
	cmpl	%edi, %edx
	movl	%edi, 256(%rsp)                 # 4-byte Spill
	cmovlel	%edi, %edx
	movl	%edx, 232(%rsp)                 # 4-byte Spill
	movl	300(%rsp), %edx                 # 4-byte Reload
	cmpl	%eax, %edx
	movl	%eax, %edi
	cmovgl	%edx, %edi
	movl	296(%rsp), %esi                 # 4-byte Reload
	cmpl	%edi, %esi
	cmovlel	%esi, %edi
	movl	$3, %ecx
	cmpl	%esi, %eax
	cmovgl	%esi, %eax
	movl	%r9d, %edx
	subl	%r10d, %edx
	movl	%edx, 208(%rsp)                 # 4-byte Spill
	movl	%r9d, 144(%rsp)                 # 4-byte Spill
	subl	%r9d, %ecx
	movl	%ecx, 216(%rsp)                 # 4-byte Spill
	movq	480(%rsp), %rcx                 # 8-byte Reload
	leal	(%r15,%rcx), %edx
	addl	%r14d, %edx
	addl	%r13d, %edx
	addl	%ebx, %ebp
	addl	80(%rsp), %ebp                  # 4-byte Folded Reload
	addl	152(%rsp), %ebp                 # 4-byte Folded Reload
	movl	%eax, %ebx
	subl	%r11d, %ebx
	movl	%ebx, 200(%rsp)                 # 4-byte Spill
	subl	%edi, %esi
	movl	%esi, 296(%rsp)                 # 4-byte Spill
	movl	%edi, %esi
	subl	%eax, %esi
	movl	%esi, 96(%rsp)                  # 4-byte Spill
	movl	%ebp, 152(%rsp)                 # 4-byte Spill
	subl	%ebp, %eax
	movl	%eax, 136(%rsp)                 # 4-byte Spill
	movl	%r10d, 80(%rsp)                 # 4-byte Spill
	movl	%r10d, %eax
	subl	%edx, %eax
	movq	%rax, 88(%rsp)                  # 8-byte Spill
	movq	%r15, 104(%rsp)                 # 8-byte Spill
	movq	%r14, 8(%rsp)                   # 8-byte Spill
	addl	%r14d, %r15d
	movq	%r13, 328(%rsp)                 # 8-byte Spill
	addl	%r13d, %r15d
	addl	%ecx, %r15d
	negl	%r15d
	movl	%edi, 224(%rsp)                 # 4-byte Spill
	movl	%edi, %eax
	subl	%r11d, %eax
	movq	%rax, 192(%rsp)                 # 8-byte Spill
	leaq	2430(%rsp), %r13
	movl	$64, %ebx
	xorl	%ebp, %ebp
	movq	264(%rsp), %rcx                 # 8-byte Reload
	movq	320(%rsp), %rdx                 # 8-byte Reload
	.p2align	4, 0x90
.LBB268_37:                             # %"for conv1.s1.z"
                                        # =>This Inner Loop Header: Depth=1
	leal	(%r15,%rbp), %eax
	movl	%eax, 692(%rsp)
	movq	88(%rsp), %rax                  # 8-byte Reload
	addl	%ebp, %eax
	movl	%eax, 704(%rsp)
	movq	192(%rsp), %rax                 # 8-byte Reload
	leal	(%rax,%r12), %eax
	movl	%eax, 716(%rsp)
	movq	.Lopencl_buf.data(%rip), %rsi
	vmovaps	.LCPI268_16(%rip), %ymm0        # ymm0 = [8,8,8,4]
	vmovups	%ymm0, 2816(%rsp)
	vmovdqu	928(%rsp), %ymm0                # 32-byte Reload
	vmovdqu	%ymm0, 2848(%rsp)
	vmovdqu	%ymm0, 2880(%rsp)
	vmovdqu	%ymm0, 2912(%rsp)
	vmovdqu	%ymm0, 2944(%rsp)
	vmovdqu	%ymm0, 2976(%rsp)
	vmovdqu	%ymm0, 3008(%rsp)
	vmovdqu	%ymm0, 3040(%rsp)
	vmovdqu	%ymm0, 3072(%rsp)
	vmovdqu	%ymm0, 3104(%rsp)
	vmovdqu	%ymm0, 3136(%rsp)
	movq	$0, 3168(%rsp)
	movq	328(%rsp), %rax                 # 8-byte Reload
	movl	%eax, 668(%rsp)
	movq	104(%rsp), %rax                 # 8-byte Reload
	movl	%eax, 672(%rsp)
	movq	8(%rsp), %rax                   # 8-byte Reload
	movl	%eax, 676(%rsp)
	movl	80(%rsp), %eax                  # 4-byte Reload
	movl	%eax, 680(%rsp)
	movl	256(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 684(%rsp)
	movl	248(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 688(%rsp)
	movl	96(%rsp), %eax                  # 4-byte Reload
	movl	%eax, 696(%rsp)
	movl	136(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 700(%rsp)
	movl	144(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 708(%rsp)
	movl	296(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 712(%rsp)
	movl	%r12d, 720(%rsp)
	movl	200(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 724(%rsp)
	movl	%ebp, 728(%rsp)
	movq	480(%rsp), %rax                 # 8-byte Reload
	movl	%eax, 732(%rsp)
	movl	280(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 736(%rsp)
	movl	276(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 740(%rsp)
	movl	240(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 744(%rsp)
	movq	568(%rsp), %rax                 # 8-byte Reload
	movl	%eax, 748(%rsp)
	movq	560(%rsp), %rax                 # 8-byte Reload
	movl	%eax, 752(%rsp)
	movq	552(%rsp), %rax                 # 8-byte Reload
	movl	%eax, 756(%rsp)
	movl	292(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 760(%rsp)
	movl	288(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 764(%rsp)
	movl	284(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 768(%rsp)
	movq	40(%rsp), %rax                  # 8-byte Reload
	movl	%eax, 772(%rsp)
	movq	112(%rsp), %rax                 # 8-byte Reload
	movl	%eax, 776(%rsp)
	movq	168(%rsp), %rax                 # 8-byte Reload
	movl	%eax, 780(%rsp)
	movq	160(%rsp), %rax                 # 8-byte Reload
	movl	%eax, 784(%rsp)
	movq	576(%rsp), %rax                 # 8-byte Reload
	movl	%eax, 788(%rsp)
	movl	232(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 792(%rsp)
	movl	224(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 796(%rsp)
	movl	72(%rsp), %eax                  # 4-byte Reload
	movl	%eax, 800(%rsp)
	movl	152(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 804(%rsp)
	movl	208(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 808(%rsp)
	movl	216(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 812(%rsp)
	movl	300(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 816(%rsp)
	movl	340(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 820(%rsp)
	movl	336(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 824(%rsp)
	movq	544(%rsp), %rax                 # 8-byte Reload
	movl	%eax, 828(%rsp)
	movq	%rcx, 2000(%rsp)
	movq	%rdx, 2008(%rsp)
	leaq	1472(%rsp), %rax
	movq	%rax, 2016(%rsp)
	leaq	668(%rsp), %rax
	movq	%rax, 2024(%rsp)
	leaq	672(%rsp), %rax
	movq	%rax, 2032(%rsp)
	leaq	676(%rsp), %rax
	movq	%rax, 2040(%rsp)
	leaq	680(%rsp), %rax
	movq	%rax, 2048(%rsp)
	leaq	684(%rsp), %rax
	movq	%rax, 2056(%rsp)
	leaq	688(%rsp), %rax
	movq	%rax, 2064(%rsp)
	leaq	692(%rsp), %rax
	movq	%rax, 2072(%rsp)
	leaq	696(%rsp), %rax
	movq	%rax, 2080(%rsp)
	leaq	700(%rsp), %rax
	movq	%rax, 2088(%rsp)
	leaq	704(%rsp), %rax
	movq	%rax, 2096(%rsp)
	leaq	708(%rsp), %rax
	movq	%rax, 2104(%rsp)
	leaq	712(%rsp), %rax
	movq	%rax, 2112(%rsp)
	leaq	716(%rsp), %rax
	movq	%rax, 2120(%rsp)
	leaq	720(%rsp), %rax
	movq	%rax, 2128(%rsp)
	leaq	724(%rsp), %rax
	movq	%rax, 2136(%rsp)
	leaq	728(%rsp), %rax
	movq	%rax, 2144(%rsp)
	leaq	732(%rsp), %rax
	movq	%rax, 2152(%rsp)
	leaq	736(%rsp), %rax
	movq	%rax, 2160(%rsp)
	leaq	740(%rsp), %rax
	movq	%rax, 2168(%rsp)
	leaq	744(%rsp), %rax
	movq	%rax, 2176(%rsp)
	leaq	748(%rsp), %rax
	movq	%rax, 2184(%rsp)
	leaq	752(%rsp), %rax
	movq	%rax, 2192(%rsp)
	leaq	756(%rsp), %rax
	movq	%rax, 2200(%rsp)
	leaq	760(%rsp), %rax
	movq	%rax, 2208(%rsp)
	leaq	764(%rsp), %rax
	movq	%rax, 2216(%rsp)
	leaq	768(%rsp), %rax
	movq	%rax, 2224(%rsp)
	leaq	772(%rsp), %rax
	movq	%rax, 2232(%rsp)
	leaq	776(%rsp), %rax
	movq	%rax, 2240(%rsp)
	leaq	780(%rsp), %rax
	movq	%rax, 2248(%rsp)
	leaq	784(%rsp), %rax
	movq	%rax, 2256(%rsp)
	leaq	788(%rsp), %rax
	movq	%rax, 2264(%rsp)
	leaq	792(%rsp), %rax
	movq	%rax, 2272(%rsp)
	leaq	796(%rsp), %rax
	movq	%rax, 2280(%rsp)
	leaq	800(%rsp), %rax
	movq	%rax, 2288(%rsp)
	leaq	804(%rsp), %rax
	movq	%rax, 2296(%rsp)
	leaq	808(%rsp), %rax
	movq	%rax, 2304(%rsp)
	leaq	812(%rsp), %rax
	movq	%rax, 2312(%rsp)
	leaq	816(%rsp), %rax
	movq	%rax, 2320(%rsp)
	leaq	820(%rsp), %rax
	movq	%rax, 2328(%rsp)
	leaq	824(%rsp), %rax
	movq	%rax, 2336(%rsp)
	leaq	828(%rsp), %rax
	movq	%rax, 2344(%rsp)
	movq	$0, 2352(%rsp)
	movw	$257, 2427(%rsp)                # imm = 0x101
	movb	$1, 2429(%rsp)
	vpxor	%xmm0, %xmm0, %xmm0
	vmovdqu	%ymm0, 10(%r13)
	vmovdqu	%ymm0, (%r13)
	subq	$8, %rsp
	xorl	%edi, %edi
	leaq	.Lstr.285(%rip), %rdx
	movl	32(%rsp), %ecx                  # 4-byte Reload
	movl	40(%rsp), %r8d                  # 4-byte Reload
	movl	$1, %r9d
	leaq	2435(%rsp), %rax
	pushq	%rax
	leaq	2016(%rsp), %rax
	pushq	%rax
	leaq	2840(%rsp), %rax
	pushq	%rax
	pushq	$0
	pushq	$1
	pushq	$8
	pushq	$16
	vzeroupper
	callq	halide_opencl_run@PLT
	addq	$64, %rsp
	testl	%eax, %eax
	jne	.LBB268_76
# %bb.38:                               # %"assert succeeded109"
                                        #   in Loop: Header=BB268_37 Depth=1
	addl	592(%rsp), %ebp                 # 4-byte Folded Reload
	addl	176(%rsp), %r12d                # 4-byte Folded Reload
	decl	%ebx
	movq	264(%rsp), %rcx                 # 8-byte Reload
	movq	320(%rsp), %rdx                 # 8-byte Reload
	jne	.LBB268_37
# %bb.39:                               # %"end for conv1.s1.z"
	movq	504(%rsp), %r15                 # 8-byte Reload
	addl	$16, %r15d
	movl	%r15d, %ebx
	movq	40(%rsp), %r14                  # 8-byte Reload
	imull	%r14d, %ebx
	movq	120(%rsp), %rbp                 # 8-byte Reload
	addl	$8, %ebp
	movl	%ebp, %r12d
	imull	%ebx, %r12d
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	halide_malloc@PLT
	movq	%rax, 8(%rsp)                   # 8-byte Spill
	movq	112(%rsp), %rax                 # 8-byte Reload
	movl	%eax, 1328(%rsp)
	movl	%r14d, 1332(%rsp)
	movq	$1, 1336(%rsp)
	movq	168(%rsp), %rax                 # 8-byte Reload
	movl	%eax, 1344(%rsp)
	movl	%r15d, 1348(%rsp)
	movl	%r14d, 1352(%rsp)
	movl	$0, 1356(%rsp)
	movq	160(%rsp), %rax                 # 8-byte Reload
	movl	%eax, 1360(%rsp)
	movl	%ebp, 1364(%rsp)
	movl	%ebx, 32(%rsp)                  # 4-byte Spill
	movl	%ebx, 1368(%rsp)
	movl	$0, 1372(%rsp)
	movq	128(%rsp), %rax                 # 8-byte Reload
	movl	%eax, 1376(%rsp)
	movq	48(%rsp), %rbx                  # 8-byte Reload
	movl	%ebx, 1380(%rsp)
	movl	%r12d, 24(%rsp)                 # 4-byte Spill
	movl	%r12d, 1384(%rsp)
	movl	$0, 1388(%rsp)
	vpxor	%xmm0, %xmm0, %xmm0
	vmovdqa	%xmm0, 1536(%rsp)
	movq	$0, 1552(%rsp)
	movabsq	$17179942914, %rax              # imm = 0x400012002
	movq	%rax, 1568(%rsp)
	leaq	1328(%rsp), %rax
	movq	%rax, 1576(%rsp)
	movq	$0, 1560(%rsp)
	callq	halide_opencl_device_interface@PLT
	leaq	1536(%rsp), %rsi
	xorl	%edi, %edi
	movq	%rax, %rdx
	callq	halide_device_malloc@PLT
	testl	%eax, %eax
	jne	.LBB268_75
# %bb.40:                               # %"assert succeeded113"
	movq	56(%rsp), %rax                  # 8-byte Reload
	addl	$7, %eax
	sarl	$3, %eax
	movl	%eax, 112(%rsp)                 # 4-byte Spill
	movq	64(%rsp), %rax                  # 8-byte Reload
	addl	$15, %eax
	sarl	$4, %eax
	movl	%eax, 104(%rsp)                 # 4-byte Spill
	testl	%ebx, %ebx
	jle	.LBB268_44
# %bb.41:                               # %"for conv2.s0.z.rebased.preheader"
	leaq	973(%rsp), %r15
	movq	128(%rsp), %rax                 # 8-byte Reload
	movl	%eax, %ebp
	subl	472(%rsp), %ebp                 # 4-byte Folded Reload
	xorl	%ebx, %ebx
	leaq	.Lstr.286(%rip), %r12
	movq	48(%rsp), %rax                  # 8-byte Reload
	movl	%eax, %r13d
	.p2align	4, 0x90
.LBB268_42:                             # %"for conv2.s0.z.rebased"
                                        # =>This Inner Loop Header: Depth=1
	vmovaps	.LCPI268_14(%rip), %ymm0        # ymm0 = [8,8,4,4]
	vmovups	%ymm0, 2544(%rsp)
	vmovdqu	928(%rsp), %ymm0                # 32-byte Reload
	vmovdqu	%ymm0, 2576(%rsp)
	movq	.Lopencl_buf.data(%rip), %rsi
	movq	$0, 2608(%rsp)
	movq	40(%rsp), %rax                  # 8-byte Reload
	movl	%eax, 832(%rsp)
	movq	64(%rsp), %rax                  # 8-byte Reload
	movl	%eax, 836(%rsp)
	movq	56(%rsp), %rax                  # 8-byte Reload
	movl	%eax, 840(%rsp)
	movl	32(%rsp), %eax                  # 4-byte Reload
	movl	%eax, 844(%rsp)
	movl	%ebp, 848(%rsp)
	movl	%ebx, 852(%rsp)
	movq	496(%rsp), %rax                 # 8-byte Reload
	movq	%rax, 1728(%rsp)
	leaq	1536(%rsp), %rax
	movq	%rax, 1736(%rsp)
	leaq	832(%rsp), %rax
	movq	%rax, 1744(%rsp)
	leaq	836(%rsp), %rax
	movq	%rax, 1752(%rsp)
	leaq	840(%rsp), %rax
	movq	%rax, 1760(%rsp)
	leaq	844(%rsp), %rax
	movq	%rax, 1768(%rsp)
	leaq	848(%rsp), %rax
	movq	%rax, 1776(%rsp)
	leaq	852(%rsp), %rax
	movq	%rax, 1784(%rsp)
	movq	$0, 1792(%rsp)
	movw	$257, 971(%rsp)                 # imm = 0x101
	movl	$0, 3(%r15)
	movl	$0, (%r15)
	subq	$8, %rsp
	xorl	%edi, %edi
	movq	%r12, %rdx
	movl	112(%rsp), %ecx                 # 4-byte Reload
	movl	120(%rsp), %r8d                 # 4-byte Reload
	movl	$1, %r9d
	leaq	979(%rsp), %rax
	pushq	%rax
	leaq	1744(%rsp), %rax
	pushq	%rax
	leaq	2568(%rsp), %rax
	pushq	%rax
	pushq	$0
	pushq	$1
	pushq	$8
	pushq	$16
	vzeroupper
	callq	halide_opencl_run@PLT
	addq	$64, %rsp
	testl	%eax, %eax
	jne	.LBB268_75
# %bb.43:                               # %"assert succeeded115"
                                        #   in Loop: Header=BB268_42 Depth=1
	incl	%ebp
	addl	24(%rsp), %ebx                  # 4-byte Folded Reload
	decl	%r13d
	jne	.LBB268_42
.LBB268_44:                             # %"end for conv2.s0.z.rebased"
	orb	$2, 1560(%rsp)
	callq	halide_opencl_device_interface@PLT
	xorl	%edi, %edi
	movq	488(%rsp), %rsi                 # 8-byte Reload
	movq	%rax, %rdx
	callq	halide_copy_to_device@PLT
	testl	%eax, %eax
	jne	.LBB268_75
# %bb.45:                               # %"assert succeeded117"
	cmpl	$0, 48(%rsp)                    # 4-byte Folded Reload
	jle	.LBB268_49
# %bb.46:                               # %"for conv2.s1.z.rebased.preheader"
	movq	512(%rsp), %rax                 # 8-byte Reload
	imull	308(%rsp), %eax                 # 4-byte Folded Reload
	movq	520(%rsp), %rdx                 # 8-byte Reload
	imull	304(%rsp), %edx                 # 4-byte Folded Reload
	addl	%eax, %edx
	movq	600(%rsp), %rcx                 # 8-byte Reload
	movq	528(%rsp), %rax                 # 8-byte Reload
	imull	%ecx, %eax
	addl	%edx, %eax
	leaq	983(%rsp), %r12
	movq	536(%rsp), %rdx                 # 8-byte Reload
	addl	%eax, %edx
	movq	128(%rsp), %rax                 # 8-byte Reload
	movl	%eax, %r13d
	imull	%ecx, %r13d
	subl	%edx, %r13d
	xorl	%r15d, %r15d
	leaq	2720(%rsp), %rbx
	movq	48(%rsp), %rax                  # 8-byte Reload
	movl	%eax, %ebp
	.p2align	4, 0x90
.LBB268_47:                             # %"for conv2.s1.z.rebased"
                                        # =>This Inner Loop Header: Depth=1
	movq	.Lopencl_buf.data(%rip), %rsi
	vmovaps	.LCPI268_16(%rip), %ymm0        # ymm0 = [8,8,8,4]
	vmovups	%ymm0, 2720(%rsp)
	vmovups	928(%rsp), %ymm0                # 32-byte Reload
	vmovups	%ymm0, 2752(%rsp)
	vmovdqa	.LCPI268_17(%rip), %ymm0        # ymm0 = [4,4,4,0]
	vmovdqu	%ymm0, 2784(%rsp)
	movl	176(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 856(%rsp)
	movq	40(%rsp), %rax                  # 8-byte Reload
	movl	%eax, 860(%rsp)
	movl	32(%rsp), %eax                  # 4-byte Reload
	movl	%eax, 864(%rsp)
	movl	72(%rsp), %eax                  # 4-byte Reload
	movl	%eax, 868(%rsp)
	movl	%r15d, 872(%rsp)
	movl	%r13d, 876(%rsp)
	movl	308(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 880(%rsp)
	movl	304(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 884(%rsp)
	leaq	1472(%rsp), %rax
	movq	%rax, 1800(%rsp)
	leaq	1536(%rsp), %rax
	movq	%rax, 1808(%rsp)
	movq	488(%rsp), %rax                 # 8-byte Reload
	movq	%rax, 1816(%rsp)
	leaq	856(%rsp), %rax
	movq	%rax, 1824(%rsp)
	leaq	860(%rsp), %rax
	movq	%rax, 1832(%rsp)
	leaq	864(%rsp), %rax
	movq	%rax, 1840(%rsp)
	leaq	868(%rsp), %rax
	movq	%rax, 1848(%rsp)
	leaq	872(%rsp), %rax
	movq	%rax, 1856(%rsp)
	leaq	876(%rsp), %rax
	movq	%rax, 1864(%rsp)
	leaq	880(%rsp), %rax
	movq	%rax, 1872(%rsp)
	leaq	884(%rsp), %rax
	movq	%rax, 1880(%rsp)
	movq	$0, 1888(%rsp)
	movw	$257, 980(%rsp)                 # imm = 0x101
	movb	$1, 982(%rsp)
	movb	$0, 8(%r12)
	movq	$0, (%r12)
	subq	$8, %rsp
	xorl	%edi, %edi
	leaq	.Lstr.287(%rip), %rdx
	movl	112(%rsp), %ecx                 # 4-byte Reload
	movl	120(%rsp), %r8d                 # 4-byte Reload
	movl	$1, %r9d
	leaq	988(%rsp), %rax
	pushq	%rax
	leaq	1816(%rsp), %rax
	pushq	%rax
	pushq	%rbx
	pushq	$0
	pushq	$1
	pushq	$8
	pushq	$16
	vzeroupper
	callq	halide_opencl_run@PLT
	addq	$64, %rsp
	testl	%eax, %eax
	jne	.LBB268_75
# %bb.48:                               # %"assert succeeded119"
                                        #   in Loop: Header=BB268_47 Depth=1
	addl	600(%rsp), %r13d                # 4-byte Folded Reload
	addl	24(%rsp), %r15d                 # 4-byte Folded Reload
	decl	%ebp
	jne	.LBB268_47
.LBB268_49:                             # %"end for conv2.s1.z.rebased"
	leaq	1472(%rsp), %rsi
	xorl	%edi, %edi
	callq	halide_device_free@PLT
	testl	%eax, %eax
	jne	.LBB268_75
# %bb.50:                               # %"assert succeeded121"
	movq	16(%rsp), %rsi                  # 8-byte Reload
	testq	%rsi, %rsi
	movq	584(%rsp), %rbx                 # 8-byte Reload
	movq	48(%rsp), %rbp                  # 8-byte Reload
	je	.LBB268_52
# %bb.51:                               # %if.then.i466
	xorl	%edi, %edi
	callq	halide_free@PLT
.LBB268_52:                             # %call_destructor.exit467
	callq	halide_opencl_device_interface@PLT
	xorl	%r15d, %r15d
	xorl	%edi, %edi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	halide_copy_to_device@PLT
	testl	%eax, %eax
	jne	.LBB268_88
# %bb.53:                               # %"assert succeeded123"
	testl	%ebp, %ebp
	movq	128(%rsp), %rbx                 # 8-byte Reload
	jle	.LBB268_57
# %bb.54:                               # %"for output.s0.z.rebased.preheader"
	movl	316(%rsp), %eax                 # 4-byte Reload
	imull	168(%rsp), %eax                 # 4-byte Folded Reload
	movl	312(%rsp), %ecx                 # 4-byte Reload
	imull	160(%rsp), %ecx                 # 4-byte Folded Reload
	addl	%eax, %ecx
	imull	608(%rsp), %ebx                 # 4-byte Folded Reload
	addl	%ebx, %ecx
	leaq	1461(%rsp), %r12
	subl	%ecx, %ebx
	leaq	1896(%rsp), %r13
	leaq	2616(%rsp), %rbp
	xorl	%r15d, %r15d
	.p2align	4, 0x90
.LBB268_55:                             # %"for output.s0.z.rebased"
                                        # =>This Inner Loop Header: Depth=1
	vmovaps	.LCPI268_14(%rip), %ymm0        # ymm0 = [8,8,4,4]
	vmovups	%ymm0, 2616(%rsp)
	vmovdqu	928(%rsp), %ymm0                # 32-byte Reload
	vmovdqu	%ymm0, 2648(%rsp)
	vmovdqu	%ymm0, 2680(%rsp)
	movq	.Lopencl_buf.data(%rip), %rsi
	movq	$0, 2712(%rsp)
	movq	40(%rsp), %rax                  # 8-byte Reload
	movl	%eax, 888(%rsp)
	movq	64(%rsp), %rax                  # 8-byte Reload
	movl	%eax, 892(%rsp)
	movq	56(%rsp), %rax                  # 8-byte Reload
	movl	%eax, 896(%rsp)
	movq	168(%rsp), %rax                 # 8-byte Reload
	movl	%eax, 900(%rsp)
	movq	160(%rsp), %rax                 # 8-byte Reload
	movl	%eax, 904(%rsp)
	movl	316(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 908(%rsp)
	movl	312(%rsp), %eax                 # 4-byte Reload
	movl	%eax, 912(%rsp)
	movl	32(%rsp), %eax                  # 4-byte Reload
	movl	%eax, 916(%rsp)
	movl	%r15d, 920(%rsp)
	movl	%ebx, 924(%rsp)
	leaq	1536(%rsp), %rax
	movq	%rax, 1896(%rsp)
	movq	584(%rsp), %rax                 # 8-byte Reload
	movq	%rax, 1904(%rsp)
	leaq	888(%rsp), %rax
	movq	%rax, 1912(%rsp)
	leaq	892(%rsp), %rax
	movq	%rax, 1920(%rsp)
	leaq	896(%rsp), %rax
	movq	%rax, 1928(%rsp)
	leaq	900(%rsp), %rax
	movq	%rax, 1936(%rsp)
	leaq	904(%rsp), %rax
	movq	%rax, 1944(%rsp)
	leaq	908(%rsp), %rax
	movq	%rax, 1952(%rsp)
	leaq	912(%rsp), %rax
	movq	%rax, 1960(%rsp)
	leaq	916(%rsp), %rax
	movq	%rax, 1968(%rsp)
	leaq	920(%rsp), %rax
	movq	%rax, 1976(%rsp)
	leaq	924(%rsp), %rax
	movq	%rax, 1984(%rsp)
	movq	$0, 1992(%rsp)
	movw	$257, 1459(%rsp)                # imm = 0x101
	movl	$0, 7(%r12)
	movq	$0, (%r12)
	subq	$8, %rsp
	xorl	%edi, %edi
	leaq	.Lstr.288(%rip), %rdx
	movl	112(%rsp), %ecx                 # 4-byte Reload
	movl	120(%rsp), %r8d                 # 4-byte Reload
	movl	$1, %r9d
	leaq	1467(%rsp), %rax
	pushq	%rax
	pushq	%r13
	pushq	%rbp
	pushq	$0
	pushq	$1
	pushq	$8
	pushq	$16
	vzeroupper
	callq	halide_opencl_run@PLT
	addq	$64, %rsp
	testl	%eax, %eax
	jne	.LBB268_78
# %bb.56:                               # %"assert succeeded125"
                                        #   in Loop: Header=BB268_55 Depth=1
	addl	608(%rsp), %ebx                 # 4-byte Folded Reload
	addl	24(%rsp), %r15d                 # 4-byte Folded Reload
	movq	48(%rsp), %rax                  # 8-byte Reload
	decl	%eax
	movq	%rax, 48(%rsp)                  # 8-byte Spill
	jne	.LBB268_55
.LBB268_57:                             # %"end for output.s0.z.rebased"
	movq	584(%rsp), %rax                 # 8-byte Reload
	orb	$2, 24(%rax)
	xorl	%r14d, %r14d
	leaq	1536(%rsp), %rsi
	xorl	%edi, %edi
	callq	halide_device_free@PLT
	testl	%eax, %eax
	jne	.LBB268_87
# %bb.58:                               # %"assert succeeded127"
	movq	8(%rsp), %rsi                   # 8-byte Reload
	testq	%rsi, %rsi
	movq	(%rsp), %rbp                    # 8-byte Reload
	je	.LBB268_60
# %bb.59:                               # %if.then.i472
	xorl	%r15d, %r15d
	xorl	%edi, %edi
	callq	halide_free@PLT
	xorl	%ebx, %ebx
	xorl	%r14d, %r14d
	jmp	.LBB268_61
.LBB268_60:
	xorl	%ebx, %ebx
	xorl	%r15d, %r15d
.LBB268_61:                             # %call_destructor.exit
	leaq	1536(%rsp), %rsi
	xorl	%edi, %edi
	callq	halide_device_free_as_destructor@PLT
	testl	%r14d, %r14d
	sete	%r12b
	testq	%rbx, %rbx
	je	.LBB268_64
# %bb.62:                               # %call_destructor.exit
	testl	%r14d, %r14d
	je	.LBB268_64
# %bb.63:                               # %if.then.i155
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	movq	%rbx, %rsi
	callq	halide_free@PLT
.LBB268_64:                             # %call_destructor.exit159
	leaq	1472(%rsp), %rsi
	xorl	%edi, %edi
	callq	halide_device_free_as_destructor@PLT
	testq	%r15, %r15
	je	.LBB268_67
# %bb.65:                               # %call_destructor.exit159
	testb	%r12b, %r12b
	jne	.LBB268_67
# %bb.66:                               # %if.then.i163
	xorl	%edi, %edi
	movq	%r15, %rsi
	callq	halide_free@PLT
.LBB268_67:                             # %call_destructor.exit164
	testq	%rbp, %rbp
	je	.LBB268_69
# %bb.68:                               # %if.then.i166
	xorl	%edi, %edi
	movq	%rbp, %rsi
	vzeroupper
	callq	halide_opencl_finalize_kernels@PLT
.LBB268_69:                             # %common.ret
	movl	%r14d, %eax
	addq	$3176, %rsp                     # imm = 0xC68
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	vzeroupper
	retq
.LBB268_19:                             # %then_bb12
	vmovaps	.LCPI268_0(%rip), %ymm0         # ymm0 = [0,3,1,0,0,7,3,0]
	vmovups	%ymm0, 2360(%rsp)
	vmovaps	.LCPI268_1(%rip), %ymm0         # ymm0 = [0,7,21,0,0,64,147,0]
	vmovups	%ymm0, 2392(%rsp)
	movq	40(%r13), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, (%r13)
	movq	$0, 16(%r13)
	movabsq	$17179942914, %rcx              # imm = 0x400012002
	movq	%rcx, 32(%r13)
	vmovups	2360(%rsp), %xmm0
	vmovups	%xmm0, (%rax)
	movq	40(%r13), %rax
	vmovups	2376(%rsp), %xmm0
	vmovups	%xmm0, 16(%rax)
	movq	40(%r13), %rax
	vmovups	2392(%rsp), %xmm0
	vmovups	%xmm0, 32(%rax)
	movq	40(%r13), %rax
	vmovdqu	2408(%rsp), %xmm0
	vmovdqu	%xmm0, 48(%rax)
	movq	$0, 24(%r13)
	cmpq	$0, 16(%r11)
	jne	.LBB268_18
.LBB268_20:                             # %_halide_buffer_is_bounds_query.exit373
	cmpq	$0, (%r11)
	je	.LBB268_70
.LBB268_21:                             # %land.rhs.i398
	cmpq	$0, (%r11)
	sete	%dl
	cmpq	$0, 16(%r13)
	jne	.LBB268_22
.LBB268_72:                             # %land.rhs.i404
	cmpq	$0, (%r13)
	sete	%al
	cmpq	$0, 16(%rdi)
	jne	.LBB268_23
.LBB268_73:                             # %land.rhs.i410
	cmpq	$0, (%rdi)
	sete	%cl
	cmpq	$0, 16(%r14)
	jne	.LBB268_24
.LBB268_74:                             # %land.rhs.i416
	cmpq	$0, (%r14)
	sete	%sil
	xorl	%r14d, %r14d
	cmpq	$0, 16(%r15)
	movl	$0, %ebp
	jne	.LBB268_26
	jmp	.LBB268_25
.LBB268_70:                             # %then_bb15
	movq	40(%r11), %rax
	vmovaps	.LCPI268_2(%rip), %ymm0         # ymm0 = [0,64,1,0,0,3,64,0]
	vmovups	%ymm0, 1592(%rsp)
	vmovaps	.LCPI268_3(%rip), %xmm0         # xmm0 = [0,3,192,0]
	vmovups	%xmm0, 1624(%rsp)
	movq	128(%rsp), %rcx                 # 8-byte Reload
	movl	%ecx, 1640(%rsp)
	movq	48(%rsp), %rcx                  # 8-byte Reload
	movl	%ecx, 1644(%rsp)
	movq	$576, 1648(%rsp)                # imm = 0x240
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, (%r11)
	movq	$0, 16(%r11)
	movabsq	$17179942914, %rcx              # imm = 0x400012002
	movq	%rcx, 32(%r11)
	vmovups	1592(%rsp), %xmm0
	vmovups	%xmm0, (%rax)
	movq	40(%r11), %rax
	vmovups	1608(%rsp), %xmm0
	vmovups	%xmm0, 16(%rax)
	movq	40(%r11), %rax
	vmovdqu	1624(%rsp), %xmm0
	vmovdqu	%xmm0, 32(%rax)
	movq	40(%r11), %rax
	movl	1640(%rsp), %ecx
	movl	%ecx, 48(%rax)
	movl	1644(%rsp), %ecx
	movl	%ecx, 52(%rax)
	movq	1648(%rsp), %rcx
	movq	%rcx, 56(%rax)
	movq	$0, 24(%r11)
	cmpq	$0, 16(%r11)
	jne	.LBB268_18
	jmp	.LBB268_21
.LBB268_75:
	movl	%eax, %r14d
	movq	(%rsp), %rbp                    # 8-byte Reload
	movq	16(%rsp), %r15                  # 8-byte Reload
	movq	8(%rsp), %rbx                   # 8-byte Reload
	jmp	.LBB268_61
.LBB268_76:
	movl	%eax, %r14d
	xorl	%r12d, %r12d
.LBB268_77:                             # %call_destructor.exit159
	movq	(%rsp), %rbp                    # 8-byte Reload
	movq	16(%rsp), %r15                  # 8-byte Reload
	jmp	.LBB268_64
.LBB268_78:
	movl	%eax, %r14d
	movq	(%rsp), %rbp                    # 8-byte Reload
	xorl	%r15d, %r15d
	movq	8(%rsp), %rbx                   # 8-byte Reload
	jmp	.LBB268_61
.LBB268_79:
	movl	%eax, %r14d
	jmp	.LBB268_77
.LBB268_80:
	movl	%eax, %r14d
	jmp	.LBB268_69
.LBB268_81:                             # %"assert succeeded"
	leaq	.LJTI268_0(%rip), %rcx
	movslq	(%rcx,%rax,4), %rax
	addq	%rcx, %rax
	jmpq	*%rax
.LBB268_82:                             # %assert_failed
	leaq	.Lstr.269(%rip), %rsi
	jmp	.LBB268_93
.LBB268_83:                             # %then_bb18
	movq	1136(%rsp), %r13                # 8-byte Reload
	movq	1152(%rsp), %r12                # 8-byte Reload
	movq	1160(%rsp), %r15                # 8-byte Reload
	movq	1168(%rsp), %r14                # 8-byte Reload
	movq	1176(%rsp), %r11                # 8-byte Reload
	movl	616(%rsp), %r10d                # 4-byte Reload
	movq	1184(%rsp), %r9                 # 8-byte Reload
	movl	272(%rsp), %edx                 # 4-byte Reload
	movq	256(%rsp), %rbx                 # 8-byte Reload
	movq	208(%rsp), %rbp                 # 8-byte Reload
	movl	88(%rsp), %r8d                  # 4-byte Reload
	movq	64(%rsp), %rsi                  # 8-byte Reload
	movq	40(%rsp), %rcx                  # 8-byte Reload
	leaq	.LJTI268_1(%rip), %rdi
	movslq	(%rdi,%rax,4), %rax
	addq	%rdi, %rax
	jmpq	*%rax
.LBB268_84:                             # %assert_failed21
	leaq	.Lstr.273(%rip), %rsi
	xorl	%edi, %edi
	movl	424(%rsp), %edx                 # 4-byte Reload
	jmp	.LBB268_133
.LBB268_85:                             # %no_errors_bb20
	movq	%r14, 928(%rsp)                 # 8-byte Spill
	movq	%r12, 40(%rsp)                  # 8-byte Spill
	movq	360(%rsp), %r13                 # 8-byte Reload
	movq	368(%rsp), %r12                 # 8-byte Reload
	movq	384(%rsp), %r15                 # 8-byte Reload
	movq	392(%rsp), %r14                 # 8-byte Reload
	movq	400(%rsp), %r8                  # 8-byte Reload
	movq	408(%rsp), %rbx                 # 8-byte Reload
	movq	464(%rsp), %rbp                 # 8-byte Reload
	leaq	.LJTI268_2(%rip), %rcx
	movslq	(%rcx,%rax,4), %rax
	addq	%rcx, %rax
	jmpq	*%rax
.LBB268_86:                             # %assert_failed67
	movslq	152(%rsp), %rdx                 # 4-byte Folded Reload
	leaq	.Lstr.267(%rip), %rsi
	jmp	.LBB268_119
.LBB268_87:
	xorl	%r15d, %r15d
.LBB268_88:
	movl	%eax, %r14d
	movq	(%rsp), %rbp                    # 8-byte Reload
	movq	8(%rsp), %rbx                   # 8-byte Reload
	jmp	.LBB268_61
.LBB268_89:                             # %assert_failed1
	leaq	.Lstr.268(%rip), %rsi
	jmp	.LBB268_93
.LBB268_90:                             # %assert_failed2
	leaq	.Lstr.270(%rip), %rsi
	jmp	.LBB268_93
.LBB268_91:                             # %assert_failed3
	leaq	.Lstr(%rip), %rsi
	jmp	.LBB268_93
.LBB268_92:                             # %assert_failed4
	leaq	.Lstr.267(%rip), %rsi
.LBB268_93:                             # %assert_failed
	xorl	%edi, %edi
	addq	$3176, %rsp                     # imm = 0xC68
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	halide_error_buffer_argument_is_null@PLT # TAILCALL
.LBB268_94:                             # %assert_failed68
	leaq	.Lstr(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	%rbp, %rdx
	jmp	.LBB268_122
.LBB268_95:                             # %assert_failed69
	leaq	.Lstr(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	432(%rsp), %rdx                 # 8-byte Reload
	jmp	.LBB268_122
.LBB268_96:                             # %assert_failed70
	leaq	.Lstr(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	%rbx, %rdx
	jmp	.LBB268_124
.LBB268_97:                             # %assert_failed71
	leaq	.Lstr(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	424(%rsp), %rdx                 # 8-byte Reload
	jmp	.LBB268_122
.LBB268_98:                             # %assert_failed72
	leaq	.Lstr(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	%r8, %rdx
	jmp	.LBB268_124
.LBB268_99:                             # %assert_failed73
	leaq	.Lstr(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	416(%rsp), %rdx                 # 8-byte Reload
	jmp	.LBB268_122
.LBB268_100:                            # %assert_failed74
	leaq	.Lstr(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	%r14, %rdx
	jmp	.LBB268_124
.LBB268_101:                            # %assert_failed75
	leaq	.Lstr.270(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	%r15, %rdx
	jmp	.LBB268_122
.LBB268_102:                            # %assert_failed76
	leaq	.Lstr.270(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	376(%rsp), %rdx                 # 8-byte Reload
	jmp	.LBB268_122
.LBB268_103:                            # %assert_failed77
	leaq	.Lstr.270(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	%r12, %rdx
	jmp	.LBB268_124
.LBB268_104:                            # %assert_failed78
	leaq	.Lstr.270(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	352(%rsp), %rdx                 # 8-byte Reload
	jmp	.LBB268_122
.LBB268_105:                            # %assert_failed79
	leaq	.Lstr.270(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	%r13, %rdx
	jmp	.LBB268_124
.LBB268_106:                            # %assert_failed80
	leaq	.Lstr.270(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	344(%rsp), %rdx                 # 8-byte Reload
	jmp	.LBB268_122
.LBB268_107:                            # %assert_failed81
	leaq	.Lstr.270(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	456(%rsp), %rdx                 # 8-byte Reload
	jmp	.LBB268_124
.LBB268_108:                            # %assert_failed82
	leaq	.Lstr.268(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	448(%rsp), %rdx                 # 8-byte Reload
	jmp	.LBB268_122
.LBB268_109:                            # %assert_failed83
	leaq	.Lstr.268(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	184(%rsp), %rdx                 # 8-byte Reload
	jmp	.LBB268_122
.LBB268_110:                            # %assert_failed84
	leaq	.Lstr.268(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	88(%rsp), %rdx                  # 8-byte Reload
	jmp	.LBB268_124
.LBB268_111:                            # %assert_failed85
	leaq	.Lstr.268(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	928(%rsp), %rdx                 # 8-byte Reload
	jmp	.LBB268_122
.LBB268_112:                            # %assert_failed86
	leaq	.Lstr.268(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	40(%rsp), %rdx                  # 8-byte Reload
	jmp	.LBB268_124
.LBB268_113:                            # %assert_failed87
	leaq	.Lstr.268(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	%r9, %rdx
	jmp	.LBB268_122
.LBB268_114:                            # %assert_failed88
	leaq	.Lstr.268(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	24(%rsp), %rdx                  # 8-byte Reload
	jmp	.LBB268_124
.LBB268_115:                            # %assert_failed89
	leaq	.Lstr.269(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	440(%rsp), %rdx                 # 8-byte Reload
	jmp	.LBB268_122
.LBB268_116:                            # %assert_failed90
	leaq	.Lstr.269(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	%r11, %rdx
	jmp	.LBB268_122
.LBB268_117:                            # %assert_failed91
	leaq	.Lstr.269(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	144(%rsp), %rdx                 # 8-byte Reload
	jmp	.LBB268_124
.LBB268_118:                            # %assert_failed92
	leaq	.Lstr.269(%rip), %rsi
.LBB268_119:                            # %common.ret
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	jmp	.LBB268_122
.LBB268_120:                            # %assert_failed93
	leaq	.Lstr.269(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	80(%rsp), %rdx                  # 8-byte Reload
	jmp	.LBB268_124
.LBB268_121:                            # %assert_failed94
	leaq	.Lstr.269(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	%r10, %rdx
.LBB268_122:                            # %common.ret
	vzeroupper
	callq	halide_error_buffer_allocation_too_large@PLT
	movl	%eax, %r14d
	jmp	.LBB268_69
.LBB268_123:                            # %assert_failed95
	leaq	.Lstr.269(%rip), %rsi
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	xorl	%edi, %edi
	movq	136(%rsp), %rdx                 # 8-byte Reload
.LBB268_124:                            # %common.ret
	vzeroupper
	callq	halide_error_buffer_extents_too_large@PLT
	movl	%eax, %r14d
	jmp	.LBB268_69
.LBB268_125:                            # %assert_failed22
	leaq	.Lstr.273(%rip), %rsi
	xorl	%edi, %edi
	movl	$1, %ecx
	jmp	.LBB268_136
.LBB268_126:                            # %assert_failed23
	leaq	.Lstr.274(%rip), %rsi
	xorl	%edi, %edi
	movl	416(%rsp), %edx                 # 4-byte Reload
	jmp	.LBB268_133
.LBB268_127:                            # %assert_failed24
	leaq	.Lstr.274(%rip), %rsi
	xorl	%edi, %edi
	movl	408(%rsp), %edx                 # 4-byte Reload
	jmp	.LBB268_135
.LBB268_128:                            # %assert_failed25
	leaq	.Lstr.275(%rip), %rsi
	xorl	%edi, %edi
	movl	400(%rsp), %edx                 # 4-byte Reload
	jmp	.LBB268_133
.LBB268_129:                            # %assert_failed26
	leaq	.Lstr.275(%rip), %rsi
	xorl	%edi, %edi
	movl	392(%rsp), %edx                 # 4-byte Reload
	jmp	.LBB268_135
.LBB268_130:                            # %assert_failed27
	leaq	.Lstr.276(%rip), %rsi
	xorl	%edi, %edi
	movl	384(%rsp), %edx                 # 4-byte Reload
	jmp	.LBB268_133
.LBB268_131:                            # %assert_failed28
	leaq	.Lstr.276(%rip), %rsi
	xorl	%edi, %edi
	movl	376(%rsp), %edx                 # 4-byte Reload
	jmp	.LBB268_135
.LBB268_132:                            # %assert_failed29
	leaq	.Lstr.277(%rip), %rsi
	xorl	%edi, %edi
	movl	368(%rsp), %edx                 # 4-byte Reload
.LBB268_133:                            # %common.ret
	movl	$73730, %ecx                    # imm = 0x12002
	vzeroupper
	callq	halide_error_bad_type@PLT
	movl	%eax, %r14d
	jmp	.LBB268_69
.LBB268_134:                            # %assert_failed30
	leaq	.Lstr.277(%rip), %rsi
	xorl	%edi, %edi
	movl	360(%rsp), %edx                 # 4-byte Reload
.LBB268_135:                            # %common.ret
	movl	$4, %ecx
.LBB268_136:                            # %common.ret
	vzeroupper
	callq	halide_error_bad_dimensions@PLT
	movl	%eax, %r14d
	jmp	.LBB268_69
.LBB268_137:                            # %assert_failed31
	movl	200(%rsp), %r8d                 # 4-byte Reload
	decl	%r8d
	movq	%r9, %rax
	decl	%eax
	subq	$8, %rsp
	leaq	.Lstr.273(%rip), %rsi
	xorl	%edi, %edi
	xorl	%edx, %edx
	movl	104(%rsp), %ecx                 # 4-byte Reload
	movq	480(%rsp), %r9                  # 8-byte Reload
	jmp	.LBB268_167
.LBB268_138:                            # %assert_failed32
	leaq	.Lstr.273(%rip), %rsi
	xorl	%edi, %edi
	xorl	%edx, %edx
	movq	152(%rsp), %rcx                 # 8-byte Reload
	jmp	.LBB268_170
.LBB268_139:                            # %assert_failed33
	decl	%r8d
	subq	$8, %rsp
	leaq	.Lstr.274(%rip), %rsi
	xorl	%edi, %edi
	xorl	%edx, %edx
	movl	192(%rsp), %ecx                 # 4-byte Reload
	movq	584(%rsp), %r9                  # 8-byte Reload
                                        # kill: def $r9d killed $r9d killed $r9
	pushq	1328(%rsp)                      # 8-byte Folded Reload
	jmp	.LBB268_168
.LBB268_140:                            # %assert_failed34
	leaq	.Lstr.274(%rip), %rsi
	xorl	%edi, %edi
	xorl	%edx, %edx
	movq	144(%rsp), %rcx                 # 8-byte Reload
	jmp	.LBB268_170
.LBB268_141:                            # %assert_failed35
	movl	32(%rsp), %r8d                  # 4-byte Reload
	decl	%r8d
	subq	$8, %rsp
	leaq	.Lstr.274(%rip), %rsi
	xorl	%edi, %edi
	movl	$1, %edx
	movl	360(%rsp), %ecx                 # 4-byte Reload
	movq	576(%rsp), %r9                  # 8-byte Reload
                                        # kill: def $r9d killed $r9d killed $r9
	pushq	1320(%rsp)                      # 8-byte Folded Reload
	jmp	.LBB268_168
.LBB268_142:                            # %assert_failed36
	leaq	.Lstr.274(%rip), %rsi
	xorl	%edi, %edi
	movl	$1, %edx
	movq	80(%rsp), %rcx                  # 8-byte Reload
	jmp	.LBB268_170
.LBB268_143:                            # %assert_failed37
	movl	24(%rsp), %r8d                  # 4-byte Reload
	decl	%r8d
	subq	$8, %rsp
	leaq	.Lstr.274(%rip), %rsi
	xorl	%edi, %edi
	movl	$2, %edx
	movl	352(%rsp), %ecx                 # 4-byte Reload
	movq	568(%rsp), %r9                  # 8-byte Reload
                                        # kill: def $r9d killed $r9d killed $r9
	pushq	1312(%rsp)                      # 8-byte Folded Reload
	jmp	.LBB268_168
.LBB268_144:                            # %assert_failed38
	leaq	.Lstr.274(%rip), %rsi
	xorl	%edi, %edi
	movl	$2, %edx
	movl	%ebp, %ecx
	jmp	.LBB268_171
.LBB268_145:                            # %assert_failed39
	movl	%r10d, %r8d
	decl	%r8d
	movq	544(%rsp), %rax                 # 8-byte Reload
	decl	%eax
	subq	$8, %rsp
	leaq	.Lstr.274(%rip), %rsi
	xorl	%edi, %edi
	movl	$3, %edx
	movl	80(%rsp), %ecx                  # 4-byte Reload
	movq	560(%rsp), %r9                  # 8-byte Reload
	jmp	.LBB268_167
.LBB268_146:                            # %assert_failed40
	leaq	.Lstr.274(%rip), %rsi
	xorl	%edi, %edi
	movl	$3, %edx
	movq	136(%rsp), %rcx                 # 8-byte Reload
	jmp	.LBB268_170
.LBB268_147:                            # %assert_failed41
	leaq	.Lstr.275(%rip), %rsi
	xorl	%edi, %edi
	xorl	%edx, %edx
	jmp	.LBB268_170
.LBB268_148:                            # %assert_failed42
	cmpl	$16, %esi
	movl	$16, %eax
	cmovll	%esi, %eax
	movq	168(%rsp), %r9                  # 8-byte Reload
	leal	(%r9,%rax), %ecx
	addl	$-16, %ecx
	leal	(%rsi,%r9), %r8d
	decl	%r8d
	subq	$8, %rsp
	leaq	.Lstr.275(%rip), %rsi
	xorl	%edi, %edi
	movl	$1, %edx
	jmp	.LBB268_150
.LBB268_149:                            # %assert_failed43
	movq	56(%rsp), %rdx                  # 8-byte Reload
	cmpl	$8, %edx
	movl	$8, %eax
	cmovll	%edx, %eax
	movq	160(%rsp), %r9                  # 8-byte Reload
	leal	(%r9,%rax), %ecx
	addl	$-8, %ecx
	leal	(%rdx,%r9), %r8d
	decl	%r8d
	subq	$8, %rsp
	leaq	.Lstr.275(%rip), %rsi
	xorl	%edi, %edi
	movl	$2, %edx
.LBB268_150:                            # %common.ret
                                        # kill: def $r9d killed $r9d killed $r9
	pushq	%r8
	jmp	.LBB268_168
.LBB268_151:                            # %assert_failed44
	leaq	.Lstr.275(%rip), %rsi
	xorl	%edi, %edi
	movl	$3, %edx
	movq	48(%rsp), %rcx                  # 8-byte Reload
	jmp	.LBB268_170
.LBB268_152:                            # %assert_failed45
	decl	%r11d
	subq	$8, %rsp
	leaq	.Lstr.276(%rip), %rsi
	xorl	%edi, %edi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$2, %r8d
	movq	488(%rsp), %r9                  # 8-byte Reload
                                        # kill: def $r9d killed $r9d killed $r9
	pushq	%r11
	jmp	.LBB268_168
.LBB268_153:                            # %assert_failed46
	leaq	.Lstr.276(%rip), %rsi
	xorl	%edi, %edi
	xorl	%edx, %edx
	movq	928(%rsp), %rcx                 # 8-byte Reload
	jmp	.LBB268_170
.LBB268_154:                            # %assert_failed47
	decl	%r14d
	subq	$8, %rsp
	leaq	.Lstr.276(%rip), %rsi
	xorl	%edi, %edi
	movl	$1, %edx
	xorl	%ecx, %ecx
	movl	$6, %r8d
	movq	112(%rsp), %r9                  # 8-byte Reload
                                        # kill: def $r9d killed $r9d killed $r9
	pushq	%r14
	jmp	.LBB268_168
.LBB268_155:                            # %assert_failed48
	leaq	.Lstr.276(%rip), %rsi
	xorl	%edi, %edi
	movl	$1, %edx
	movl	%ebx, %ecx
	jmp	.LBB268_171
.LBB268_156:                            # %assert_failed49
	decl	%r15d
	subq	$8, %rsp
	leaq	.Lstr.276(%rip), %rsi
	xorl	%edi, %edi
	movl	$2, %edx
	xorl	%ecx, %ecx
	movl	$6, %r8d
	movq	16(%rsp), %r9                   # 8-byte Reload
                                        # kill: def $r9d killed $r9d killed $r9
	pushq	%r15
	jmp	.LBB268_168
.LBB268_157:                            # %assert_failed50
	leaq	.Lstr.276(%rip), %rsi
	xorl	%edi, %edi
	movl	$2, %edx
	movq	248(%rsp), %rcx                 # 8-byte Reload
	jmp	.LBB268_170
.LBB268_158:                            # %assert_failed51
	decl	%r12d
	subq	$8, %rsp
	leaq	.Lstr.276(%rip), %rsi
	xorl	%edi, %edi
	movl	$3, %edx
	xorl	%ecx, %ecx
	movl	$63, %r8d
	movq	336(%rsp), %r9                  # 8-byte Reload
                                        # kill: def $r9d killed $r9d killed $r9
	pushq	%r12
	jmp	.LBB268_168
.LBB268_159:                            # %assert_failed52
	leaq	.Lstr.276(%rip), %rsi
	xorl	%edi, %edi
	movl	$3, %edx
	movq	240(%rsp), %rcx                 # 8-byte Reload
	jmp	.LBB268_170
.LBB268_160:                            # %assert_failed53
	decl	%r13d
	subq	$8, %rsp
	leaq	.Lstr.277(%rip), %rsi
	xorl	%edi, %edi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$63, %r8d
	movq	544(%rsp), %r9                  # 8-byte Reload
                                        # kill: def $r9d killed $r9d killed $r9
	pushq	%r13
	jmp	.LBB268_168
.LBB268_161:                            # %assert_failed54
	leaq	.Lstr.277(%rip), %rsi
	xorl	%edi, %edi
	xorl	%edx, %edx
	movq	176(%rsp), %rcx                 # 8-byte Reload
	jmp	.LBB268_170
.LBB268_162:                            # %assert_failed55
	movq	1144(%rsp), %rax                # 8-byte Reload
	decl	%eax
	subq	$8, %rsp
	leaq	.Lstr.277(%rip), %rsi
	xorl	%edi, %edi
	movl	$1, %edx
	xorl	%ecx, %ecx
	movl	$2, %r8d
	movq	520(%rsp), %r9                  # 8-byte Reload
	jmp	.LBB268_167
.LBB268_163:                            # %assert_failed56
	leaq	.Lstr.277(%rip), %rsi
	xorl	%edi, %edi
	movl	$1, %edx
	movq	232(%rsp), %rcx                 # 8-byte Reload
	jmp	.LBB268_170
.LBB268_164:                            # %assert_failed57
	movq	1128(%rsp), %rax                # 8-byte Reload
	decl	%eax
	subq	$8, %rsp
	leaq	.Lstr.277(%rip), %rsi
	xorl	%edi, %edi
	movl	$2, %edx
	xorl	%ecx, %ecx
	movl	$2, %r8d
	movq	528(%rsp), %r9                  # 8-byte Reload
	jmp	.LBB268_167
.LBB268_165:                            # %assert_failed58
	leaq	.Lstr.277(%rip), %rsi
	xorl	%edi, %edi
	movl	$2, %edx
	movq	224(%rsp), %rcx                 # 8-byte Reload
	jmp	.LBB268_170
.LBB268_166:                            # %assert_failed59
	movl	120(%rsp), %r8d                 # 4-byte Reload
	decl	%r8d
	movq	1120(%rsp), %rax                # 8-byte Reload
	decl	%eax
	subq	$8, %rsp
	leaq	.Lstr.277(%rip), %rsi
	xorl	%edi, %edi
	movl	$3, %edx
	movq	136(%rsp), %rcx                 # 8-byte Reload
                                        # kill: def $ecx killed $ecx killed $rcx
	movq	536(%rsp), %r9                  # 8-byte Reload
.LBB268_167:                            # %common.ret
                                        # kill: def $r9d killed $r9d killed $r9
	pushq	%rax
.LBB268_168:                            # %common.ret
	vzeroupper
	callq	halide_error_access_out_of_bounds@PLT
	addq	$16, %rsp
	movl	%eax, %r14d
	jmp	.LBB268_69
.LBB268_169:                            # %assert_failed60
	leaq	.Lstr.277(%rip), %rsi
	xorl	%edi, %edi
	movl	$3, %edx
	movq	216(%rsp), %rcx                 # 8-byte Reload
.LBB268_170:                            # %common.ret
                                        # kill: def $ecx killed $ecx killed $rcx
.LBB268_171:                            # %common.ret
	vzeroupper
	callq	halide_error_buffer_extents_negative@PLT
	movl	%eax, %r14d
	jmp	.LBB268_69
.LBB268_172:                            # %assert_failed61
	leaq	.Lstr.278(%rip), %rsi
	leaq	.Lstr.279(%rip), %rcx
	xorl	%edi, %edi
	movl	432(%rsp), %edx                 # 4-byte Reload
	jmp	.LBB268_177
.LBB268_173:                            # %assert_failed62
	leaq	.Lstr.280(%rip), %rsi
	leaq	.Lstr.279(%rip), %rcx
	xorl	%edi, %edi
	movl	464(%rsp), %edx                 # 4-byte Reload
	jmp	.LBB268_177
.LBB268_174:                            # %assert_failed63
	leaq	.Lstr.281(%rip), %rsi
	leaq	.Lstr.279(%rip), %rcx
	xorl	%edi, %edi
	movl	456(%rsp), %edx                 # 4-byte Reload
	jmp	.LBB268_177
.LBB268_175:                            # %assert_failed64
	leaq	.Lstr.282(%rip), %rsi
	leaq	.Lstr.279(%rip), %rcx
	xorl	%edi, %edi
	movl	448(%rsp), %edx                 # 4-byte Reload
	jmp	.LBB268_177
.LBB268_176:                            # %assert_failed65
	leaq	.Lstr.283(%rip), %rsi
	leaq	.Lstr.279(%rip), %rcx
	xorl	%edi, %edi
	movl	440(%rsp), %edx                 # 4-byte Reload
.LBB268_177:                            # %common.ret
	movl	$1, %r8d
	vzeroupper
	callq	halide_error_constraint_violated@PLT
	movl	%eax, %r14d
	jmp	.LBB268_69
.Lfunc_end268:
	.size	simple_ex, .Lfunc_end268-simple_ex
	.section	.rodata.simple_ex,"a",@progbits
	.p2align	2
.LJTI268_0:
	.long	.LBB268_82-.LJTI268_0
	.long	.LBB268_89-.LJTI268_0
	.long	.LBB268_90-.LJTI268_0
	.long	.LBB268_91-.LJTI268_0
	.long	.LBB268_92-.LJTI268_0
.LJTI268_1:
	.long	.LBB268_84-.LJTI268_1
	.long	.LBB268_125-.LJTI268_1
	.long	.LBB268_126-.LJTI268_1
	.long	.LBB268_127-.LJTI268_1
	.long	.LBB268_128-.LJTI268_1
	.long	.LBB268_129-.LJTI268_1
	.long	.LBB268_130-.LJTI268_1
	.long	.LBB268_131-.LJTI268_1
	.long	.LBB268_132-.LJTI268_1
	.long	.LBB268_134-.LJTI268_1
	.long	.LBB268_137-.LJTI268_1
	.long	.LBB268_138-.LJTI268_1
	.long	.LBB268_139-.LJTI268_1
	.long	.LBB268_140-.LJTI268_1
	.long	.LBB268_141-.LJTI268_1
	.long	.LBB268_142-.LJTI268_1
	.long	.LBB268_143-.LJTI268_1
	.long	.LBB268_144-.LJTI268_1
	.long	.LBB268_145-.LJTI268_1
	.long	.LBB268_146-.LJTI268_1
	.long	.LBB268_147-.LJTI268_1
	.long	.LBB268_148-.LJTI268_1
	.long	.LBB268_149-.LJTI268_1
	.long	.LBB268_151-.LJTI268_1
	.long	.LBB268_152-.LJTI268_1
	.long	.LBB268_153-.LJTI268_1
	.long	.LBB268_154-.LJTI268_1
	.long	.LBB268_155-.LJTI268_1
	.long	.LBB268_156-.LJTI268_1
	.long	.LBB268_157-.LJTI268_1
	.long	.LBB268_158-.LJTI268_1
	.long	.LBB268_159-.LJTI268_1
	.long	.LBB268_160-.LJTI268_1
	.long	.LBB268_161-.LJTI268_1
	.long	.LBB268_162-.LJTI268_1
	.long	.LBB268_163-.LJTI268_1
	.long	.LBB268_164-.LJTI268_1
	.long	.LBB268_165-.LJTI268_1
	.long	.LBB268_166-.LJTI268_1
	.long	.LBB268_169-.LJTI268_1
	.long	.LBB268_172-.LJTI268_1
	.long	.LBB268_173-.LJTI268_1
	.long	.LBB268_174-.LJTI268_1
	.long	.LBB268_175-.LJTI268_1
	.long	.LBB268_176-.LJTI268_1
.LJTI268_2:
	.long	.LBB268_86-.LJTI268_2
	.long	.LBB268_94-.LJTI268_2
	.long	.LBB268_95-.LJTI268_2
	.long	.LBB268_96-.LJTI268_2
	.long	.LBB268_97-.LJTI268_2
	.long	.LBB268_98-.LJTI268_2
	.long	.LBB268_99-.LJTI268_2
	.long	.LBB268_100-.LJTI268_2
	.long	.LBB268_101-.LJTI268_2
	.long	.LBB268_102-.LJTI268_2
	.long	.LBB268_103-.LJTI268_2
	.long	.LBB268_104-.LJTI268_2
	.long	.LBB268_105-.LJTI268_2
	.long	.LBB268_106-.LJTI268_2
	.long	.LBB268_107-.LJTI268_2
	.long	.LBB268_108-.LJTI268_2
	.long	.LBB268_109-.LJTI268_2
	.long	.LBB268_110-.LJTI268_2
	.long	.LBB268_111-.LJTI268_2
	.long	.LBB268_112-.LJTI268_2
	.long	.LBB268_113-.LJTI268_2
	.long	.LBB268_114-.LJTI268_2
	.long	.LBB268_115-.LJTI268_2
	.long	.LBB268_116-.LJTI268_2
	.long	.LBB268_117-.LJTI268_2
	.long	.LBB268_118-.LJTI268_2
	.long	.LBB268_120-.LJTI268_2
	.long	.LBB268_121-.LJTI268_2
	.long	.LBB268_123-.LJTI268_2
                                        # -- End function
	.section	.text.simple_ex_argv,"ax",@progbits
	.globl	simple_ex_argv                  # -- Begin function simple_ex_argv
	.p2align	4, 0x90
	.type	simple_ex_argv,@function
simple_ex_argv:                         # @simple_ex_argv
# %bb.0:                                # %entry
	movq	(%rdi), %rax
	movq	8(%rdi), %rsi
	movq	16(%rdi), %rdx
	movq	24(%rdi), %rcx
	movq	32(%rdi), %r8
	movq	%rax, %rdi
	jmp	simple_ex@PLT                   # TAILCALL
.Lfunc_end269:
	.size	simple_ex_argv, .Lfunc_end269-simple_ex_argv
                                        # -- End function
	.section	.text.simple_ex_metadata,"ax",@progbits
	.globl	simple_ex_metadata              # -- Begin function simple_ex_metadata
	.p2align	4, 0x90
	.type	simple_ex_metadata,@function
simple_ex_metadata:                     # @simple_ex_metadata
# %bb.0:                                # %entry
	leaq	.Lsimple_ex_metadata_storage(%rip), %rax
	retq
.Lfunc_end270:
	.size	simple_ex_metadata, .Lfunc_end270-simple_ex_metadata
                                        # -- End function
	.type	_ZN6Halide7Runtime8Internal13custom_mallocE,@object # @_ZN6Halide7Runtime8Internal13custom_mallocE
	.data
	.weak	_ZN6Halide7Runtime8Internal13custom_mallocE
	.p2align	3
_ZN6Halide7Runtime8Internal13custom_mallocE:
	.quad	halide_default_malloc
	.size	_ZN6Halide7Runtime8Internal13custom_mallocE, 8

	.type	_ZN6Halide7Runtime8Internal11custom_freeE,@object # @_ZN6Halide7Runtime8Internal11custom_freeE
	.weak	_ZN6Halide7Runtime8Internal11custom_freeE
	.p2align	3
_ZN6Halide7Runtime8Internal11custom_freeE:
	.quad	halide_default_free
	.size	_ZN6Halide7Runtime8Internal11custom_freeE, 8

	.type	.L.str,@object                  # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"Error: "
	.size	.L.str, 8

	.type	_ZN6Halide7Runtime8Internal13error_handlerE,@object # @_ZN6Halide7Runtime8Internal13error_handlerE
	.data
	.weak	_ZN6Halide7Runtime8Internal13error_handlerE
	.p2align	3
_ZN6Halide7Runtime8Internal13error_handlerE:
	.quad	halide_default_error
	.size	_ZN6Halide7Runtime8Internal13error_handlerE, 8

	.type	_ZN6Halide7Runtime8Internal12custom_printE,@object # @_ZN6Halide7Runtime8Internal12custom_printE
	.weak	_ZN6Halide7Runtime8Internal12custom_printE
	.p2align	3
_ZN6Halide7Runtime8Internal12custom_printE:
	.quad	halide_default_print
	.size	_ZN6Halide7Runtime8Internal12custom_printE, 8

	.type	halide_reference_clock_inited,@object # @halide_reference_clock_inited
	.bss
	.weak	halide_reference_clock_inited
halide_reference_clock_inited:
	.byte	0                               # 0x0
	.size	halide_reference_clock_inited, 1

	.type	halide_reference_clock,@object  # @halide_reference_clock
	.weak	halide_reference_clock
	.p2align	3
halide_reference_clock:
	.zero	16
	.size	halide_reference_clock, 16

	.section	.fini_array,"aw",@fini_array
	.p2align	3
	.quad	halide_thread_pool_cleanup
	.quad	halide_trace_cleanup
	.quad	halide_cache_cleanup
	.quad	halide_profiler_shutdown
	.quad	halide_opencl_cleanup
	.type	.L.str.5,@object                # @.str.5
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.5:
	.asciz	"/workdir/Halide/src/runtime/synchronization_common.h:386 halide_abort_if_false() failed: next != nullptr\n"
	.size	.L.str.5, 106

	.type	_ZN6Halide7Runtime8Internal15Synchronization5tableE,@object # @_ZN6Halide7Runtime8Internal15Synchronization5tableE
	.bss
	.weak	_ZN6Halide7Runtime8Internal15Synchronization5tableE
	.p2align	3
_ZN6Halide7Runtime8Internal15Synchronization5tableE:
	.zero	24576
	.size	_ZN6Halide7Runtime8Internal15Synchronization5tableE, 24576

	.type	.L.str.1,@object                # @.str.1
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1:
	.asciz	"HL_NUM_THREADS"
	.size	.L.str.1, 15

	.type	.L.str.2,@object                # @.str.2
.L.str.2:
	.asciz	"HL_NUMTHREADS"
	.size	.L.str.2, 14

	.type	_ZN6Halide7Runtime8Internal10work_queueE,@object # @_ZN6Halide7Runtime8Internal10work_queueE
	.bss
	.weak	_ZN6Halide7Runtime8Internal10work_queueE
	.p2align	3
_ZN6Halide7Runtime8Internal10work_queueE:
	.zero	8
	.long	0                               # 0x0
	.long	0                               # 0x0
	.quad	0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.zero	4
	.zero	8
	.zero	8
	.zero	8
	.long	0                               # 0x0
	.long	0                               # 0x0
	.zero	2048
	.byte	0                               # 0x0
	.byte	0                               # 0x0
	.zero	2
	.long	0                               # 0x0
	.size	_ZN6Halide7Runtime8Internal10work_queueE, 2128

	.type	.L.str.3,@object                # @.str.3
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.3:
	.asciz	"/workdir/Halide/src/runtime/thread_pool_common.h:527 halide_abort_if_false() failed: (min_threads <= ((task_parent->task.min_threads * task_parent->active_workers) - task_parent->threads_reserved)) && \"Logic error: thread over commit.\\n\"\n"
	.size	.L.str.3, 239

	.type	_ZN6Halide7Runtime8Internal14custom_do_taskE,@object # @_ZN6Halide7Runtime8Internal14custom_do_taskE
	.data
	.weak	_ZN6Halide7Runtime8Internal14custom_do_taskE
	.p2align	3
_ZN6Halide7Runtime8Internal14custom_do_taskE:
	.quad	halide_default_do_task
	.size	_ZN6Halide7Runtime8Internal14custom_do_taskE, 8

	.type	_ZN6Halide7Runtime8Internal19custom_do_loop_taskE,@object # @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE
	.weak	_ZN6Halide7Runtime8Internal19custom_do_loop_taskE
	.p2align	3
_ZN6Halide7Runtime8Internal19custom_do_loop_taskE:
	.quad	halide_default_do_loop_task
	.size	_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, 8

	.type	_ZN6Halide7Runtime8Internal17custom_do_par_forE,@object # @_ZN6Halide7Runtime8Internal17custom_do_par_forE
	.weak	_ZN6Halide7Runtime8Internal17custom_do_par_forE
	.p2align	3
_ZN6Halide7Runtime8Internal17custom_do_par_forE:
	.quad	halide_default_do_par_for
	.size	_ZN6Halide7Runtime8Internal17custom_do_par_forE, 8

	.type	_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE,@object # @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE
	.weak	_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE
	.p2align	3
_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE:
	.quad	halide_default_do_parallel_tasks
	.size	_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, 8

	.type	_ZN6Halide7Runtime8Internal21custom_semaphore_initE,@object # @_ZN6Halide7Runtime8Internal21custom_semaphore_initE
	.weak	_ZN6Halide7Runtime8Internal21custom_semaphore_initE
	.p2align	3
_ZN6Halide7Runtime8Internal21custom_semaphore_initE:
	.quad	halide_default_semaphore_init
	.size	_ZN6Halide7Runtime8Internal21custom_semaphore_initE, 8

	.type	_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE,@object # @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE
	.weak	_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE
	.p2align	3
_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE:
	.quad	halide_default_semaphore_try_acquire
	.size	_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, 8

	.type	_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE,@object # @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE
	.weak	_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE
	.p2align	3
_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE:
	.quad	halide_default_semaphore_release
	.size	_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, 8

	.type	.L.str.4,@object                # @.str.4
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.4:
	.asciz	"halide_set_num_threads: must be >= 0."
	.size	.L.str.4, 38

	.type	_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE,@object # @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE
	.section	.data.rel.ro._ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE,"aGw",@progbits,_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE,comdat
	.weak	_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE
	.p2align	3
_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE:
	.quad	0
	.quad	0
	.quad	_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE
	.quad	_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv
	.quad	_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib
	.quad	_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb
	.size	_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, 48

	.type	_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE,@object # @_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE
	.section	.data.rel.ro._ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE,"aGw",@progbits,_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE,comdat
	.weak	_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE
	.p2align	3
_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE:
	.quad	0
	.quad	0
	.quad	_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE
	.quad	_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv
	.quad	_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib
	.quad	_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb
	.size	_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE, 48

	.type	_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE,@object # @_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE
	.section	.data.rel.ro._ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE,"aGw",@progbits,_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE,comdat
	.weak	_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE
	.p2align	3
_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE:
	.quad	0
	.quad	0
	.quad	_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE
	.quad	_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv
	.quad	_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib
	.quad	_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb
	.size	_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE, 48

	.type	.L.str.5.6,@object              # @.str.5.6
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.5.6:
	.asciz	"/workdir/Halide/src/runtime/synchronization_common.h:994 halide_abort_if_false() failed: val & 0x1\n"
	.size	.L.str.5.6, 100

	.type	_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE,@object # @_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE
	.section	.data.rel.ro._ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE,"aGw",@progbits,_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE,comdat
	.weak	_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE
	.p2align	3
_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE:
	.quad	0
	.quad	0
	.quad	_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE
	.quad	_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv
	.quad	_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib
	.quad	_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb
	.size	_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE, 48

	.type	.L.str.6,@object                # @.str.6
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.6:
	.asciz	"/workdir/Halide/src/runtime/thread_pool_common.h:155 halide_abort_if_false() failed: bytes == limit && \"Logic error in thread pool work queue initialization.\\n\"\n"
	.size	.L.str.6, 162

	.type	_ZN6Halide7Runtime8Internal17custom_get_symbolE,@object # @_ZN6Halide7Runtime8Internal17custom_get_symbolE
	.data
	.weak	_ZN6Halide7Runtime8Internal17custom_get_symbolE
	.p2align	3
_ZN6Halide7Runtime8Internal17custom_get_symbolE:
	.quad	halide_default_get_symbol
	.size	_ZN6Halide7Runtime8Internal17custom_get_symbolE, 8

	.type	_ZN6Halide7Runtime8Internal19custom_load_libraryE,@object # @_ZN6Halide7Runtime8Internal19custom_load_libraryE
	.weak	_ZN6Halide7Runtime8Internal19custom_load_libraryE
	.p2align	3
_ZN6Halide7Runtime8Internal19custom_load_libraryE:
	.quad	halide_default_load_library
	.size	_ZN6Halide7Runtime8Internal19custom_load_libraryE, 8

	.type	_ZN6Halide7Runtime8Internal25custom_get_library_symbolE,@object # @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE
	.weak	_ZN6Halide7Runtime8Internal25custom_get_library_symbolE
	.p2align	3
_ZN6Halide7Runtime8Internal25custom_get_library_symbolE:
	.quad	halide_default_get_library_symbol
	.size	_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, 8

	.type	_ZN6Halide7Runtime8Internal17halide_gpu_deviceE,@object # @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE
	.bss
	.weak	_ZN6Halide7Runtime8Internal17halide_gpu_deviceE
	.p2align	2
_ZN6Halide7Runtime8Internal17halide_gpu_deviceE:
	.long	0                               # 0x0
	.size	_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, 4

	.type	_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE,@object # @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE
	.weak	_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE
_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE:
	.byte	0                               # 0x0
	.size	_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, 1

	.type	_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE,@object # @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE
	.weak	_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE
_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE:
	.byte	0                               # 0x0
	.size	_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, 1

	.type	.L.str.8,@object                # @.str.8
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.8:
	.asciz	"HL_GPU_DEVICE"
	.size	.L.str.8, 14

	.type	_ZN6Halide7Runtime8Internal19halide_trace_bufferE,@object # @_ZN6Halide7Runtime8Internal19halide_trace_bufferE
	.bss
	.weak	_ZN6Halide7Runtime8Internal19halide_trace_bufferE
	.p2align	3
_ZN6Halide7Runtime8Internal19halide_trace_bufferE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal19halide_trace_bufferE, 8

	.type	_ZN6Halide7Runtime8Internal17halide_trace_fileE,@object # @_ZN6Halide7Runtime8Internal17halide_trace_fileE
	.data
	.weak	_ZN6Halide7Runtime8Internal17halide_trace_fileE
	.p2align	2
_ZN6Halide7Runtime8Internal17halide_trace_fileE:
	.long	4294967295                      # 0xffffffff
	.size	_ZN6Halide7Runtime8Internal17halide_trace_fileE, 4

	.type	_ZN6Halide7Runtime8Internal22halide_trace_file_lockE,@object # @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE
	.bss
	.weak	_ZN6Halide7Runtime8Internal22halide_trace_file_lockE
_ZN6Halide7Runtime8Internal22halide_trace_file_lockE:
	.byte	0                               # 0x0
	.size	_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, 1

	.type	_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE,@object # @_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE
	.weak	_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE
_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE:
	.byte	0                               # 0x0
	.size	_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE, 1

	.type	_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE,@object # @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE
	.weak	_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE
	.p2align	3
_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, 8

	.type	_ZZ20halide_default_traceE3ids,@object # @_ZZ20halide_default_traceE3ids
	.data
	.p2align	2
_ZZ20halide_default_traceE3ids:
	.long	1                               # 0x1
	.size	_ZZ20halide_default_traceE3ids, 4

	.type	.L.str.1.10,@object             # @.str.1.10
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1.10:
	.zero	1
	.size	.L.str.1.10, 1

	.type	.L.str.2.11,@object             # @.str.2.11
.L.str.2.11:
	.asciz	"/workdir/Halide/src/runtime/tracing.cpp:218 halide_abort_if_false() failed: print_bits <= 64 && \"Tracing bad type\"\n"
	.size	.L.str.2.11, 116

	.type	.L.str.3.12,@object             # @.str.3.12
.L.str.3.12:
	.asciz	"Load"
	.size	.L.str.3.12, 5

	.type	.L.str.4.13,@object             # @.str.4.13
.L.str.4.13:
	.asciz	"Store"
	.size	.L.str.4.13, 6

	.type	.L.str.5.14,@object             # @.str.5.14
.L.str.5.14:
	.asciz	"Begin realization"
	.size	.L.str.5.14, 18

	.type	.L.str.6.15,@object             # @.str.6.15
.L.str.6.15:
	.asciz	"End realization"
	.size	.L.str.6.15, 16

	.type	.L.str.7,@object                # @.str.7
.L.str.7:
	.asciz	"Produce"
	.size	.L.str.7, 8

	.type	.L.str.8.16,@object             # @.str.8.16
.L.str.8.16:
	.asciz	"End produce"
	.size	.L.str.8.16, 12

	.type	.L.str.9.17,@object             # @.str.9.17
.L.str.9.17:
	.asciz	"Consume"
	.size	.L.str.9.17, 8

	.type	.L.str.10,@object               # @.str.10
.L.str.10:
	.asciz	"End consume"
	.size	.L.str.10, 12

	.type	.L.str.11,@object               # @.str.11
.L.str.11:
	.asciz	"Begin pipeline"
	.size	.L.str.11, 15

	.type	.L.str.12,@object               # @.str.12
.L.str.12:
	.asciz	"End pipeline"
	.size	.L.str.12, 13

	.type	.L.str.13,@object               # @.str.13
.L.str.13:
	.asciz	"Tag"
	.size	.L.str.13, 4

	.type	.Lreltable.halide_default_trace,@object # @reltable.halide_default_trace
	.section	.rodata,"a",@progbits
	.p2align	2
.Lreltable.halide_default_trace:
	.long	.L.str.3.12-.Lreltable.halide_default_trace
	.long	.L.str.4.13-.Lreltable.halide_default_trace
	.long	.L.str.5.14-.Lreltable.halide_default_trace
	.long	.L.str.6.15-.Lreltable.halide_default_trace
	.long	.L.str.7-.Lreltable.halide_default_trace
	.long	.L.str.8.16-.Lreltable.halide_default_trace
	.long	.L.str.9.17-.Lreltable.halide_default_trace
	.long	.L.str.10-.Lreltable.halide_default_trace
	.long	.L.str.11-.Lreltable.halide_default_trace
	.long	.L.str.12-.Lreltable.halide_default_trace
	.long	.L.str.13-.Lreltable.halide_default_trace
	.size	.Lreltable.halide_default_trace, 44

	.type	.L.str.17,@object               # @.str.17
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.17:
	.asciz	"<"
	.size	.L.str.17, 2

	.type	.L.str.18,@object               # @.str.18
.L.str.18:
	.asciz	">, <"
	.size	.L.str.18, 5

	.type	.L.str.20,@object               # @.str.20
.L.str.20:
	.asciz	">)"
	.size	.L.str.20, 3

	.type	.L.str.22,@object               # @.str.22
.L.str.22:
	.asciz	" = <"
	.size	.L.str.22, 5

	.type	.L.str.23,@object               # @.str.23
.L.str.23:
	.asciz	" = "
	.size	.L.str.23, 4

	.type	.L.str.24,@object               # @.str.24
.L.str.24:
	.asciz	"/workdir/Halide/src/runtime/tracing.cpp:287 halide_abort_if_false() failed: print_bits >= 16 && \"Tracing a bad type\"\n"
	.size	.L.str.24, 118

	.type	.L.str.25,@object               # @.str.25
.L.str.25:
	.asciz	">"
	.size	.L.str.25, 2

	.type	.L.str.26,@object               # @.str.26
.L.str.26:
	.asciz	" tag = \""
	.size	.L.str.26, 9

	.type	.L.str.27,@object               # @.str.27
.L.str.27:
	.asciz	"\""
	.size	.L.str.27, 2

	.type	_ZN6Halide7Runtime8Internal19halide_custom_traceE,@object # @_ZN6Halide7Runtime8Internal19halide_custom_traceE
	.data
	.weak	_ZN6Halide7Runtime8Internal19halide_custom_traceE
	.p2align	3
_ZN6Halide7Runtime8Internal19halide_custom_traceE:
	.quad	halide_default_trace
	.size	_ZN6Halide7Runtime8Internal19halide_custom_traceE, 8

	.type	.L.str.28,@object               # @.str.28
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.28:
	.asciz	"HL_TRACE_FILE"
	.size	.L.str.28, 14

	.type	.L.str.29,@object               # @.str.29
.L.str.29:
	.asciz	"ab"
	.size	.L.str.29, 3

	.type	.L.str.30,@object               # @.str.30
.L.str.30:
	.asciz	"/workdir/Halide/src/runtime/tracing.cpp:351 halide_abort_if_false() failed: file && \"Failed to open trace file\\n\"\n"
	.size	.L.str.30, 115

	.type	.L.str.31,@object               # @.str.31
.L.str.31:
	.asciz	"/workdir/Halide/src/runtime/tracing.cpp:87 halide_abort_if_false() failed: size <= buffer_size\n"
	.size	.L.str.31, 96

	.type	.L.str.32,@object               # @.str.32
.L.str.32:
	.asciz	"/workdir/Halide/src/runtime/tracing.cpp:115 halide_abort_if_false() failed: success && \"Could not write to trace file\"\n"
	.size	.L.str.32, 120

	.type	_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE,@object # @_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE
	.data
	.weak	_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE
	.p2align	1
_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE:
	.short	3                               # 0x3
	.short	3                               # 0x3
	.short	1                               # 0x1
	.short	2                               # 0x2
	.short	1                               # 0x1
	.short	2                               # 0x2
	.short	1                               # 0x1
	.short	2                               # 0x2
	.short	1                               # 0x1
	.short	2                               # 0x2
	.size	_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE, 20

	.type	_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE,@object # @_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE
	.weak	_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE
_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE:
	.ascii	"\007\006\t\b\013\n\r\f\017\016"
	.size	_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE, 10

	.type	_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE,@object # @_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE
	.weak	_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE
_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE:
	.ascii	"\007\t\002\001\004\003\006\005\r\f"
	.size	_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE, 10

	.type	.L.str.34,@object               # @.str.34
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.34:
	.asciz	"Bounds query buffer passed to halide_debug_to_file"
	.size	.L.str.34, 51

	.type	.L.str.1.35,@object             # @.str.1.35
.L.str.1.35:
	.asciz	"Can't debug_to_file a Func with more than four dimensions\n"
	.size	.L.str.1.35, 59

	.type	.L.str.2.36,@object             # @.str.2.36
.L.str.2.36:
	.asciz	"wb"
	.size	.L.str.2.36, 3

	.type	.L.str.3.37,@object             # @.str.3.37
.L.str.3.37:
	.asciz	".tiff"
	.size	.L.str.3.37, 6

	.type	.L.str.4.38,@object             # @.str.4.38
.L.str.4.38:
	.asciz	".tif"
	.size	.L.str.4.38, 5

	.type	.L.str.5.39,@object             # @.str.5.39
.L.str.5.39:
	.asciz	".mat"
	.size	.L.str.5.39, 5

	.type	.L__const.halide_debug_to_file.header,@object # @__const.halide_debug_to_file.header
	.section	.rodata,"a",@progbits
.L__const.halide_debug_to_file.header:
	.asciz	"MATLAB 5.0 MAT-file, produced by Halide                                                                                     \000\001IM"
	.size	.L__const.halide_debug_to_file.header, 129

	.type	.L.str.6.40,@object             # @.str.6.40
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.6.40:
	.asciz	"Can't debug_to_file to a .mat file greater than 4GB\n"
	.size	.L.str.6.40, 53

	.type	_ZN6Halide7Runtime8Internal16memoization_lockE,@object # @_ZN6Halide7Runtime8Internal16memoization_lockE
	.bss
	.weak	_ZN6Halide7Runtime8Internal16memoization_lockE
	.p2align	3
_ZN6Halide7Runtime8Internal16memoization_lockE:
	.zero	8
	.size	_ZN6Halide7Runtime8Internal16memoization_lockE, 8

	.type	_ZN6Halide7Runtime8Internal13cache_entriesE,@object # @_ZN6Halide7Runtime8Internal13cache_entriesE
	.weak	_ZN6Halide7Runtime8Internal13cache_entriesE
	.p2align	3
_ZN6Halide7Runtime8Internal13cache_entriesE:
	.zero	2048
	.size	_ZN6Halide7Runtime8Internal13cache_entriesE, 2048

	.type	_ZN6Halide7Runtime8Internal18most_recently_usedE,@object # @_ZN6Halide7Runtime8Internal18most_recently_usedE
	.weak	_ZN6Halide7Runtime8Internal18most_recently_usedE
	.p2align	3
_ZN6Halide7Runtime8Internal18most_recently_usedE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal18most_recently_usedE, 8

	.type	_ZN6Halide7Runtime8Internal19least_recently_usedE,@object # @_ZN6Halide7Runtime8Internal19least_recently_usedE
	.weak	_ZN6Halide7Runtime8Internal19least_recently_usedE
	.p2align	3
_ZN6Halide7Runtime8Internal19least_recently_usedE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal19least_recently_usedE, 8

	.type	_ZN6Halide7Runtime8Internal14max_cache_sizeE,@object # @_ZN6Halide7Runtime8Internal14max_cache_sizeE
	.data
	.weak	_ZN6Halide7Runtime8Internal14max_cache_sizeE
	.p2align	3
_ZN6Halide7Runtime8Internal14max_cache_sizeE:
	.quad	1048576                         # 0x100000
	.size	_ZN6Halide7Runtime8Internal14max_cache_sizeE, 8

	.type	_ZN6Halide7Runtime8Internal18current_cache_sizeE,@object # @_ZN6Halide7Runtime8Internal18current_cache_sizeE
	.bss
	.weak	_ZN6Halide7Runtime8Internal18current_cache_sizeE
	.p2align	3
_ZN6Halide7Runtime8Internal18current_cache_sizeE:
	.quad	0                               # 0x0
	.size	_ZN6Halide7Runtime8Internal18current_cache_sizeE, 8

	.type	.L.str.2.42,@object             # @.str.2.42
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.2.42:
	.asciz	"/workdir/Halide/src/runtime/cache.cpp:284 halide_abort_if_false() failed: prev_hash_entry != nullptr\n"
	.size	.L.str.2.42, 102

	.type	.L.str.3.43,@object             # @.str.3.43
.L.str.3.43:
	.asciz	"/workdir/Halide/src/runtime/cache.cpp:373 halide_abort_if_false() failed: entry->more_recent != nullptr\n"
	.size	.L.str.3.43, 105

	.type	.L.str.4.44,@object             # @.str.4.44
.L.str.4.44:
	.asciz	"/workdir/Halide/src/runtime/cache.cpp:377 halide_abort_if_false() failed: least_recently_used == entry\n"
	.size	.L.str.4.44, 104

	.type	.L.str.5.45,@object             # @.str.5.45
.L.str.5.45:
	.asciz	"/workdir/Halide/src/runtime/cache.cpp:380 halide_abort_if_false() failed: entry->more_recent != nullptr\n"
	.size	.L.str.5.45, 105

	.type	.L.str.9.46,@object             # @.str.9.46
.L.str.9.46:
	.asciz	"/workdir/Halide/src/runtime/cache.cpp:472 halide_abort_if_false() failed: no_host_pointers_equal\n"
	.size	.L.str.9.46, 98

	.type	.L.str.12.47,@object            # @.str.12.47
.L.str.12.47:
	.asciz	"/workdir/Halide/src/runtime/cache.cpp:550 halide_abort_if_false() failed: entry->in_use_count > 0\n"
	.size	.L.str.12.47, 99

	.type	.L.str.50,@object               # @.str.50
.L.str.50:
	.asciz	"<nullptr>"
	.size	.L.str.50, 10

	.type	.L.str.1.57,@object             # @.str.1.57
.L.str.1.57:
	.asciz	"-nan"
	.size	.L.str.1.57, 5

	.type	.L.str.2.58,@object             # @.str.2.58
.L.str.2.58:
	.asciz	"nan"
	.size	.L.str.2.58, 4

	.type	.L.str.3.59,@object             # @.str.3.59
.L.str.3.59:
	.asciz	"-inf"
	.size	.L.str.3.59, 5

	.type	.L.str.4.60,@object             # @.str.4.60
.L.str.4.60:
	.asciz	"inf"
	.size	.L.str.4.60, 4

	.type	.L.str.5.61,@object             # @.str.5.61
.L.str.5.61:
	.asciz	"-0.000000e+00"
	.size	.L.str.5.61, 14

	.type	.L.str.6.62,@object             # @.str.6.62
.L.str.6.62:
	.asciz	"0.000000e+00"
	.size	.L.str.6.62, 13

	.type	.L.str.7.63,@object             # @.str.7.63
.L.str.7.63:
	.asciz	"-0.000000"
	.size	.L.str.7.63, 10

	.type	.L.str.8.64,@object             # @.str.8.64
.L.str.8.64:
	.asciz	"0.000000"
	.size	.L.str.8.64, 9

	.type	.L.str.9.65,@object             # @.str.9.65
.L.str.9.65:
	.asciz	"-"
	.size	.L.str.9.65, 2

	.type	.L.str.11.67,@object            # @.str.11.67
.L.str.11.67:
	.asciz	"e+"
	.size	.L.str.11.67, 3

	.type	.L.str.12.68,@object            # @.str.12.68
.L.str.12.68:
	.asciz	"e-"
	.size	.L.str.12.68, 3

	.type	.L.str.13.71,@object            # @.str.13.71
.L.str.13.71:
	.asciz	"0123456789abcdef"
	.size	.L.str.13.71, 17

	.type	.L.str.14.76,@object            # @.str.14.76
.L.str.14.76:
	.asciz	"int"
	.size	.L.str.14.76, 4

	.type	.L.str.15.75,@object            # @.str.15.75
.L.str.15.75:
	.asciz	"uint"
	.size	.L.str.15.75, 5

	.type	.L.str.16.74,@object            # @.str.16.74
.L.str.16.74:
	.asciz	"float"
	.size	.L.str.16.74, 6

	.type	.L.str.17.73,@object            # @.str.17.73
.L.str.17.73:
	.asciz	"handle"
	.size	.L.str.17.73, 7

	.type	.L.str.18.72,@object            # @.str.18.72
.L.str.18.72:
	.asciz	"bad_type_code"
	.size	.L.str.18.72, 14

	.type	.L.str.19.77,@object            # @.str.19.77
.L.str.19.77:
	.asciz	"x"
	.size	.L.str.19.77, 2

	.type	.L.str.20.78,@object            # @.str.20.78
.L.str.20.78:
	.asciz	"nullptr"
	.size	.L.str.20.78, 8

	.type	.L.str.21.79,@object            # @.str.21.79
.L.str.21.79:
	.asciz	"buffer("
	.size	.L.str.21.79, 8

	.type	.L.str.23.82,@object            # @.str.23.82
.L.str.23.82:
	.asciz	", {"
	.size	.L.str.23.82, 4

	.type	.L.str.24.83,@object            # @.str.24.83
.L.str.24.83:
	.asciz	"}"
	.size	.L.str.24.83, 2

	.type	_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE,@object # @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE
	.data
	.weak	_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE
_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE:
	.byte	1                               # 0x1
	.size	_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, 1

	.type	_ZN6Halide7Runtime8Internal21allocation_pools_lockE,@object # @_ZN6Halide7Runtime8Internal21allocation_pools_lockE
	.bss
	.weak	_ZN6Halide7Runtime8Internal21allocation_pools_lockE
	.p2align	3
_ZN6Halide7Runtime8Internal21allocation_pools_lockE:
	.zero	8
	.size	_ZN6Halide7Runtime8Internal21allocation_pools_lockE, 8

	.type	_ZN6Halide7Runtime8Internal23device_allocation_poolsE,@object # @_ZN6Halide7Runtime8Internal23device_allocation_poolsE
	.weak	_ZN6Halide7Runtime8Internal23device_allocation_poolsE
	.p2align	3
_ZN6Halide7Runtime8Internal23device_allocation_poolsE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal23device_allocation_poolsE, 8

	.type	_ZN6Halide7Runtime8Internal17device_copy_mutexE,@object # @_ZN6Halide7Runtime8Internal17device_copy_mutexE
	.weak	_ZN6Halide7Runtime8Internal17device_copy_mutexE
	.p2align	3
_ZN6Halide7Runtime8Internal17device_copy_mutexE:
	.zero	8
	.size	_ZN6Halide7Runtime8Internal17device_copy_mutexE, 8

	.type	.L.str.6.88,@object             # @.str.6.88
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.6.88:
	.asciz	"halide_copy_to_host"
	.size	.L.str.6.88, 20

	.type	.L.str.7.89,@object             # @.str.7.89
.L.str.7.89:
	.asciz	"halide_copy_to_device"
	.size	.L.str.7.89, 22

	.type	.L.str.9.90,@object             # @.str.9.90
.L.str.9.90:
	.asciz	"halide_copy_to_device does not support switching interfaces\n"
	.size	.L.str.9.90, 61

	.type	.L.str.16.93,@object            # @.str.16.93
.L.str.16.93:
	.asciz	"halide_device_sync"
	.size	.L.str.16.93, 19

	.type	.L.str.17.91,@object            # @.str.17.91
.L.str.17.91:
	.asciz	"halide_device_malloc"
	.size	.L.str.17.91, 21

	.type	.L.str.20.92,@object            # @.str.20.92
.L.str.20.92:
	.asciz	"halide_device_malloc doesn't support switching interfaces\n"
	.size	.L.str.20.92, 59

	.type	.L.str.21.96,@object            # @.str.21.96
.L.str.21.96:
	.asciz	"halide_device_free"
	.size	.L.str.21.96, 19

	.type	.L.str.22.97,@object            # @.str.22.97
.L.str.22.97:
	.asciz	"/workdir/Halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\n"
	.size	.L.str.22.97, 103

	.type	.L.str.23.98,@object            # @.str.23.98
.L.str.23.98:
	.asciz	"halide_device_and_host_malloc"
	.size	.L.str.23.98, 30

	.type	.L.str.25.99,@object            # @.str.25.99
.L.str.25.99:
	.asciz	"halide_device_and_host_malloc doesn't support switching interfaces\n"
	.size	.L.str.25.99, 68

	.type	.L.str.26.100,@object           # @.str.26.100
.L.str.26.100:
	.asciz	"allocating host and device memory failed\n"
	.size	.L.str.26.100, 42

	.type	.L.str.27.101,@object           # @.str.27.101
.L.str.27.101:
	.asciz	"halide_device_and_host_free"
	.size	.L.str.27.101, 28

	.type	.L.str.28.102,@object           # @.str.28.102
.L.str.28.102:
	.asciz	"/workdir/Halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\n"
	.size	.L.str.28.102, 103

	.type	.L.str.29.103,@object           # @.str.29.103
.L.str.29.103:
	.asciz	"halide_default_device_and_host_malloc"
	.size	.L.str.29.103, 38

	.type	.L.str.30.104,@object           # @.str.30.104
.L.str.30.104:
	.asciz	"halide_default_device_and_host_free"
	.size	.L.str.30.104, 36

	.type	.L.str.31.105,@object           # @.str.31.105
.L.str.31.105:
	.asciz	"halide_device_wrap_native"
	.size	.L.str.31.105, 26

	.type	.L.str.32.106,@object           # @.str.32.106
.L.str.32.106:
	.asciz	"halide_device_wrap_native doesn't support switching interfaces\n"
	.size	.L.str.32.106, 64

	.type	.L.str.33.107,@object           # @.str.33.107
.L.str.33.107:
	.asciz	"halide_device_detach_native"
	.size	.L.str.33.107, 28

	.type	.L.str.34.108,@object           # @.str.34.108
.L.str.34.108:
	.asciz	"/workdir/Halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\n"
	.size	.L.str.34.108, 103

	.type	.L.str.35,@object               # @.str.35
.L.str.35:
	.asciz	"halide_default_device_detach_native"
	.size	.L.str.35, 36

	.type	.L.str.41,@object               # @.str.41
.L.str.41:
	.asciz	"halide_buffer_copy does not support switching device interfaces"
	.size	.L.str.41, 64

	.type	.L.str.58,@object               # @.str.58
.L.str.58:
	.asciz	"device_interface does not support cropping\n"
	.size	.L.str.58, 44

	.type	.L.str.59,@object               # @.str.59
.L.str.59:
	.asciz	"device_interface does not support slicing\n"
	.size	.L.str.59, 43

	.type	.L.str.60,@object               # @.str.60
.L.str.60:
	.asciz	"destination buffer already has a device allocation\n"
	.size	.L.str.60, 52

	.type	.L.str.61,@object               # @.str.61
.L.str.61:
	.asciz	"src and dst must have identical dimensionality\n"
	.size	.L.str.61, 48

	.type	.L.str.64,@object               # @.str.64
.L.str.64:
	.asciz	"dst must have exactly one fewer dimension than src\n"
	.size	.L.str.64, 52

	.type	.L.str.111,@object              # @.str.111
.L.str.111:
	.asciz	"Bounds inference call to external stage "
	.size	.L.str.111, 41

	.type	.L.str.1.112,@object            # @.str.1.112
.L.str.1.112:
	.asciz	" returned non-zero value: "
	.size	.L.str.1.112, 27

	.type	.L.str.2.113,@object            # @.str.2.113
.L.str.2.113:
	.asciz	"Call to external stage "
	.size	.L.str.2.113, 24

	.type	.L.str.3.114,@object            # @.str.3.114
.L.str.3.114:
	.asciz	"Bounds given for "
	.size	.L.str.3.114, 18

	.type	.L.str.4.115,@object            # @.str.4.115
.L.str.4.115:
	.asciz	" in "
	.size	.L.str.4.115, 5

	.type	.L.str.5.116,@object            # @.str.5.116
.L.str.5.116:
	.asciz	" (from "
	.size	.L.str.5.116, 8

	.type	.L.str.6.117,@object            # @.str.6.117
.L.str.6.117:
	.asciz	" to "
	.size	.L.str.6.117, 5

	.type	.L.str.7.118,@object            # @.str.7.118
.L.str.7.118:
	.asciz	") do not cover required region (from "
	.size	.L.str.7.118, 38

	.type	.L.str.8.119,@object            # @.str.8.119
.L.str.8.119:
	.asciz	")"
	.size	.L.str.8.119, 2

	.type	.L.str.9.120,@object            # @.str.9.120
.L.str.9.120:
	.asciz	" has type "
	.size	.L.str.9.120, 11

	.type	.L.str.10.121,@object           # @.str.10.121
.L.str.10.121:
	.asciz	" but type of the buffer passed in is "
	.size	.L.str.10.121, 38

	.type	.L.str.11.122,@object           # @.str.11.122
.L.str.11.122:
	.asciz	" requires a buffer of exactly "
	.size	.L.str.11.122, 31

	.type	.L.str.12.123,@object           # @.str.12.123
.L.str.12.123:
	.asciz	" dimensions, but the buffer passed in has "
	.size	.L.str.12.123, 43

	.type	.L.str.13.124,@object           # @.str.13.124
.L.str.13.124:
	.asciz	" dimensions"
	.size	.L.str.13.124, 12

	.type	.L.str.14.125,@object           # @.str.14.125
.L.str.14.125:
	.asciz	" is accessed at "
	.size	.L.str.14.125, 17

	.type	.L.str.15.126,@object           # @.str.15.126
.L.str.15.126:
	.asciz	", which is before the min ("
	.size	.L.str.15.126, 28

	.type	.L.str.16.127,@object           # @.str.16.127
.L.str.16.127:
	.asciz	") in dimension "
	.size	.L.str.16.127, 16

	.type	.L.str.17.128,@object           # @.str.17.128
.L.str.17.128:
	.asciz	", which is beyond the max ("
	.size	.L.str.17.128, 28

	.type	.L.str.18.129,@object           # @.str.18.129
.L.str.18.129:
	.asciz	"Total allocation for buffer "
	.size	.L.str.18.129, 29

	.type	.L.str.19.130,@object           # @.str.19.130
.L.str.19.130:
	.asciz	" is "
	.size	.L.str.19.130, 5

	.type	.L.str.20.131,@object           # @.str.20.131
.L.str.20.131:
	.asciz	", which exceeds the maximum size of "
	.size	.L.str.20.131, 37

	.type	.L.str.21.132,@object           # @.str.21.132
.L.str.21.132:
	.asciz	"The extents for buffer "
	.size	.L.str.21.132, 24

	.type	.L.str.22.133,@object           # @.str.22.133
.L.str.22.133:
	.asciz	" dimension "
	.size	.L.str.22.133, 12

	.type	.L.str.23.134,@object           # @.str.23.134
.L.str.23.134:
	.asciz	" is negative ("
	.size	.L.str.23.134, 15

	.type	.L.str.24.135,@object           # @.str.24.135
.L.str.24.135:
	.asciz	"Product of extents for buffer "
	.size	.L.str.24.135, 31

	.type	.L.str.25.136,@object           # @.str.25.136
.L.str.25.136:
	.asciz	"Applying the constraints on "
	.size	.L.str.25.136, 29

	.type	.L.str.26.137,@object           # @.str.26.137
.L.str.26.137:
	.asciz	" to the required region made it smaller in dimension "
	.size	.L.str.26.137, 54

	.type	.L.str.27.138,@object           # @.str.27.138
.L.str.27.138:
	.asciz	". "
	.size	.L.str.27.138, 3

	.type	.L.str.28.139,@object           # @.str.28.139
.L.str.28.139:
	.asciz	"Required size: "
	.size	.L.str.28.139, 16

	.type	.L.str.29.140,@object           # @.str.29.140
.L.str.29.140:
	.asciz	"Constrained size: "
	.size	.L.str.29.140, 19

	.type	.L.str.30.141,@object           # @.str.30.141
.L.str.30.141:
	.asciz	"."
	.size	.L.str.30.141, 2

	.type	.L.str.31.142,@object           # @.str.31.142
.L.str.31.142:
	.asciz	"Constraint violated: "
	.size	.L.str.31.142, 22

	.type	.L.str.32.143,@object           # @.str.32.143
.L.str.32.143:
	.asciz	" ("
	.size	.L.str.32.143, 3

	.type	.L.str.33.144,@object           # @.str.33.144
.L.str.33.144:
	.asciz	") == "
	.size	.L.str.33.144, 6

	.type	.L.str.34.145,@object           # @.str.34.145
.L.str.34.145:
	.asciz	"Parameter "
	.size	.L.str.34.145, 11

	.type	.L.str.35.146,@object           # @.str.35.146
.L.str.35.146:
	.asciz	" but must be at least "
	.size	.L.str.35.146, 23

	.type	.L.str.36,@object               # @.str.36
.L.str.36:
	.asciz	" but must be at most "
	.size	.L.str.36, 22

	.type	.L.str.37,@object               # @.str.37
.L.str.37:
	.asciz	"Out of memory (halide_malloc returned nullptr)"
	.size	.L.str.37, 47

	.type	.L.str.38,@object               # @.str.38
.L.str.38:
	.asciz	"Buffer argument "
	.size	.L.str.38, 17

	.type	.L.str.39,@object               # @.str.39
.L.str.39:
	.asciz	" is nullptr"
	.size	.L.str.39, 12

	.type	.L.str.40,@object               # @.str.40
.L.str.40:
	.asciz	"Failed to dump function "
	.size	.L.str.40, 25

	.type	.L.str.41.147,@object           # @.str.41.147
.L.str.41.147:
	.asciz	" to file "
	.size	.L.str.41.147, 10

	.type	.L.str.42,@object               # @.str.42
.L.str.42:
	.asciz	" with error "
	.size	.L.str.42, 13

	.type	.L.str.43,@object               # @.str.43
.L.str.43:
	.asciz	"The host pointer of "
	.size	.L.str.43, 21

	.type	.L.str.44,@object               # @.str.44
.L.str.44:
	.asciz	" is not aligned to a "
	.size	.L.str.44, 22

	.type	.L.str.45,@object               # @.str.45
.L.str.45:
	.asciz	" bytes boundary."
	.size	.L.str.45, 17

	.type	.L.str.46,@object               # @.str.46
.L.str.46:
	.asciz	"The buffer "
	.size	.L.str.46, 12

	.type	.L.str.47,@object               # @.str.47
.L.str.47:
	.asciz	" is dirty on device, but this pipeline was compiled "
	.size	.L.str.47, 53

	.type	.L.str.48,@object               # @.str.48
.L.str.48:
	.asciz	"with no support for device to host copies."
	.size	.L.str.48, 43

	.type	.L.str.49,@object               # @.str.49
.L.str.49:
	.asciz	" is null, but the pipeline will access it on the host."
	.size	.L.str.49, 55

	.type	.L.str.50.148,@object           # @.str.50.148
.L.str.50.148:
	.asciz	"The folded storage dimension "
	.size	.L.str.50.148, 30

	.type	.L.str.51,@object               # @.str.51
.L.str.51:
	.asciz	" of "
	.size	.L.str.51, 5

	.type	.L.str.52,@object               # @.str.52
.L.str.52:
	.asciz	" was accessed out of order by loop "
	.size	.L.str.52, 36

	.type	.L.str.53,@object               # @.str.53
.L.str.53:
	.asciz	"Cannot fold dimension "
	.size	.L.str.53, 23

	.type	.L.str.54,@object               # @.str.54
.L.str.54:
	.asciz	" because an extern stage accesses ["
	.size	.L.str.54, 36

	.type	.L.str.55,@object               # @.str.55
.L.str.55:
	.asciz	", "
	.size	.L.str.55, 3

	.type	.L.str.56,@object               # @.str.56
.L.str.56:
	.asciz	"],"
	.size	.L.str.56, 3

	.type	.L.str.57,@object               # @.str.57
.L.str.57:
	.asciz	" which is outside the range currently valid: ["
	.size	.L.str.57, 47

	.type	.L.str.58.149,@object           # @.str.58.149
.L.str.58.149:
	.asciz	"]."
	.size	.L.str.58.149, 3

	.type	.L.str.59.150,@object           # @.str.59.150
.L.str.59.150:
	.asciz	" which wraps around the boundary of the fold, "
	.size	.L.str.59.150, 47

	.type	.L.str.60.151,@object           # @.str.60.151
.L.str.60.151:
	.asciz	"which occurs at multiples of "
	.size	.L.str.60.151, 30

	.type	.L.str.61.152,@object           # @.str.61.152
.L.str.61.152:
	.asciz	"The fold factor ("
	.size	.L.str.61.152, 18

	.type	.L.str.62,@object               # @.str.62
.L.str.62:
	.asciz	") of dimension "
	.size	.L.str.62, 16

	.type	.L.str.63,@object               # @.str.63
.L.str.63:
	.asciz	" is too small to store the required region accessed by loop "
	.size	.L.str.63, 61

	.type	.L.str.64.153,@object           # @.str.64.153
.L.str.64.153:
	.asciz	")."
	.size	.L.str.64.153, 3

	.type	.L.str.65,@object               # @.str.65
.L.str.65:
	.asciz	"Requirement Failed: ("
	.size	.L.str.65, 22

	.type	.L.str.66,@object               # @.str.66
.L.str.66:
	.asciz	") "
	.size	.L.str.66, 3

	.type	.L.str.67,@object               # @.str.67
.L.str.67:
	.asciz	"A schedule specialized with specialize_fail() was chosen: "
	.size	.L.str.67, 59

	.type	.L.str.68,@object               # @.str.68
.L.str.68:
	.asciz	"Buffer has a non-zero device but no device interface.\n"
	.size	.L.str.68, 55

	.type	.L.str.69,@object               # @.str.69
.L.str.69:
	.asciz	"Buffer has a non-null device_interface but device is 0.\n"
	.size	.L.str.69, 57

	.type	.L.str.70,@object               # @.str.70
.L.str.70:
	.asciz	"Buffer has both host and device dirty bits set.\n"
	.size	.L.str.70, 49

	.type	.L.str.71,@object               # @.str.71
.L.str.71:
	.asciz	"Buffer pointer passed to "
	.size	.L.str.71, 26

	.type	.L.str.72,@object               # @.str.72
.L.str.72:
	.asciz	" is null.\n"
	.size	.L.str.72, 11

	.type	.L.str.73,@object               # @.str.73
.L.str.73:
	.asciz	"The explicit allocation bound ("
	.size	.L.str.73, 32

	.type	.L.str.74,@object               # @.str.74
.L.str.74:
	.asciz	" is too small to store the required region ("
	.size	.L.str.74, 45

	.type	.L.str.75,@object               # @.str.75
.L.str.75:
	.asciz	"Buffer could not be cropped (runtime error or unimplemented device option).\n"
	.size	.L.str.75, 77

	.type	_ZZ25halide_profiler_get_stateE1s,@object # @_ZZ25halide_profiler_get_stateE1s
	.data
	.p2align	3
_ZZ25halide_profiler_get_stateE1s:
	.zero	8
	.long	1                               # 0x1
	.long	0                               # 0x0
	.long	0                               # 0x0
	.long	0                               # 0x0
	.quad	0
	.quad	0
	.quad	0
	.size	_ZZ25halide_profiler_get_stateE1s, 48

	.type	.L.str.186,@object              # @.str.186
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.186:
	.asciz	"/workdir/Halide/src/runtime/profiler_common.cpp:246 halide_abort_if_false() failed: p_stats != nullptr\n"
	.size	.L.str.186, 104

	.type	.L.str.1.187,@object            # @.str.1.187
.L.str.1.187:
	.asciz	"/workdir/Halide/src/runtime/profiler_common.cpp:273 halide_abort_if_false() failed: p_stats != nullptr\n"
	.size	.L.str.1.187, 104

	.type	.L.str.2.188,@object            # @.str.2.188
.L.str.2.188:
	.asciz	"/workdir/Halide/src/runtime/profiler_common.cpp:274 halide_abort_if_false() failed: func_id >= 0\n"
	.size	.L.str.2.188, 98

	.type	.L.str.3.189,@object            # @.str.3.189
.L.str.3.189:
	.asciz	"/workdir/Halide/src/runtime/profiler_common.cpp:275 halide_abort_if_false() failed: func_id < p_stats->num_funcs\n"
	.size	.L.str.3.189, 114

	.type	.L.str.4.190,@object            # @.str.4.190
.L.str.4.190:
	.asciz	"/workdir/Halide/src/runtime/profiler_common.cpp:309 halide_abort_if_false() failed: p_stats != nullptr\n"
	.size	.L.str.4.190, 104

	.type	.L.str.5.191,@object            # @.str.5.191
.L.str.5.191:
	.asciz	"/workdir/Halide/src/runtime/profiler_common.cpp:310 halide_abort_if_false() failed: func_id >= 0\n"
	.size	.L.str.5.191, 98

	.type	.L.str.6.192,@object            # @.str.6.192
.L.str.6.192:
	.asciz	"/workdir/Halide/src/runtime/profiler_common.cpp:311 halide_abort_if_false() failed: func_id < p_stats->num_funcs\n"
	.size	.L.str.6.192, 114

	.type	.L.str.8.165,@object            # @.str.8.165
.L.str.8.165:
	.asciz	" total time: "
	.size	.L.str.8.165, 14

	.type	.L.str.9.166,@object            # @.str.9.166
.L.str.9.166:
	.asciz	" ms"
	.size	.L.str.9.166, 4

	.type	.L.str.10.167,@object           # @.str.10.167
.L.str.10.167:
	.asciz	"  samples: "
	.size	.L.str.10.167, 12

	.type	.L.str.11.168,@object           # @.str.11.168
.L.str.11.168:
	.asciz	"  runs: "
	.size	.L.str.11.168, 9

	.type	.L.str.12.169,@object           # @.str.12.169
.L.str.12.169:
	.asciz	"  time/run: "
	.size	.L.str.12.169, 13

	.type	.L.str.13.170,@object           # @.str.13.170
.L.str.13.170:
	.asciz	" ms\n"
	.size	.L.str.13.170, 5

	.type	.L.str.14.171,@object           # @.str.14.171
.L.str.14.171:
	.asciz	" average threads used: "
	.size	.L.str.14.171, 24

	.type	.L.str.15.172,@object           # @.str.15.172
.L.str.15.172:
	.asciz	" heap allocations: "
	.size	.L.str.15.172, 20

	.type	.L.str.16.173,@object           # @.str.16.173
.L.str.16.173:
	.asciz	"  peak heap usage: "
	.size	.L.str.16.173, 20

	.type	.L.str.17.174,@object           # @.str.17.174
.L.str.17.174:
	.asciz	" bytes\n"
	.size	.L.str.17.174, 8

	.type	.L.str.18.175,@object           # @.str.18.175
.L.str.18.175:
	.asciz	"  "
	.size	.L.str.18.175, 3

	.type	.L.str.19.176,@object           # @.str.19.176
.L.str.19.176:
	.asciz	": "
	.size	.L.str.19.176, 3

	.type	.L.str.21.178,@object           # @.str.21.178
.L.str.21.178:
	.asciz	"ms"
	.size	.L.str.21.178, 3

	.type	.L.str.22.179,@object           # @.str.22.179
.L.str.22.179:
	.asciz	"("
	.size	.L.str.22.179, 2

	.type	.L.str.23.180,@object           # @.str.23.180
.L.str.23.180:
	.asciz	"%)"
	.size	.L.str.23.180, 3

	.type	.L.str.24.181,@object           # @.str.24.181
.L.str.24.181:
	.asciz	"threads: "
	.size	.L.str.24.181, 10

	.type	.L.str.25.182,@object           # @.str.25.182
.L.str.25.182:
	.asciz	" peak: "
	.size	.L.str.25.182, 8

	.type	.L.str.26.183,@object           # @.str.26.183
.L.str.26.183:
	.asciz	" num: "
	.size	.L.str.26.183, 7

	.type	.L.str.27.184,@object           # @.str.27.184
.L.str.27.184:
	.asciz	" avg: "
	.size	.L.str.27.184, 7

	.type	.L.str.28.185,@object           # @.str.28.185
.L.str.28.185:
	.asciz	" stack: "
	.size	.L.str.28.185, 9

	.type	_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE,@object # @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE
	.data
	.weak	_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE
	.p2align	3
_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE:
	.quad	halide_default_can_use_target_features
	.size	_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, 8

	.type	_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE,@object # @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE
	.bss
	.weak	_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE
	.p2align	3
_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE:
	.zero	32
	.size	_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, 32

	.type	_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE,@object # @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE
	.weak	_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE
_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE:
	.byte	0                               # 0x0
	.size	_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, 1

	.type	_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE,@object # @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE
	.weak	_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE
	.p2align	3
_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE:
	.zero	8
	.size	_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE, 8

	.type	.L.str.197,@object              # @.str.197
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.197:
	.asciz	"Internal error: wrong structure size passed to halide_can_use_target_features()\n"
	.size	.L.str.197, 81

	.section	.init_array,"aw",@init_array
	.p2align	3
	.quad	_GLOBAL__sub_I_opencl.cpp
	.type	_ZN6Halide7Runtime8Internal6OpenCL16clGetPlatformIDsE,@object # @_ZN6Halide7Runtime8Internal6OpenCL16clGetPlatformIDsE
	.bss
	.weak	_ZN6Halide7Runtime8Internal6OpenCL16clGetPlatformIDsE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL16clGetPlatformIDsE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL16clGetPlatformIDsE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL17clGetPlatformInfoE,@object # @_ZN6Halide7Runtime8Internal6OpenCL17clGetPlatformInfoE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL17clGetPlatformInfoE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL17clGetPlatformInfoE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL17clGetPlatformInfoE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL14clGetDeviceIDsE,@object # @_ZN6Halide7Runtime8Internal6OpenCL14clGetDeviceIDsE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL14clGetDeviceIDsE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL14clGetDeviceIDsE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL14clGetDeviceIDsE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL15clGetDeviceInfoE,@object # @_ZN6Halide7Runtime8Internal6OpenCL15clGetDeviceInfoE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL15clGetDeviceInfoE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL15clGetDeviceInfoE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL15clGetDeviceInfoE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL18clCreateSubDevicesE,@object # @_ZN6Halide7Runtime8Internal6OpenCL18clCreateSubDevicesE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL18clCreateSubDevicesE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL18clCreateSubDevicesE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL18clCreateSubDevicesE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL14clRetainDeviceE,@object # @_ZN6Halide7Runtime8Internal6OpenCL14clRetainDeviceE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL14clRetainDeviceE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL14clRetainDeviceE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL14clRetainDeviceE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL15clReleaseDeviceE,@object # @_ZN6Halide7Runtime8Internal6OpenCL15clReleaseDeviceE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL15clReleaseDeviceE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL15clReleaseDeviceE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL15clReleaseDeviceE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL15clCreateContextE,@object # @_ZN6Halide7Runtime8Internal6OpenCL15clCreateContextE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL15clCreateContextE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL15clCreateContextE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL15clCreateContextE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL23clCreateContextFromTypeE,@object # @_ZN6Halide7Runtime8Internal6OpenCL23clCreateContextFromTypeE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL23clCreateContextFromTypeE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL23clCreateContextFromTypeE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL23clCreateContextFromTypeE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL15clRetainContextE,@object # @_ZN6Halide7Runtime8Internal6OpenCL15clRetainContextE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL15clRetainContextE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL15clRetainContextE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL15clRetainContextE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL16clReleaseContextE,@object # @_ZN6Halide7Runtime8Internal6OpenCL16clReleaseContextE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL16clReleaseContextE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL16clReleaseContextE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL16clReleaseContextE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL16clGetContextInfoE,@object # @_ZN6Halide7Runtime8Internal6OpenCL16clGetContextInfoE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL16clGetContextInfoE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL16clGetContextInfoE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL16clGetContextInfoE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL20clCreateCommandQueueE,@object # @_ZN6Halide7Runtime8Internal6OpenCL20clCreateCommandQueueE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL20clCreateCommandQueueE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL20clCreateCommandQueueE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL20clCreateCommandQueueE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL20clRetainCommandQueueE,@object # @_ZN6Halide7Runtime8Internal6OpenCL20clRetainCommandQueueE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL20clRetainCommandQueueE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL20clRetainCommandQueueE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL20clRetainCommandQueueE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL21clReleaseCommandQueueE,@object # @_ZN6Halide7Runtime8Internal6OpenCL21clReleaseCommandQueueE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL21clReleaseCommandQueueE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL21clReleaseCommandQueueE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL21clReleaseCommandQueueE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL21clGetCommandQueueInfoE,@object # @_ZN6Halide7Runtime8Internal6OpenCL21clGetCommandQueueInfoE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL21clGetCommandQueueInfoE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL21clGetCommandQueueInfoE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL21clGetCommandQueueInfoE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL14clCreateBufferE,@object # @_ZN6Halide7Runtime8Internal6OpenCL14clCreateBufferE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL14clCreateBufferE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL14clCreateBufferE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL14clCreateBufferE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL17clCreateSubBufferE,@object # @_ZN6Halide7Runtime8Internal6OpenCL17clCreateSubBufferE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL17clCreateSubBufferE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL17clCreateSubBufferE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL17clCreateSubBufferE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL13clCreateImageE,@object # @_ZN6Halide7Runtime8Internal6OpenCL13clCreateImageE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL13clCreateImageE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL13clCreateImageE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL13clCreateImageE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL17clRetainMemObjectE,@object # @_ZN6Halide7Runtime8Internal6OpenCL17clRetainMemObjectE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL17clRetainMemObjectE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL17clRetainMemObjectE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL17clRetainMemObjectE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL18clReleaseMemObjectE,@object # @_ZN6Halide7Runtime8Internal6OpenCL18clReleaseMemObjectE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL18clReleaseMemObjectE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL18clReleaseMemObjectE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL18clReleaseMemObjectE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL26clGetSupportedImageFormatsE,@object # @_ZN6Halide7Runtime8Internal6OpenCL26clGetSupportedImageFormatsE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL26clGetSupportedImageFormatsE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL26clGetSupportedImageFormatsE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL26clGetSupportedImageFormatsE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL18clGetMemObjectInfoE,@object # @_ZN6Halide7Runtime8Internal6OpenCL18clGetMemObjectInfoE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL18clGetMemObjectInfoE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL18clGetMemObjectInfoE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL18clGetMemObjectInfoE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL14clGetImageInfoE,@object # @_ZN6Halide7Runtime8Internal6OpenCL14clGetImageInfoE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL14clGetImageInfoE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL14clGetImageInfoE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL14clGetImageInfoE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL32clSetMemObjectDestructorCallbackE,@object # @_ZN6Halide7Runtime8Internal6OpenCL32clSetMemObjectDestructorCallbackE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL32clSetMemObjectDestructorCallbackE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL32clSetMemObjectDestructorCallbackE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL32clSetMemObjectDestructorCallbackE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL25clCreateProgramWithSourceE,@object # @_ZN6Halide7Runtime8Internal6OpenCL25clCreateProgramWithSourceE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL25clCreateProgramWithSourceE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL25clCreateProgramWithSourceE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL25clCreateProgramWithSourceE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL15clRetainProgramE,@object # @_ZN6Halide7Runtime8Internal6OpenCL15clRetainProgramE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL15clRetainProgramE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL15clRetainProgramE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL15clRetainProgramE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL16clReleaseProgramE,@object # @_ZN6Halide7Runtime8Internal6OpenCL16clReleaseProgramE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL16clReleaseProgramE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL16clReleaseProgramE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL16clReleaseProgramE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL14clBuildProgramE,@object # @_ZN6Halide7Runtime8Internal6OpenCL14clBuildProgramE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL14clBuildProgramE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL14clBuildProgramE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL14clBuildProgramE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL21clGetProgramBuildInfoE,@object # @_ZN6Halide7Runtime8Internal6OpenCL21clGetProgramBuildInfoE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL21clGetProgramBuildInfoE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL21clGetProgramBuildInfoE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL21clGetProgramBuildInfoE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL14clCreateKernelE,@object # @_ZN6Halide7Runtime8Internal6OpenCL14clCreateKernelE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL14clCreateKernelE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL14clCreateKernelE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL14clCreateKernelE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL14clRetainKernelE,@object # @_ZN6Halide7Runtime8Internal6OpenCL14clRetainKernelE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL14clRetainKernelE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL14clRetainKernelE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL14clRetainKernelE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL15clReleaseKernelE,@object # @_ZN6Halide7Runtime8Internal6OpenCL15clReleaseKernelE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL15clReleaseKernelE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL15clReleaseKernelE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL15clReleaseKernelE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL14clSetKernelArgE,@object # @_ZN6Halide7Runtime8Internal6OpenCL14clSetKernelArgE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL14clSetKernelArgE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL14clSetKernelArgE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL14clSetKernelArgE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL7clFlushE,@object # @_ZN6Halide7Runtime8Internal6OpenCL7clFlushE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL7clFlushE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL7clFlushE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL7clFlushE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL8clFinishE,@object # @_ZN6Halide7Runtime8Internal6OpenCL8clFinishE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL8clFinishE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL8clFinishE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL8clFinishE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL19clEnqueueReadBufferE,@object # @_ZN6Halide7Runtime8Internal6OpenCL19clEnqueueReadBufferE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL19clEnqueueReadBufferE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL19clEnqueueReadBufferE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL19clEnqueueReadBufferE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL23clEnqueueReadBufferRectE,@object # @_ZN6Halide7Runtime8Internal6OpenCL23clEnqueueReadBufferRectE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL23clEnqueueReadBufferRectE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL23clEnqueueReadBufferRectE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL23clEnqueueReadBufferRectE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL20clEnqueueWriteBufferE,@object # @_ZN6Halide7Runtime8Internal6OpenCL20clEnqueueWriteBufferE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL20clEnqueueWriteBufferE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL20clEnqueueWriteBufferE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL20clEnqueueWriteBufferE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL24clEnqueueWriteBufferRectE,@object # @_ZN6Halide7Runtime8Internal6OpenCL24clEnqueueWriteBufferRectE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL24clEnqueueWriteBufferRectE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL24clEnqueueWriteBufferRectE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL24clEnqueueWriteBufferRectE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL19clEnqueueCopyBufferE,@object # @_ZN6Halide7Runtime8Internal6OpenCL19clEnqueueCopyBufferE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL19clEnqueueCopyBufferE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL19clEnqueueCopyBufferE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL19clEnqueueCopyBufferE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL18clEnqueueReadImageE,@object # @_ZN6Halide7Runtime8Internal6OpenCL18clEnqueueReadImageE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL18clEnqueueReadImageE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL18clEnqueueReadImageE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL18clEnqueueReadImageE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL19clEnqueueWriteImageE,@object # @_ZN6Halide7Runtime8Internal6OpenCL19clEnqueueWriteImageE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL19clEnqueueWriteImageE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL19clEnqueueWriteImageE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL19clEnqueueWriteImageE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL18clEnqueueMapBufferE,@object # @_ZN6Halide7Runtime8Internal6OpenCL18clEnqueueMapBufferE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL18clEnqueueMapBufferE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL18clEnqueueMapBufferE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL18clEnqueueMapBufferE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL17clEnqueueMapImageE,@object # @_ZN6Halide7Runtime8Internal6OpenCL17clEnqueueMapImageE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL17clEnqueueMapImageE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL17clEnqueueMapImageE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL17clEnqueueMapImageE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL23clEnqueueUnmapMemObjectE,@object # @_ZN6Halide7Runtime8Internal6OpenCL23clEnqueueUnmapMemObjectE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL23clEnqueueUnmapMemObjectE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL23clEnqueueUnmapMemObjectE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL23clEnqueueUnmapMemObjectE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL22clEnqueueNDRangeKernelE,@object # @_ZN6Halide7Runtime8Internal6OpenCL22clEnqueueNDRangeKernelE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL22clEnqueueNDRangeKernelE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL22clEnqueueNDRangeKernelE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL22clEnqueueNDRangeKernelE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL10lib_openclE,@object # @_ZN6Halide7Runtime8Internal6OpenCL10lib_openclE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL10lib_openclE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL10lib_openclE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL10lib_openclE, 8

	.type	.L.str.1.262,@object            # @.str.1.262
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1.262:
	.asciz	"libOpenCL.so"
	.size	.L.str.1.262, 13

	.type	.L.str.2.263,@object            # @.str.2.263
.L.str.2.263:
	.asciz	"/System/Library/Frameworks/OpenCL.framework/OpenCL"
	.size	.L.str.2.263, 51

	.type	.L.str.4.215,@object            # @.str.4.215
.L.str.4.215:
	.asciz	"\n"
	.size	.L.str.4.215, 2

	.type	.L.str.7.213,@object            # @.str.7.213
.L.str.7.213:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:67 halide_abort_if_false() failed: clCreateContext == nullptr\n"
	.size	.L.str.7.213, 102

	.type	.L.str.8.214,@object            # @.str.8.214
.L.str.8.214:
	.asciz	"clGetPlatformIDs"
	.size	.L.str.8.214, 17

	.type	.L.str.9.216,@object            # @.str.9.216
.L.str.9.216:
	.asciz	"clGetPlatformInfo"
	.size	.L.str.9.216, 18

	.type	.L.str.10.217,@object           # @.str.10.217
.L.str.10.217:
	.asciz	"clGetDeviceIDs"
	.size	.L.str.10.217, 15

	.type	.L.str.11.218,@object           # @.str.11.218
.L.str.11.218:
	.asciz	"clGetDeviceInfo"
	.size	.L.str.11.218, 16

	.type	.L.str.12.219,@object           # @.str.12.219
.L.str.12.219:
	.asciz	"clCreateSubDevices"
	.size	.L.str.12.219, 19

	.type	.L.str.13.220,@object           # @.str.13.220
.L.str.13.220:
	.asciz	"clRetainDevice"
	.size	.L.str.13.220, 15

	.type	.L.str.14.221,@object           # @.str.14.221
.L.str.14.221:
	.asciz	"clReleaseDevice"
	.size	.L.str.14.221, 16

	.type	.L.str.15.222,@object           # @.str.15.222
.L.str.15.222:
	.asciz	"clCreateContext"
	.size	.L.str.15.222, 16

	.type	.L.str.16.223,@object           # @.str.16.223
.L.str.16.223:
	.asciz	"clCreateContextFromType"
	.size	.L.str.16.223, 24

	.type	.L.str.17.224,@object           # @.str.17.224
.L.str.17.224:
	.asciz	"clRetainContext"
	.size	.L.str.17.224, 16

	.type	.L.str.18.225,@object           # @.str.18.225
.L.str.18.225:
	.asciz	"clReleaseContext"
	.size	.L.str.18.225, 17

	.type	.L.str.19.226,@object           # @.str.19.226
.L.str.19.226:
	.asciz	"clGetContextInfo"
	.size	.L.str.19.226, 17

	.type	.L.str.20.227,@object           # @.str.20.227
.L.str.20.227:
	.asciz	"clCreateCommandQueue"
	.size	.L.str.20.227, 21

	.type	.L.str.21.228,@object           # @.str.21.228
.L.str.21.228:
	.asciz	"clRetainCommandQueue"
	.size	.L.str.21.228, 21

	.type	.L.str.22.229,@object           # @.str.22.229
.L.str.22.229:
	.asciz	"clReleaseCommandQueue"
	.size	.L.str.22.229, 22

	.type	.L.str.23.230,@object           # @.str.23.230
.L.str.23.230:
	.asciz	"clGetCommandQueueInfo"
	.size	.L.str.23.230, 22

	.type	.L.str.24.231,@object           # @.str.24.231
.L.str.24.231:
	.asciz	"clCreateBuffer"
	.size	.L.str.24.231, 15

	.type	.L.str.25.232,@object           # @.str.25.232
.L.str.25.232:
	.asciz	"clCreateSubBuffer"
	.size	.L.str.25.232, 18

	.type	.L.str.26.233,@object           # @.str.26.233
.L.str.26.233:
	.asciz	"clCreateImage"
	.size	.L.str.26.233, 14

	.type	.L.str.27.234,@object           # @.str.27.234
.L.str.27.234:
	.asciz	"clRetainMemObject"
	.size	.L.str.27.234, 18

	.type	.L.str.28.235,@object           # @.str.28.235
.L.str.28.235:
	.asciz	"clReleaseMemObject"
	.size	.L.str.28.235, 19

	.type	.L.str.29.236,@object           # @.str.29.236
.L.str.29.236:
	.asciz	"clGetSupportedImageFormats"
	.size	.L.str.29.236, 27

	.type	.L.str.30.237,@object           # @.str.30.237
.L.str.30.237:
	.asciz	"clGetMemObjectInfo"
	.size	.L.str.30.237, 19

	.type	.L.str.31.238,@object           # @.str.31.238
.L.str.31.238:
	.asciz	"clGetImageInfo"
	.size	.L.str.31.238, 15

	.type	.L.str.32.239,@object           # @.str.32.239
.L.str.32.239:
	.asciz	"clSetMemObjectDestructorCallback"
	.size	.L.str.32.239, 33

	.type	.L.str.33.240,@object           # @.str.33.240
.L.str.33.240:
	.asciz	"clCreateProgramWithSource"
	.size	.L.str.33.240, 26

	.type	.L.str.34.241,@object           # @.str.34.241
.L.str.34.241:
	.asciz	"clRetainProgram"
	.size	.L.str.34.241, 16

	.type	.L.str.35.242,@object           # @.str.35.242
.L.str.35.242:
	.asciz	"clReleaseProgram"
	.size	.L.str.35.242, 17

	.type	.L.str.36.243,@object           # @.str.36.243
.L.str.36.243:
	.asciz	"clBuildProgram"
	.size	.L.str.36.243, 15

	.type	.L.str.37.244,@object           # @.str.37.244
.L.str.37.244:
	.asciz	"clGetProgramBuildInfo"
	.size	.L.str.37.244, 22

	.type	.L.str.38.245,@object           # @.str.38.245
.L.str.38.245:
	.asciz	"clCreateKernel"
	.size	.L.str.38.245, 15

	.type	.L.str.39.246,@object           # @.str.39.246
.L.str.39.246:
	.asciz	"clRetainKernel"
	.size	.L.str.39.246, 15

	.type	.L.str.40.247,@object           # @.str.40.247
.L.str.40.247:
	.asciz	"clReleaseKernel"
	.size	.L.str.40.247, 16

	.type	.L.str.41.248,@object           # @.str.41.248
.L.str.41.248:
	.asciz	"clSetKernelArg"
	.size	.L.str.41.248, 15

	.type	.L.str.42.249,@object           # @.str.42.249
.L.str.42.249:
	.asciz	"clFlush"
	.size	.L.str.42.249, 8

	.type	.L.str.43.250,@object           # @.str.43.250
.L.str.43.250:
	.asciz	"clFinish"
	.size	.L.str.43.250, 9

	.type	.L.str.44.251,@object           # @.str.44.251
.L.str.44.251:
	.asciz	"clEnqueueReadBuffer"
	.size	.L.str.44.251, 20

	.type	.L.str.45.252,@object           # @.str.45.252
.L.str.45.252:
	.asciz	"clEnqueueReadBufferRect"
	.size	.L.str.45.252, 24

	.type	.L.str.46.253,@object           # @.str.46.253
.L.str.46.253:
	.asciz	"clEnqueueWriteBuffer"
	.size	.L.str.46.253, 21

	.type	.L.str.47.254,@object           # @.str.47.254
.L.str.47.254:
	.asciz	"clEnqueueWriteBufferRect"
	.size	.L.str.47.254, 25

	.type	.L.str.48.255,@object           # @.str.48.255
.L.str.48.255:
	.asciz	"clEnqueueCopyBuffer"
	.size	.L.str.48.255, 20

	.type	.L.str.49.256,@object           # @.str.49.256
.L.str.49.256:
	.asciz	"clEnqueueReadImage"
	.size	.L.str.49.256, 19

	.type	.L.str.50.257,@object           # @.str.50.257
.L.str.50.257:
	.asciz	"clEnqueueWriteImage"
	.size	.L.str.50.257, 20

	.type	.L.str.51.258,@object           # @.str.51.258
.L.str.51.258:
	.asciz	"clEnqueueMapBuffer"
	.size	.L.str.51.258, 19

	.type	.L.str.52.259,@object           # @.str.52.259
.L.str.52.259:
	.asciz	"clEnqueueMapImage"
	.size	.L.str.52.259, 18

	.type	.L.str.53.260,@object           # @.str.53.260
.L.str.53.260:
	.asciz	"clEnqueueUnmapMemObject"
	.size	.L.str.53.260, 24

	.type	.L.str.54.261,@object           # @.str.54.261
.L.str.54.261:
	.asciz	"clEnqueueNDRangeKernel"
	.size	.L.str.54.261, 23

	.type	_ZN6Halide7Runtime8Internal6OpenCL7contextE,@object # @_ZN6Halide7Runtime8Internal6OpenCL7contextE
	.bss
	.weak	_ZN6Halide7Runtime8Internal6OpenCL7contextE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL7contextE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL7contextE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL13command_queueE,@object # @_ZN6Halide7Runtime8Internal6OpenCL13command_queueE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL13command_queueE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL13command_queueE:
	.quad	0
	.size	_ZN6Halide7Runtime8Internal6OpenCL13command_queueE, 8

	.type	_ZN6Halide7Runtime8Internal6OpenCL11thread_lockE,@object # @_ZN6Halide7Runtime8Internal6OpenCL11thread_lockE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL11thread_lockE
_ZN6Halide7Runtime8Internal6OpenCL11thread_lockE:
	.byte	0                               # 0x0
	.size	_ZN6Halide7Runtime8Internal6OpenCL11thread_lockE, 1

	.type	_ZN6Halide7Runtime8Internal6OpenCL13platform_nameE,@object # @_ZN6Halide7Runtime8Internal6OpenCL13platform_nameE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL13platform_nameE
_ZN6Halide7Runtime8Internal6OpenCL13platform_nameE:
	.zero	256
	.size	_ZN6Halide7Runtime8Internal6OpenCL13platform_nameE, 256

	.type	_ZN6Halide7Runtime8Internal6OpenCL18platform_name_lockE,@object # @_ZN6Halide7Runtime8Internal6OpenCL18platform_name_lockE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL18platform_name_lockE
_ZN6Halide7Runtime8Internal6OpenCL18platform_name_lockE:
	.byte	0                               # 0x0
	.size	_ZN6Halide7Runtime8Internal6OpenCL18platform_name_lockE, 1

	.type	_ZN6Halide7Runtime8Internal6OpenCL25platform_name_initializedE,@object # @_ZN6Halide7Runtime8Internal6OpenCL25platform_name_initializedE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL25platform_name_initializedE
_ZN6Halide7Runtime8Internal6OpenCL25platform_name_initializedE:
	.byte	0                               # 0x0
	.size	_ZN6Halide7Runtime8Internal6OpenCL25platform_name_initializedE, 1

	.type	_ZN6Halide7Runtime8Internal6OpenCL11device_typeE,@object # @_ZN6Halide7Runtime8Internal6OpenCL11device_typeE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL11device_typeE
_ZN6Halide7Runtime8Internal6OpenCL11device_typeE:
	.zero	256
	.size	_ZN6Halide7Runtime8Internal6OpenCL11device_typeE, 256

	.type	_ZN6Halide7Runtime8Internal6OpenCL16device_type_lockE,@object # @_ZN6Halide7Runtime8Internal6OpenCL16device_type_lockE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL16device_type_lockE
_ZN6Halide7Runtime8Internal6OpenCL16device_type_lockE:
	.byte	0                               # 0x0
	.size	_ZN6Halide7Runtime8Internal6OpenCL16device_type_lockE, 1

	.type	_ZN6Halide7Runtime8Internal6OpenCL23device_type_initializedE,@object # @_ZN6Halide7Runtime8Internal6OpenCL23device_type_initializedE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL23device_type_initializedE
_ZN6Halide7Runtime8Internal6OpenCL23device_type_initializedE:
	.byte	0                               # 0x0
	.size	_ZN6Halide7Runtime8Internal6OpenCL23device_type_initializedE, 1

	.type	_ZN6Halide7Runtime8Internal6OpenCL13build_optionsE,@object # @_ZN6Halide7Runtime8Internal6OpenCL13build_optionsE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL13build_optionsE
_ZN6Halide7Runtime8Internal6OpenCL13build_optionsE:
	.zero	1024
	.size	_ZN6Halide7Runtime8Internal6OpenCL13build_optionsE, 1024

	.type	_ZN6Halide7Runtime8Internal6OpenCL18build_options_lockE,@object # @_ZN6Halide7Runtime8Internal6OpenCL18build_options_lockE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL18build_options_lockE
_ZN6Halide7Runtime8Internal6OpenCL18build_options_lockE:
	.byte	0                               # 0x0
	.size	_ZN6Halide7Runtime8Internal6OpenCL18build_options_lockE, 1

	.type	_ZN6Halide7Runtime8Internal6OpenCL25build_options_initializedE,@object # @_ZN6Halide7Runtime8Internal6OpenCL25build_options_initializedE
	.weak	_ZN6Halide7Runtime8Internal6OpenCL25build_options_initializedE
_ZN6Halide7Runtime8Internal6OpenCL25build_options_initializedE:
	.byte	0                               # 0x0
	.size	_ZN6Halide7Runtime8Internal6OpenCL25build_options_initializedE, 1

	.type	.L.str.55.203,@object           # @.str.55.203
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.55.203:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:215 halide_abort_if_false() failed: ctx != nullptr\n"
	.size	.L.str.55.203, 91

	.type	.L.str.56.204,@object           # @.str.56.204
.L.str.56.204:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:216 halide_abort_if_false() failed: q != nullptr\n"
	.size	.L.str.56.204, 89

	.type	_ZN6Halide7Runtime8Internal6OpenCL17compilation_cacheE,@object # @_ZN6Halide7Runtime8Internal6OpenCL17compilation_cacheE
	.bss
	.weak	_ZN6Halide7Runtime8Internal6OpenCL17compilation_cacheE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL17compilation_cacheE:
	.zero	32
	.size	_ZN6Halide7Runtime8Internal6OpenCL17compilation_cacheE, 32

	.type	_ZGVN6Halide7Runtime8Internal6OpenCL17compilation_cacheE,@object # @_ZGVN6Halide7Runtime8Internal6OpenCL17compilation_cacheE
	.section	.bss._ZGVN6Halide7Runtime8Internal6OpenCL17compilation_cacheE,"aGw",@nobits,_ZGVN6Halide7Runtime8Internal6OpenCL17compilation_cacheE,comdat
	.weak	_ZGVN6Halide7Runtime8Internal6OpenCL17compilation_cacheE
	.p2align	3
_ZGVN6Halide7Runtime8Internal6OpenCL17compilation_cacheE:
	.quad	0                               # 0x0
	.size	_ZGVN6Halide7Runtime8Internal6OpenCL17compilation_cacheE, 8

	.type	.L.str.60.264,@object           # @.str.60.264
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.60.264:
	.asciz	"CL: Bad device pointer "
	.size	.L.str.60.264, 24

	.type	.L.str.61.200,@object           # @.str.61.200
.L.str.61.200:
	.asciz	": clGetMemObjectInfo returned "
	.size	.L.str.61.200, 31

	.type	.L.str.66.265,@object           # @.str.66.265
.L.str.66.265:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:328 halide_abort_if_false() failed: real_size >= (size + offset) && \"Validating pointer with insufficient size\"\n"
	.size	.L.str.66.265, 152

	.type	.L.str.68.205,@object           # @.str.68.205
.L.str.68.205:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:339 halide_abort_if_false() failed: ctx != nullptr && *ctx == nullptr\n"
	.size	.L.str.68.205, 110

	.type	.L.str.69.206,@object           # @.str.69.206
.L.str.69.206:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:340 halide_abort_if_false() failed: q != nullptr && *q == nullptr\n"
	.size	.L.str.69.206, 106

	.type	.L.str.70.207,@object           # @.str.70.207
.L.str.70.207:
	.asciz	"CL: clGetPlatformIDs not found\n"
	.size	.L.str.70.207, 32

	.type	.L.str.71.208,@object           # @.str.71.208
.L.str.71.208:
	.asciz	"CL: clGetPlatformIDs failed: "
	.size	.L.str.71.208, 30

	.type	.L.str.72.209,@object           # @.str.72.209
.L.str.72.209:
	.asciz	" "
	.size	.L.str.72.209, 2

	.type	.L.str.74.210,@object           # @.str.74.210
.L.str.74.210:
	.asciz	"CL: Failed to find platform\n"
	.size	.L.str.74.210, 29

	.type	.L.str.75.211,@object           # @.str.75.211
.L.str.75.211:
	.asciz	"cpu"
	.size	.L.str.75.211, 4

	.type	.L.str.76.212,@object           # @.str.76.212
.L.str.76.212:
	.asciz	"gpu"
	.size	.L.str.76.212, 4

	.type	.L.str.77,@object               # @.str.77
.L.str.77:
	.asciz	"acc"
	.size	.L.str.77, 4

	.type	.L.str.78,@object               # @.str.78
.L.str.78:
	.asciz	"CL: clGetDeviceIDs failed: "
	.size	.L.str.78, 28

	.type	.L.str.85,@object               # @.str.85
.L.str.85:
	.asciz	"CL: Failed to get device: "
	.size	.L.str.85, 27

	.type	.L.str.87,@object               # @.str.87
.L.str.87:
	.asciz	"CL: clCreateContext failed: "
	.size	.L.str.87, 29

	.type	.L.str.88,@object               # @.str.88
.L.str.88:
	.asciz	":"
	.size	.L.str.88, 2

	.type	.L.str.90,@object               # @.str.90
.L.str.90:
	.asciz	"CL: clCreateCommandQueue failed: "
	.size	.L.str.90, 34

	.type	.L.str.91,@object               # @.str.91
.L.str.91:
	.asciz	"CL: clGetContextInfo(CL_CONTEXT_DEVICES) failed: "
	.size	.L.str.91, 50

	.type	.L.str.92,@object               # @.str.92
.L.str.92:
	.asciz	"CL: clGetDeviceInfo (CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE) failed: "
	.size	.L.str.92, 66

	.type	.L.str.93,@object               # @.str.93
.L.str.93:
	.asciz	"CL: clGetDeviceInfo (CL_DEVICE_MAX_CONSTANT_ARGS) failed: "
	.size	.L.str.93, 59

	.type	.L.str.94,@object               # @.str.94
.L.str.94:
	.asciz	"-D MAX_CONSTANT_BUFFER_SIZE="
	.size	.L.str.94, 29

	.type	.L.str.95,@object               # @.str.95
.L.str.95:
	.asciz	" -D MAX_CONSTANT_ARGS="
	.size	.L.str.95, 23

	.type	.L.str.97,@object               # @.str.97
.L.str.97:
	.asciz	"CL: clCreateProgramWithSource failed: "
	.size	.L.str.97, 39

	.type	.L.str.99,@object               # @.str.99
.L.str.99:
	.asciz	"(Unable to get build log)"
	.size	.L.str.99, 26

	.type	.L.str.100,@object              # @.str.100
.L.str.100:
	.asciz	"CL: clBuildProgram failed: "
	.size	.L.str.100, 28

	.type	.L.str.101,@object              # @.str.101
.L.str.101:
	.asciz	"\nBuild Log:\n"
	.size	.L.str.101, 13

	.type	.L.str.102,@object              # @.str.102
.L.str.102:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:664 halide_abort_if_false() failed: (((device_handle *)buf->device)->offset == 0) && \"halide_opencl_device_free on buffer obtained from halide_device_crop\"\n"
	.size	.L.str.102, 196

	.type	.L.str.106,@object              # @.str.106
.L.str.106:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:679 halide_abort_if_false() failed: validate_device_pointer(user_context, buf)\n"
	.size	.L.str.106, 119

	.type	.L.str.108,@object              # @.str.108
.L.str.108:
	.asciz	"CL: clGetContextInfo failed: "
	.size	.L.str.108, 30

	.type	.L.str.109,@object              # @.str.109
.L.str.109:
	.asciz	"CL: clGetDeviceInfo failed: "
	.size	.L.str.109, 29

	.type	.L.str.115,@object              # @.str.115
.L.str.115:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:773 halide_abort_if_false() failed: program != nullptr\n"
	.size	.L.str.115, 95

	.type	.L.str.118,@object              # @.str.118
.L.str.118:
	.asciz	"CL: clFinish failed: "
	.size	.L.str.118, 22

	.type	.L.str.120,@object              # @.str.120
.L.str.120:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:836 halide_abort_if_false() failed: err == CL_SUCCESS\n"
	.size	.L.str.120, 94

	.type	.L.str.122,@object              # @.str.122
.L.str.122:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:844 halide_abort_if_false() failed: err == CL_SUCCESS\n"
	.size	.L.str.122, 94

	.type	.L.str.124,@object              # @.str.124
.L.str.124:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:849 halide_abort_if_false() failed: err == CL_SUCCESS\n"
	.size	.L.str.124, 94

	.type	.L.str.126,@object              # @.str.126
.L.str.126:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:870 halide_abort_if_false() failed: size != 0\n"
	.size	.L.str.126, 86

	.type	.L.str.127,@object              # @.str.127
.L.str.127:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:872 halide_abort_if_false() failed: validate_device_pointer(user_context, buf, size)\n"
	.size	.L.str.127, 125

	.type	.L.str.128,@object              # @.str.128
.L.str.128:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:877 halide_abort_if_false() failed: buf->dim[i].stride >= 0\n"
	.size	.L.str.128, 100

	.type	.L.str.131,@object              # @.str.131
.L.str.131:
	.asciz	"CL: clCreateBuffer failed: "
	.size	.L.str.131, 28

	.type	_ZN6Halide7Runtime8Internal6OpenCL23opencl_device_interfaceE,@object # @_ZN6Halide7Runtime8Internal6OpenCL23opencl_device_interfaceE
	.data
	.weak	_ZN6Halide7Runtime8Internal6OpenCL23opencl_device_interfaceE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL23opencl_device_interfaceE:
	.quad	halide_device_malloc
	.quad	halide_device_free
	.quad	halide_device_sync
	.quad	halide_device_release
	.quad	halide_copy_to_host
	.quad	halide_copy_to_device
	.quad	halide_device_and_host_malloc
	.quad	halide_device_and_host_free
	.quad	halide_buffer_copy
	.quad	halide_device_crop
	.quad	halide_device_slice
	.quad	halide_device_release_crop
	.quad	halide_device_wrap_native
	.quad	halide_device_detach_native
	.quad	halide_opencl_compute_capability
	.quad	_ZN6Halide7Runtime8Internal6OpenCL28opencl_device_interface_implE
	.size	_ZN6Halide7Runtime8Internal6OpenCL23opencl_device_interfaceE, 128

	.type	.L.str.135,@object              # @.str.135
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.135:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:914 halide_abort_if_false() failed: validate_device_pointer(user_context, buf, size)\n"
	.size	.L.str.135, 125

	.type	.L.str.136,@object              # @.str.136
.L.str.136:
	.asciz	"Buffer has too many dimensions to copy to/from GPU\n"
	.size	.L.str.136, 52

	.type	.L.str.145,@object              # @.str.145
.L.str.145:
	.asciz	"CL: buffer copy failed: "
	.size	.L.str.145, 25

	.type	.L.str.146,@object              # @.str.146
.L.str.146:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:985 halide_abort_if_false() failed: dst_device_interface == nullptr || dst_device_interface == &opencl_device_interface\n"
	.size	.L.str.146, 160

	.type	.L.str.147,@object              # @.str.147
.L.str.147:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:989 halide_abort_if_false() failed: dst_device_interface == &opencl_device_interface\n"
	.size	.L.str.147, 125

	.type	.L.str.149,@object              # @.str.149
.L.str.149:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:1000 halide_abort_if_false() failed: to_host || dst->device\n"
	.size	.L.str.149, 100

	.type	.L.str.159,@object              # @.str.159
.L.str.159:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:1076 halide_abort_if_false() failed: state_ptr\n"
	.size	.L.str.159, 87

	.type	.L.str.160,@object              # @.str.160
.L.str.160:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:1080 halide_abort_if_false() failed: found && program != nullptr\n"
	.size	.L.str.160, 105

	.type	.L.str.162,@object              # @.str.162
.L.str.162:
	.asciz	"CL: clCreateKernel "
	.size	.L.str.162, 20

	.type	.L.str.163,@object              # @.str.163
.L.str.163:
	.asciz	" failed: "
	.size	.L.str.163, 10

	.type	.L.str.167,@object              # @.str.167
.L.str.167:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:1132 halide_abort_if_false() failed: arg_sizes[i] == sizeof(uint64_t)\n"
	.size	.L.str.167, 110

	.type	.L.str.169,@object              # @.str.169
.L.str.169:
	.asciz	"CL: clSetKernelArg failed: "
	.size	.L.str.169, 28

	.type	.L.str.171,@object              # @.str.171
.L.str.171:
	.asciz	"CL: clSetKernelArg failed "
	.size	.L.str.171, 27

	.type	.L.str.173,@object              # @.str.173
.L.str.173:
	.asciz	"CL: clEnqueueNDRangeKernel failed: "
	.size	.L.str.173, 36

	.type	.L.str.176,@object              # @.str.176
.L.str.176:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:1223 halide_abort_if_false() failed: buf->device == 0\n"
	.size	.L.str.176, 94

	.type	_ZN6Halide7Runtime8Internal6OpenCL29opencl_image_device_interfaceE,@object # @_ZN6Halide7Runtime8Internal6OpenCL29opencl_image_device_interfaceE
	.data
	.weak	_ZN6Halide7Runtime8Internal6OpenCL29opencl_image_device_interfaceE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL29opencl_image_device_interfaceE:
	.quad	halide_device_malloc
	.quad	halide_device_free
	.quad	halide_device_sync
	.quad	halide_device_release
	.quad	halide_copy_to_host
	.quad	halide_copy_to_device
	.quad	halide_device_and_host_malloc
	.quad	halide_device_and_host_free
	.quad	halide_buffer_copy
	.quad	halide_device_crop
	.quad	halide_device_slice
	.quad	halide_device_release_crop
	.quad	halide_device_wrap_native
	.quad	halide_device_detach_native
	.quad	halide_opencl_compute_capability
	.quad	_ZN6Halide7Runtime8Internal6OpenCL34opencl_image_device_interface_implE
	.size	_ZN6Halide7Runtime8Internal6OpenCL29opencl_image_device_interfaceE, 128

	.type	.L.str.177,@object              # @.str.177
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.177:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:1253 halide_abort_if_false() failed: buf->device_interface == &opencl_device_interface || buf->device_interface == &opencl_image_device_interface\n"
	.size	.L.str.177, 186

	.type	.L.str.178,@object              # @.str.178
.L.str.178:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:1266 halide_abort_if_false() failed: buf->device_interface == &opencl_device_interface || buf->device_interface == &opencl_image_device_interface\n"
	.size	.L.str.178, 186

	.type	.L.str.179,@object              # @.str.179
.L.str.179:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:1274 halide_abort_if_false() failed: buf->device_interface == &opencl_device_interface\n"
	.size	.L.str.179, 127

	.type	.L.str.180,@object              # @.str.180
.L.str.180:
	.asciz	"CL: malloc failed making device handle for crop.\n"
	.size	.L.str.180, 50

	.type	.L.str.182,@object              # @.str.182
.L.str.182:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:1343 halide_abort_if_false() failed: validate_device_pointer(user_context, buf)\n"
	.size	.L.str.182, 120

	.type	.L.str.183,@object              # @.str.183
.L.str.183:
	.asciz	"CL_SUCCESS"
	.size	.L.str.183, 11

	.type	.L.str.184,@object              # @.str.184
.L.str.184:
	.asciz	"CL_DEVICE_NOT_FOUND"
	.size	.L.str.184, 20

	.type	.L.str.185,@object              # @.str.185
.L.str.185:
	.asciz	"CL_DEVICE_NOT_AVAILABLE"
	.size	.L.str.185, 24

	.type	.L.str.186.202,@object          # @.str.186.202
.L.str.186.202:
	.asciz	"CL_COMPILER_NOT_AVAILABLE"
	.size	.L.str.186.202, 26

	.type	.L.str.187,@object              # @.str.187
.L.str.187:
	.asciz	"CL_MEM_OBJECT_ALLOCATION_FAILURE"
	.size	.L.str.187, 33

	.type	.L.str.188,@object              # @.str.188
.L.str.188:
	.asciz	"CL_OUT_OF_RESOURCES"
	.size	.L.str.188, 20

	.type	.L.str.189,@object              # @.str.189
.L.str.189:
	.asciz	"CL_OUT_OF_HOST_MEMORY"
	.size	.L.str.189, 22

	.type	.L.str.190,@object              # @.str.190
.L.str.190:
	.asciz	"CL_PROFILING_INFO_NOT_AVAILABLE"
	.size	.L.str.190, 32

	.type	.L.str.191,@object              # @.str.191
.L.str.191:
	.asciz	"CL_MEM_COPY_OVERLAP"
	.size	.L.str.191, 20

	.type	.L.str.192,@object              # @.str.192
.L.str.192:
	.asciz	"CL_IMAGE_FORMAT_MISMATCH"
	.size	.L.str.192, 25

	.type	.L.str.193,@object              # @.str.193
.L.str.193:
	.asciz	"CL_IMAGE_FORMAT_NOT_SUPPORTED"
	.size	.L.str.193, 30

	.type	.L.str.194,@object              # @.str.194
.L.str.194:
	.asciz	"CL_BUILD_PROGRAM_FAILURE"
	.size	.L.str.194, 25

	.type	.L.str.195,@object              # @.str.195
.L.str.195:
	.asciz	"CL_MAP_FAILURE"
	.size	.L.str.195, 15

	.type	.L.str.196,@object              # @.str.196
.L.str.196:
	.asciz	"CL_MISALIGNED_SUB_BUFFER_OFFSET"
	.size	.L.str.196, 32

	.type	.L.str.197.201,@object          # @.str.197.201
.L.str.197.201:
	.asciz	"CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST"
	.size	.L.str.197.201, 45

	.type	.L.str.198,@object              # @.str.198
.L.str.198:
	.asciz	"CL_COMPILE_PROGRAM_FAILURE"
	.size	.L.str.198, 27

	.type	.L.str.199,@object              # @.str.199
.L.str.199:
	.asciz	"CL_LINKER_NOT_AVAILABLE"
	.size	.L.str.199, 24

	.type	.L.str.200,@object              # @.str.200
.L.str.200:
	.asciz	"CL_LINK_PROGRAM_FAILURE"
	.size	.L.str.200, 24

	.type	.L.str.201,@object              # @.str.201
.L.str.201:
	.asciz	"CL_DEVICE_PARTITION_FAILED"
	.size	.L.str.201, 27

	.type	.L.str.202,@object              # @.str.202
.L.str.202:
	.asciz	"CL_KERNEL_ARG_INFO_NOT_AVAILABLE"
	.size	.L.str.202, 33

	.type	.L.str.203,@object              # @.str.203
.L.str.203:
	.asciz	"CL_INVALID_VALUE"
	.size	.L.str.203, 17

	.type	.L.str.204,@object              # @.str.204
.L.str.204:
	.asciz	"CL_INVALID_DEVICE_TYPE"
	.size	.L.str.204, 23

	.type	.L.str.205,@object              # @.str.205
.L.str.205:
	.asciz	"CL_INVALID_PLATFORM"
	.size	.L.str.205, 20

	.type	.L.str.206,@object              # @.str.206
.L.str.206:
	.asciz	"CL_INVALID_DEVICE"
	.size	.L.str.206, 18

	.type	.L.str.207,@object              # @.str.207
.L.str.207:
	.asciz	"CL_INVALID_CONTEXT"
	.size	.L.str.207, 19

	.type	.L.str.208,@object              # @.str.208
.L.str.208:
	.asciz	"CL_INVALID_QUEUE_PROPERTIES"
	.size	.L.str.208, 28

	.type	.L.str.209,@object              # @.str.209
.L.str.209:
	.asciz	"CL_INVALID_COMMAND_QUEUE"
	.size	.L.str.209, 25

	.type	.L.str.210,@object              # @.str.210
.L.str.210:
	.asciz	"CL_INVALID_HOST_PTR"
	.size	.L.str.210, 20

	.type	.L.str.211,@object              # @.str.211
.L.str.211:
	.asciz	"CL_INVALID_MEM_OBJECT"
	.size	.L.str.211, 22

	.type	.L.str.212,@object              # @.str.212
.L.str.212:
	.asciz	"CL_INVALID_IMAGE_FORMAT_DESCRIPTOR"
	.size	.L.str.212, 35

	.type	.L.str.213,@object              # @.str.213
.L.str.213:
	.asciz	"CL_INVALID_IMAGE_SIZE"
	.size	.L.str.213, 22

	.type	.L.str.214,@object              # @.str.214
.L.str.214:
	.asciz	"CL_INVALID_SAMPLER"
	.size	.L.str.214, 19

	.type	.L.str.215,@object              # @.str.215
.L.str.215:
	.asciz	"CL_INVALID_BINARY"
	.size	.L.str.215, 18

	.type	.L.str.216,@object              # @.str.216
.L.str.216:
	.asciz	"CL_INVALID_BUILD_OPTIONS"
	.size	.L.str.216, 25

	.type	.L.str.217,@object              # @.str.217
.L.str.217:
	.asciz	"CL_INVALID_PROGRAM"
	.size	.L.str.217, 19

	.type	.L.str.218,@object              # @.str.218
.L.str.218:
	.asciz	"CL_INVALID_PROGRAM_EXECUTABLE"
	.size	.L.str.218, 30

	.type	.L.str.219,@object              # @.str.219
.L.str.219:
	.asciz	"CL_INVALID_KERNEL_NAME"
	.size	.L.str.219, 23

	.type	.L.str.220,@object              # @.str.220
.L.str.220:
	.asciz	"CL_INVALID_KERNEL_DEFINITION"
	.size	.L.str.220, 29

	.type	.L.str.221,@object              # @.str.221
.L.str.221:
	.asciz	"CL_INVALID_KERNEL"
	.size	.L.str.221, 18

	.type	.L.str.222,@object              # @.str.222
.L.str.222:
	.asciz	"CL_INVALID_ARG_INDEX"
	.size	.L.str.222, 21

	.type	.L.str.223,@object              # @.str.223
.L.str.223:
	.asciz	"CL_INVALID_ARG_VALUE"
	.size	.L.str.223, 21

	.type	.L.str.224,@object              # @.str.224
.L.str.224:
	.asciz	"CL_INVALID_ARG_SIZE"
	.size	.L.str.224, 20

	.type	.L.str.225,@object              # @.str.225
.L.str.225:
	.asciz	"CL_INVALID_KERNEL_ARGS"
	.size	.L.str.225, 23

	.type	.L.str.226,@object              # @.str.226
.L.str.226:
	.asciz	"CL_INVALID_WORK_DIMENSION"
	.size	.L.str.226, 26

	.type	.L.str.227,@object              # @.str.227
.L.str.227:
	.asciz	"CL_INVALID_WORK_GROUP_SIZE"
	.size	.L.str.227, 27

	.type	.L.str.228,@object              # @.str.228
.L.str.228:
	.asciz	"CL_INVALID_WORK_ITEM_SIZE"
	.size	.L.str.228, 26

	.type	.L.str.229,@object              # @.str.229
.L.str.229:
	.asciz	"CL_INVALID_GLOBAL_OFFSET"
	.size	.L.str.229, 25

	.type	.L.str.230,@object              # @.str.230
.L.str.230:
	.asciz	"CL_INVALID_EVENT_WAIT_LIST"
	.size	.L.str.230, 27

	.type	.L.str.231,@object              # @.str.231
.L.str.231:
	.asciz	"CL_INVALID_EVENT"
	.size	.L.str.231, 17

	.type	.L.str.232,@object              # @.str.232
.L.str.232:
	.asciz	"CL_INVALID_OPERATION"
	.size	.L.str.232, 21

	.type	.L.str.233,@object              # @.str.233
.L.str.233:
	.asciz	"CL_INVALID_GL_OBJECT"
	.size	.L.str.233, 21

	.type	.L.str.234,@object              # @.str.234
.L.str.234:
	.asciz	"CL_INVALID_BUFFER_SIZE"
	.size	.L.str.234, 23

	.type	.L.str.235,@object              # @.str.235
.L.str.235:
	.asciz	"CL_INVALID_MIP_LEVEL"
	.size	.L.str.235, 21

	.type	.L.str.236,@object              # @.str.236
.L.str.236:
	.asciz	"CL_INVALID_GLOBAL_WORK_SIZE"
	.size	.L.str.236, 28

	.type	.L.str.237,@object              # @.str.237
.L.str.237:
	.asciz	"CL_INVALID_PROPERTY"
	.size	.L.str.237, 20

	.type	.L.str.238,@object              # @.str.238
.L.str.238:
	.asciz	"CL_INVALID_IMAGE_DESCRIPTOR"
	.size	.L.str.238, 28

	.type	.L.str.239,@object              # @.str.239
.L.str.239:
	.asciz	"CL_INVALID_COMPILER_OPTIONS"
	.size	.L.str.239, 28

	.type	.L.str.240,@object              # @.str.240
.L.str.240:
	.asciz	"CL_INVALID_LINKER_OPTIONS"
	.size	.L.str.240, 26

	.type	.L.str.241,@object              # @.str.241
.L.str.241:
	.asciz	"CL_INVALID_DEVICE_PARTITION_COUNT"
	.size	.L.str.241, 34

	.type	.L.str.242,@object              # @.str.242
.L.str.242:
	.asciz	"<Unknown error>"
	.size	.L.str.242, 16

	.type	_ZN6Halide7Runtime8Internal6OpenCL28opencl_device_interface_implE,@object # @_ZN6Halide7Runtime8Internal6OpenCL28opencl_device_interface_implE
	.data
	.weak	_ZN6Halide7Runtime8Internal6OpenCL28opencl_device_interface_implE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL28opencl_device_interface_implE:
	.quad	halide_use_jit_module
	.quad	halide_release_jit_module
	.quad	halide_opencl_device_malloc
	.quad	halide_opencl_device_free
	.quad	halide_opencl_device_sync
	.quad	halide_opencl_device_release
	.quad	halide_opencl_copy_to_host
	.quad	halide_opencl_copy_to_device
	.quad	halide_opencl_device_and_host_malloc
	.quad	halide_opencl_device_and_host_free
	.quad	halide_opencl_buffer_copy
	.quad	halide_opencl_device_crop
	.quad	halide_opencl_device_slice
	.quad	halide_opencl_device_release_crop
	.quad	halide_opencl_wrap_cl_mem
	.quad	halide_opencl_detach_cl_mem
	.size	_ZN6Halide7Runtime8Internal6OpenCL28opencl_device_interface_implE, 128

	.type	.L.str.244,@object              # @.str.244
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.244:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:1559 halide_abort_if_false() failed: size != 0\n"
	.size	.L.str.244, 87

	.type	.L.str.245,@object              # @.str.245
.L.str.245:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:1561 halide_abort_if_false() failed: validate_device_pointer(user_context, buf, size)\n"
	.size	.L.str.245, 126

	.type	.L.str.246,@object              # @.str.246
.L.str.246:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:1566 halide_abort_if_false() failed: buf->dim[i].stride >= 0\n"
	.size	.L.str.246, 101

	.type	.L.str.247,@object              # @.str.247
.L.str.247:
	.asciz	"Unhandled datatype for opencl texture object: "
	.size	.L.str.247, 47

	.type	.L.str.249,@object              # @.str.249
.L.str.249:
	.asciz	"image buffer must be dense on inner dimension"
	.size	.L.str.249, 46

	.type	.L.str.250,@object              # @.str.250
.L.str.250:
	.asciz	"image buffer must have 1-3 dimensions"
	.size	.L.str.250, 38

	.type	.L.str.253,@object              # @.str.253
.L.str.253:
	.asciz	"CL: clCreateImage failed: "
	.size	.L.str.253, 27

	.type	.L.str.254,@object              # @.str.254
.L.str.254:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:1678 halide_abort_if_false() failed: validate_device_pointer(user_context, buf, size)\n"
	.size	.L.str.254, 126

	.type	.L.str.256,@object              # @.str.256
.L.str.256:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:1697 halide_abort_if_false() failed: dst_device_interface == nullptr || dst_device_interface == &opencl_image_device_interface\n"
	.size	.L.str.256, 167

	.type	.L.str.257,@object              # @.str.257
.L.str.257:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:1701 halide_abort_if_false() failed: dst_device_interface == &opencl_image_device_interface\n"
	.size	.L.str.257, 132

	.type	.L.str.259,@object              # @.str.259
.L.str.259:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:1712 halide_abort_if_false() failed: to_host || dst->device\n"
	.size	.L.str.259, 100

	.type	.L.str.260,@object              # @.str.260
.L.str.260:
	.asciz	"image buffer copies must be for whole buffer"
	.size	.L.str.260, 45

	.type	.L.str.261,@object              # @.str.261
.L.str.261:
	.asciz	"image buffer copies must be dense on inner dimension"
	.size	.L.str.261, 53

	.type	.L.str.262,@object              # @.str.262
.L.str.262:
	.asciz	"image to image copies not implemented"
	.size	.L.str.262, 38

	.type	.L.str.263,@object              # @.str.263
.L.str.263:
	.asciz	"CL: buffer transfer failed: "
	.size	.L.str.263, 29

	.type	.L.str.264,@object              # @.str.264
.L.str.264:
	.asciz	"/workdir/Halide/src/runtime/opencl.cpp:1825 halide_abort_if_false() failed: buf->device == 0\n"
	.size	.L.str.264, 94

	.type	.L.str.265,@object              # @.str.265
.L.str.265:
	.asciz	"CL: Bad device pointer passed to halide_opencl_image_wrap_cl_mem: "
	.size	.L.str.265, 67

	.type	.L.str.266,@object              # @.str.266
.L.str.266:
	.asciz	" with type "
	.size	.L.str.266, 12

	.type	.L.str.267,@object              # @.str.267
.L.str.267:
	.asciz	"crop not supported on opencl image objects"
	.size	.L.str.267, 43

	.type	.L.str.268,@object              # @.str.268
.L.str.268:
	.asciz	"slice not supported on opencl image objects"
	.size	.L.str.268, 44

	.type	_ZN6Halide7Runtime8Internal6OpenCL34opencl_image_device_interface_implE,@object # @_ZN6Halide7Runtime8Internal6OpenCL34opencl_image_device_interface_implE
	.data
	.weak	_ZN6Halide7Runtime8Internal6OpenCL34opencl_image_device_interface_implE
	.p2align	3
_ZN6Halide7Runtime8Internal6OpenCL34opencl_image_device_interface_implE:
	.quad	halide_use_jit_module
	.quad	halide_release_jit_module
	.quad	halide_opencl_image_device_malloc
	.quad	halide_opencl_device_free
	.quad	halide_opencl_device_sync
	.quad	halide_opencl_device_release
	.quad	halide_opencl_image_copy_to_host
	.quad	halide_opencl_image_copy_to_device
	.quad	halide_opencl_image_device_and_host_malloc
	.quad	halide_opencl_image_device_and_host_free
	.quad	halide_opencl_image_buffer_copy
	.quad	halide_opencl_image_device_crop
	.quad	halide_opencl_image_device_slice
	.quad	halide_opencl_image_device_release_crop
	.quad	halide_opencl_image_wrap_cl_mem
	.quad	halide_opencl_detach_cl_mem
	.size	_ZN6Halide7Runtime8Internal6OpenCL34opencl_image_device_interface_implE, 128

	.type	.L.str.269,@object              # @.str.269
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.269:
	.asciz	"HL_OCL_PLATFORM_NAME"
	.size	.L.str.269, 21

	.type	.L.str.270,@object              # @.str.270
.L.str.270:
	.asciz	"HL_OCL_DEVICE_TYPE"
	.size	.L.str.270, 19

	.type	.L.str.271,@object              # @.str.271
.L.str.271:
	.asciz	"HL_OCL_BUILD_OPTIONS"
	.size	.L.str.271, 21

	.type	.L.str.272,@object              # @.str.272
.L.str.272:
	.asciz	"OpenCL: null context or cmd_queue"
	.size	.L.str.272, 34

	.type	.L.str.273,@object              # @.str.273
.L.str.273:
	.asciz	"OpenCL API not found: "
	.size	.L.str.273, 23

	.type	.L.str.274,@object              # @.str.274
.L.str.274:
	.asciz	"Printer buffer allocation failed.\n"
	.size	.L.str.274, 35

	.type	.Lopencl_buf.data,@object       # @opencl_buf.data
	.local	.Lopencl_buf.data
	.comm	.Lopencl_buf.data,8,32
	.type	.Lopencl_gpu_source_kernels.data,@object # @opencl_gpu_source_kernels.data
	.section	.rodata,"a",@progbits
	.p2align	5
.Lopencl_gpu_source_kernels.data:
	.asciz	"/*OpenCL C x86-64-linux-avx-avx2-f16c-fma-opencl-sse41*/\n#pragma OPENCL FP_CONTRACT ON\ninline float float_from_bits(unsigned int x) {return as_float(x);}\ninline float nan_f32() { return NAN; }\ninline float neg_inf_f32() { return -INFINITY; }\ninline float inf_f32() { return INFINITY; }\ninline bool is_nan_f32(float x) {return isnan(x); }\ninline bool is_inf_f32(float x) {return isinf(x); }\ninline bool is_finite_f32(float x) {return isfinite(x); }\n#define sqrt_f32 sqrt \n#define sin_f32 sin \n#define cos_f32 cos \n#define exp_f32 exp \n#define log_f32 log \n#define abs_f32 fabs \n#define floor_f32 floor \n#define ceil_f32 ceil \n#define round_f32 round \n#define trunc_f32 trunc \n#define pow_f32 pow\n#define asin_f32 asin \n#define acos_f32 acos \n#define tan_f32 tan \n#define atan_f32 atan \n#define atan2_f32 atan2\n#define sinh_f32 sinh \n#define asinh_f32 asinh \n#define cosh_f32 cosh \n#define acosh_f32 acosh \n#define tanh_f32 tanh \n#define atanh_f32 atanh \n#define fast_inverse_f32 native_recip \n#define fast_inverse_sqrt_f32 native_rsqrt \n#define halide_unused(x)\n\n__kernel void _at_least_one_kernel(int x) { }\n// Address spaces for _kernel_conv1_s0_y_yo___block_id_y\n#define __address_space__bias __global\n#define __address_space__conv1 __global\n__kernel void _kernel_conv1_s0_y_yo___block_id_y(\n __address_space__bias const float *restrict _bias,\n __address_space__conv1 float *restrict _conv1,\n const int _output_extent_0,\n const int _output_extent_1,\n const int _output_extent_2,\n const int _t153,\n const int _t154,\n const int _t155,\n __local int16* __shared)\n{\n int _conv1_s0_y_yo___block_id_y = get_group_id(1);\n int _conv1_s0_x_xo___block_id_x = get_group_id(0);\n int ___thread_id_y = get_local_id(1);\n int ___thread_id_x = get_local_id(0);\n int _1 = _conv1_s0_y_yo___block_id_y * 8;\n int _2 = _output_extent_2 + -6;\n int _3 = min(_1, _2);\n int _4 = _conv1_s0_x_xo___block_id_x * 16;\n int _5 = _output_extent_1 + -14;\n int _6 = min(_4, _5);\n int _7 = ___thread_id_x + _6;\n int _8 = _7 * _output_extent_0;\n int _9 = ___thread_id_y + _3;\n int _10 = _9 * _t153;\n int _11 = _10 + _t155;\n int _12 = _8 + _11;\n for (int _conv1_s0_c_rebased = 0; _conv1_s0_c_rebased < 0 + _output_extent_0; _conv1_s0_c_rebased++)\n {\n  float _13 = _bias[_t154];\n  int _14 = _conv1_s0_c_rebased + _12;\n  _conv1[_14] = _13;\n } // for _conv1_s0_c_rebased\n} // kernel _kernel_conv1_s0_y_yo___block_id_y\n#undef __address_space__bias\n#undef __address_space__conv1\n// Address spaces for _kernel_conv1_s1_y_yo___block_id_y\n#define __address_space__weight_1 __global\n#define __address_space__input __global\n#define __address_space__conv1 __global\n__kernel void _kernel_conv1_s1_y_yo___block_id_y(\n __address_space__weight_1 const float *restrict _weight_1,\n __address_space__input const float *restrict _input,\n __address_space__conv1 float *restrict _conv1,\n const int _t191,\n const int _t190,\n const int _t192,\n const int _t194,\n const int _t198,\n const int _t199,\n const int _t202,\n const int _t203,\n const int _t205,\n const int _t206,\n const int _t207,\n const int _t209,\n const int _t210,\n const int _t211,\n const int _t212,\n const int _t213,\n const int _weight_1_min_0,\n const int _weight_1_stride_1,\n const int _weight_1_stride_2,\n const int _t158,\n const int _input_min_1,\n const int _input_min_2,\n const int _input_min_3,\n const int _input_stride_1,\n const int _input_stride_2,\n const int _input_stride_3,\n const int _output_extent_0,\n const int _output_min_0,\n const int _output_min_1,\n const int _output_min_2,\n const int _input_min_0,\n const int _t160,\n const int _t162,\n const int _t165,\n const int _t167,\n const int _t174,\n const int _t178,\n const int _t182,\n const int _t183,\n const int _t184,\n const int _t185,\n __local int16* __shared)\n{\n int _conv1_s1_y_yo___block_id_y = get_group_id(1);\n int _conv1_s1_x_xo___block_id_x = get_group_id(0);\n int ___thread_id_y = get_local_id(1);\n int ___thread_id_x = get_local_id(0);\n bool _15 = _t199 <= _conv1_s1_y_yo___block_id_y;\n bool _16 = _conv1_s1_y_yo___block_id_y < _t158;\n bool _17 = _15 && _16;\n if (_17)\n {\n  bool _18 = _t198 <= _conv1_s1_x_xo___block_id_x;\n  bool _19 = _conv1_s1_x_xo___block_id_x < _t160;\n  bool _20 = _18 && _19;\n  if (_20)\n  {\n   int _21 = _conv1_s1_x_xo___block_id_x * 16;\n   int _22 = _conv1_s1_y_yo___block_id_y * 8;\n   int _23 = ___thread_id_x + _21;\n   int _24 = _23 * _output_extent_0;\n   int _25 = ___thread_id_y + _22;\n   int _26 = _25 * _t165;\n   int _27 = _26 + _t211;\n   int _28 = _24 + _27;\n   int _29 = _output_min_2 + _22;\n   int _30 = _29 + ___thread_id_y;\n   int _31 = _output_min_1 + _21;\n   int _32 = _31 + ___thread_id_x;\n   for (int _conv1_s1_c_rebased = 0; _conv1_s1_c_rebased < 0 + _t212; _conv1_s1_c_rebased++)\n   {\n    int _33 = _t182 + -1;\n    int _34 = _conv1_s1_c_rebased + _output_min_0;\n    int _35 = min(_33, _34);\n    int _36 = max(_35, _input_min_0);\n    int _37 = _36 - _t167;\n    int _38 = _conv1_s1_c_rebased + _28;\n    for (int _conv1_s1_r__z = 0; _conv1_s1_r__z < 0 + 3; _conv1_s1_r__z++)\n    {\n     int _39 = _t185 + -1;\n     int _40 = min(_39, _conv1_s1_r__z);\n     int _41 = max(_40, _input_min_3);\n     int _42 = _41 * _input_stride_3;\n     int _43 = _42 + _37;\n     int _44 = _conv1_s1_r__z + _t202;\n     for (int _conv1_s1_r__y = 0; _conv1_s1_r__y < 0 + 7; _conv1_s1_r__y++)\n     {\n      int _45 = _conv1_s1_r__y + _30;\n      int _46 = _45 * _input_stride_2;\n      int _47 = _46 + _43;\n      int _48 = _conv1_s1_r__y * _weight_1_stride_2;\n      int _49 = _48 + _44;\n      for (int _conv1_s1_r__x = 0; _conv1_s1_r__x < 0 + 7; _conv1_s1_r__x++)\n      {\n       float _50 = _conv1[_38];\n       int _51 = _conv1_s1_r__x + _32;\n       int _52 = _51 * _input_stride_1;\n       int _53 = _52 + _47;\n       float _54 = _input[_53];\n       int _55 = _conv1_s1_r__x * _weight_1_stride_1;\n       int _56 = _55 + _49;\n       float _57 = _weight_1[_56];\n       float _58 = _54 * _57;\n       float _59 = float_from_bits(1004464476 /* 0.00680272 */);\n       float _60 = _58 * _59;\n       float _61 = _50 + _60;\n       _conv1[_38] = _61;\n      } // for _conv1_s1_r__x\n     } // for _conv1_s1_r__y\n    } // for _conv1_s1_r__z\n   } // for _conv1_s1_c_rebased\n   int _62 = _conv1_s1_x_xo___block_id_x * 16;\n   int _63 = _conv1_s1_y_yo___block_id_y * 8;\n   int _64 = ___thread_id_x + _62;\n   int _65 = _64 * _output_extent_0;\n   int _66 = ___thread_id_y + _63;\n   int _67 = _66 * _t165;\n   int _68 = _t211 + _t212;\n   int _69 = _67 + _68;\n   int _70 = _65 + _69;\n   int _71 = _t207 - _t191;\n   int _72 = _71 - _t192;\n   int _73 = _72 - _t190;\n   int _74 = _73 - _weight_1_min_0;\n   int _75 = _74 + _t213;\n   int _76 = _output_min_2 + _63;\n   int _77 = _76 + ___thread_id_y;\n   int _78 = _output_min_1 + _62;\n   int _79 = _78 + ___thread_id_x;\n   for (int _conv1_s1_c_rebased = 0; _conv1_s1_c_rebased < 0 + _t203; _conv1_s1_c_rebased++)\n   {\n    int _80 = _conv1_s1_c_rebased + _70;\n    int _81 = _conv1_s1_c_rebased + _t205;\n    for (int _conv1_s1_r__z = 0; _conv1_s1_r__z < 0 + _t194; _conv1_s1_r__z++)\n    {\n     int _82 = _t185 + -1;\n     int _83 = min(_82, _conv1_s1_r__z);\n     int _84 = max(_83, _input_min_3);\n     int _85 = _84 * _input_stride_3;\n     int _86 = _85 + _81;\n     int _87 = _conv1_s1_r__z + _t202;\n     for (int _conv1_s1_r__y = 0; _conv1_s1_r__y < 0 + 7; _conv1_s1_r__y++)\n     {\n      int _88 = _conv1_s1_r__y + _77;\n      int _89 = _88 * _input_stride_2;\n      int _90 = _89 + _86;\n      int _91 = _conv1_s1_r__y * _weight_1_stride_2;\n      int _92 = _91 + _87;\n      for (int _conv1_s1_r__x = 0; _conv1_s1_r__x < 0 + 7; _conv1_s1_r__x++)\n      {\n       float _93 = _conv1[_80];\n       int _94 = _conv1_s1_r__x + _79;\n       int _95 = _94 * _input_stride_1;\n       int _96 = _95 + _90;\n       float _97 = _input[_96];\n       int _98 = _conv1_s1_r__x * _weight_1_stride_1;\n       int _99 = _98 + _92;\n       float _100 = _weight_1[_99];\n       float _101 = _97 * _100;\n       float _102 = float_from_bits(1004464476 /* 0.00680272 */);\n       float _103 = _101 * _102;\n       float _104 = _93 + _103;\n       _conv1[_80] = _104;\n      } // for _conv1_s1_r__x\n     } // for _conv1_s1_r__y\n    } // for _conv1_s1_r__z\n    int _105 = _conv1_s1_c_rebased + _70;\n    int _106 = _conv1_s1_c_rebased + _t205;\n    for (int _conv1_s1_r__z_rebased = 0; _conv1_s1_r__z_rebased < 0 + _t174; _conv1_s1_r__z_rebased++)\n    {\n     int _107 = _conv1_s1_r__z_rebased + _t194;\n     int _108 = _107 * _input_stride_3;\n     int _109 = _108 + _106;\n     int _110 = _conv1_s1_r__z_rebased + _t206;\n     for (int _conv1_s1_r__y = 0; _conv1_s1_r__y < 0 + 7; _conv1_s1_r__y++)\n     {\n      int _111 = _conv1_s1_r__y + _77;\n      int _112 = _111 * _input_stride_2;\n      int _113 = _112 + _109;\n      int _114 = _conv1_s1_r__y * _weight_1_stride_2;\n      int _115 = _114 + _110;\n      for (int _conv1_s1_r__x = 0; _conv1_s1_r__x < 0 + 7; _conv1_s1_r__x++)\n      {\n       float _116 = _conv1[_105];\n       int _117 = _conv1_s1_r__x + _79;\n       int _118 = _117 * _input_stride_1;\n       int _119 = _118 + _113;\n       float _120 = _input[_119];\n       int _121 = _conv1_s1_r__x * _weight_1_stride_1;\n       int _122 = _121 + _115;\n       float _123 = _weight_1[_122];\n       float _124 = _120 * _123;\n       float _125 = float_from_bits(1004464476 /* 0.00680272 */);\n       float _126 = _124 * _125;\n       float _127 = _116 + _126;\n       _conv1[_105] = _127;\n      } // for _conv1_s1_r__x\n     } // for _conv1_s1_r__y\n    } // for _conv1_s1_r__z_rebased\n    int _128 = _conv1_s1_c_rebased + _70;\n    int _129 = _conv1_s1_c_rebased + _t205;\n    for (int _conv1_s1_r__z_rebased = 0; _conv1_s1_r__z_rebased < 0 + _t178; _conv1_s1_r__z_rebased++)\n    {\n     int _130 = _t185 + -1;\n     int _131 = _conv1_s1_r__z_rebased + _t207;\n     int _132 = min(_130, _131);\n     int _133 = max(_132, _input_min_3);\n     int _134 = _133 * _input_stride_3;\n     int _135 = _134 + _129;\n     int _136 = _conv1_s1_r__z_rebased + _75;\n     for (int _conv1_s1_r__y = 0; _conv1_s1_r__y < 0 + 7; _conv1_s1_r__y++)\n     {\n      int _137 = _conv1_s1_r__y + _77;\n      int _138 = _137 * _input_stride_2;\n      int _139 = _138 + _135;\n      int _140 = _conv1_s1_r__y * _weight_1_stride_2;\n      int _141 = _140 + _136;\n      for (int _conv1_s1_r__x = 0; _conv1_s1_r__x < 0 + 7; _conv1_s1_r__x++)\n      {\n       float _142 = _conv1[_128];\n       int _143 = _conv1_s1_r__x + _79;\n       int _144 = _143 * _input_stride_1;\n       int _145 = _144 + _139;\n       float _146 = _input[_145];\n       int _147 = _conv1_s1_r__x * _weight_1_stride_1;\n       int _148 = _147 + _141;\n       float _149 = _weight_1[_148];\n       float _150 = _146 * _149;\n       float _151 = float_from_bits(1004464476 /* 0.00680272 */);\n       float _152 = _150 * _151;\n       float _153 = _142 + _152;\n       _conv1[_128] = _153;\n      } // for _conv1_s1_r__x\n     } // for _conv1_s1_r__y\n    } // for _conv1_s1_r__z_rebased\n   } // for _conv1_s1_c_rebased\n   int _154 = _conv1_s1_x_xo___block_id_x * 16;\n   int _155 = _conv1_s1_y_yo___block_id_y * 8;\n   int _156 = ___thread_id_x + _154;\n   int _157 = _156 * _output_extent_0;\n   int _158 = ___thread_id_y + _155;\n   int _159 = _158 * _t165;\n   int _160 = _159 + _t210;\n   int _161 = _157 + _160;\n   int _162 = _output_min_2 + _155;\n   int _163 = _162 + ___thread_id_y;\n   int _164 = _output_min_1 + _154;\n   int _165 = _164 + ___thread_id_x;\n   for (int _conv1_s1_c_rebased = 0; _conv1_s1_c_rebased < 0 + _t209; _conv1_s1_c_rebased++)\n   {\n    int _166 = _t182 + -1;\n    int _167 = _conv1_s1_c_rebased + _t162;\n    int _168 = min(_166, _167);\n    int _169 = max(_168, _input_min_0);\n    int _170 = _169 - _t167;\n    int _171 = _conv1_s1_c_rebased + _161;\n    for (int _conv1_s1_r__z = 0; _conv1_s1_r__z < 0 + 3; _conv1_s1_r__z++)\n    {\n     int _172 = _t185 + -1;\n     int _173 = min(_172, _conv1_s1_r__z);\n     int _174 = max(_173, _input_min_3);\n     int _175 = _174 * _input_stride_3;\n     int _176 = _175 + _170;\n     int _177 = _conv1_s1_r__z + _t202;\n     for (int _conv1_s1_r__y = 0; _conv1_s1_r__y < 0 + 7; _conv1_s1_r__y++)\n     {\n      int _178 = _conv1_s1_r__y + _163;\n      int _179 = _178 * _input_stride_2;\n      int _180 = _179 + _176;\n      int _181 = _conv1_s1_r__y * _weight_1_stride_2;\n      int _182 = _181 + _177;\n      for (int _conv1_s1_r__x = 0; _conv1_s1_r__x < 0 + 7; _conv1_s1_r__x++)\n      {\n       float _183 = _conv1[_171];\n       int _184 = _conv1_s1_r__x + _165;\n       int _185 = _184 * _input_stride_1;\n       int _186 = _185 + _180;\n       float _187 = _input[_186];\n       int _188 = _conv1_s1_r__x * _weight_1_stride_1;\n       int _189 = _188 + _182;\n       float _190 = _weight_1[_189];\n       float _191 = _187 * _190;\n       float _192 = float_from_bits(1004464476 /* 0.00680272 */);\n       float _193 = _191 * _192;\n       float _194 = _183 + _193;\n       _conv1[_171] = _194;\n      } // for _conv1_s1_r__x\n     } // for _conv1_s1_r__y\n    } // for _conv1_s1_r__z\n   } // for _conv1_s1_c_rebased\n  } // if _20\n  else\n  {\n   int _195 = _conv1_s1_x_xo___block_id_x * 16;\n   int _196 = _conv1_s1_y_yo___block_id_y * 8;\n   int _197 = ___thread_id_x + _195;\n   int _198 = _197 * _output_extent_0;\n   int _199 = ___thread_id_y + _196;\n   int _200 = _199 * _t165;\n   int _201 = _200 + _t211;\n   int _202 = _198 + _201;\n   int _203 = _output_min_2 + _196;\n   int _204 = _203 + ___thread_id_y;\n   int _205 = _output_min_1 + _195;\n   int _206 = _205 + ___thread_id_x;\n   for (int _conv1_s1_c_rebased = 0; _conv1_s1_c_rebased < 0 + _output_extent_0; _conv1_s1_c_rebased++)\n   {\n    int _207 = _t182 + -1;\n    int _208 = _conv1_s1_c_rebased + _output_min_0;\n    int _209 = min(_207, _208);\n    int _210 = max(_209, _input_min_0);\n    int _211 = _210 - _t167;\n    int _212 = _conv1_s1_c_rebased + _202;\n    for (int _conv1_s1_r__z = 0; _conv1_s1_r__z < 0 + 3; _conv1_s1_r__z++)\n    {\n     int _213 = _t185 + -1;\n     int _214 = min(_213, _conv1_s1_r__z);\n     int _215 = max(_214, _input_min_3);\n     int _216 = _215 * _input_stride_3;\n     int _217 = _216 + _211;\n     int _218 = _conv1_s1_r__z + _t202;\n     for (int _conv1_s1_r__y = 0; _conv1_s1_r__y < 0 + 7; _conv1_s1_r__y++)\n     {\n      int _219 = _conv1_s1_r__y + _204;\n      int _220 = _219 * _input_stride_2;\n      int _221 = _220 + _217;\n      int _222 = _conv1_s1_r__y * _weight_1_stride_2;\n      int _223 = _222 + _218;\n      for (int _conv1_s1_r__x = 0; _conv1_s1_r__x < 0 + 7; _conv1_s1_r__x++)\n      {\n       float _224 = _conv1[_212];\n       int _225 = _conv1_s1_r__x + _206;\n       int _226 = _t183 + -1;\n       int _227 = min(_225, _226);\n       int _228 = max(_227, _input_min_1);\n       int _229 = _228 * _input_stride_1;\n       int _230 = _229 + _221;\n       float _231 = _input[_230];\n       int _232 = _conv1_s1_r__x * _weight_1_stride_1;\n       int _233 = _232 + _223;\n       float _234 = _weight_1[_233];\n       float _235 = _231 * _234;\n       float _236 = float_from_bits(1004464476 /* 0.00680272 */);\n       float _237 = _235 * _236;\n       float _238 = _224 + _237;\n       _conv1[_212] = _238;\n      } // for _conv1_s1_r__x\n     } // for _conv1_s1_r__y\n    } // for _conv1_s1_r__z\n   } // for _conv1_s1_c_rebased\n  } // if _20 else\n } // if _17\n else\n {\n  int _239 = _conv1_s1_x_xo___block_id_x * 16;\n  int _240 = _conv1_s1_y_yo___block_id_y * 8;\n  int _241 = ___thread_id_x + _239;\n  int _242 = _241 * _output_extent_0;\n  int _243 = ___thread_id_y + _240;\n  int _244 = _243 * _t165;\n  int _245 = _244 + _t211;\n  int _246 = _242 + _245;\n  int _247 = _output_min_2 + _240;\n  int _248 = _247 + ___thread_id_y;\n  int _249 = _output_min_1 + _239;\n  int _250 = _249 + ___thread_id_x;\n  for (int _conv1_s1_c_rebased = 0; _conv1_s1_c_rebased < 0 + _output_extent_0; _conv1_s1_c_rebased++)\n  {\n   int _251 = _t182 + -1;\n   int _252 = _conv1_s1_c_rebased + _output_min_0;\n   int _253 = min(_251, _252);\n   int _254 = max(_253, _input_min_0);\n   int _255 = _254 - _t167;\n   int _256 = _conv1_s1_c_rebased + _246;\n   for (int _conv1_s1_r__z = 0; _conv1_s1_r__z < 0 + 3; _conv1_s1_r__z++)\n   {\n    int _257 = _t185 + -1;\n    int _258 = min(_257, _conv1_s1_r__z);\n    int _259 = max(_258, _input_min_3);\n    int _260 = _259 * _input_stride_3;\n    int _261 = _260 + _255;\n    int _262 = _conv1_s1_r__z + _t202;\n    for (int _conv1_s1_r__y = 0; _conv1_s1_r__y < 0 + 7; _conv1_s1_r__y++)\n    {\n     int _263 = _conv1_s1_r__y + _248;\n     int _264 = _t184 + -1;\n     int _265 = min(_263, _264);\n     int _266 = max(_265, _input_min_2);\n     int _267 = _266 * _input_stride_2;\n     int _268 = _267 + _261;\n     int _269 = _conv1_s1_r__y * _weight_1_stride_2;\n     int _270 = _269 + _262;\n     for (int _conv1_s1_r__x = 0; _conv1_s1_r__x < 0 + 7; _conv1_s1_r__x++)\n     {\n      float _271 = _conv1[_256];\n      int _272 = _conv1_s1_r__x + _250;\n      int _273 = _t183 + -1;\n      int _274 = min(_272, _273);\n      int _275 = max(_274, _input_min_1);\n      int _276 = _275 * _input_stride_1;\n      int _277 = _276 + _268;\n      float _278 = _input[_277];\n      int _279 = _conv1_s1_r__x * _weight_1_stride_1;\n      int _280 = _279 + _270;\n      float _281 = _weight_1[_280];\n      float _282 = _278 * _281;\n      float _283 = float_from_bits(1004464476 /* 0.00680272 */);\n      float _284 = _282 * _283;\n      float _285 = _271 + _284;\n      _conv1[_256] = _285;\n     } // for _conv1_s1_r__x\n    } // for _conv1_s1_r__y\n   } // for _conv1_s1_r__z\n  } // for _conv1_s1_c_rebased\n } // if _17 else\n} // kernel _kernel_conv1_s1_y_yo___block_id_y\n#undef __address_space__weight_1\n#undef __address_space__input\n#undef __address_space__conv1\n// Address spaces for _kernel_conv2_s0_y_yo___block_id_y\n#define __address_space__bias __global\n#define __address_space__conv2 __global\n__kernel void _kernel_conv2_s0_y_yo___block_id_y(\n __address_space__bias const float *restrict _bias,\n __address_space__conv2 float *restrict _conv2,\n const int _output_extent_0,\n const int _output_extent_1,\n const int _output_extent_2,\n const int _t285,\n const int _t286,\n const int _t287,\n __local int16* __shared)\n{\n int _conv2_s0_y_yo___block_id_y = get_group_id(1);\n int _conv2_s0_x_xo___block_id_x = get_group_id(0);\n int ___thread_id_y = get_local_id(1);\n int ___thread_id_x = get_local_id(0);\n int _286 = _conv2_s0_y_yo___block_id_y * 8;\n int _287 = _output_extent_2 + -8;\n int _288 = min(_286, _287);\n int _289 = _conv2_s0_x_xo___block_id_x * 16;\n int _290 = _output_extent_1 + -16;\n int _291 = min(_289, _290);\n int _292 = ___thread_id_x + _291;\n int _293 = _292 * _output_extent_0;\n int _294 = ___thread_id_y + _288;\n int _295 = _294 * _t285;\n int _296 = _295 + _t287;\n int _297 = _293 + _296;\n for (int _conv2_s0_c_rebased = 0; _conv2_s0_c_rebased < 0 + _output_extent_0; _conv2_s0_c_rebased++)\n {\n  float _298 = _bias[_t286];\n  int _299 = _conv2_s0_c_rebased + _297;\n  _conv2[_299] = _298;\n } // for _conv2_s0_c_rebased\n} // kernel _kernel_conv2_s0_y_yo___block_id_y\n#undef __address_space__bias\n#undef __address_space__conv2\n// Address spaces for _kernel_conv2_s1_y_yo___block_id_y\n#define __address_space__conv1 __global\n#define __address_space__conv2 __global\n#define __address_space__weight_2 __global\n__kernel void _kernel_conv2_s1_y_yo___block_id_y(\n __address_space__conv1 const float *restrict _conv1,\n __address_space__conv2 float *restrict _conv2,\n __address_space__weight_2 const float *restrict _weight_2,\n const int _conv1_stride_3,\n const int _output_extent_0,\n const int _t291,\n const int _t292,\n const int _t295,\n const int _t296,\n const int _weight_2_stride_1,\n const int _weight_2_stride_2,\n __local int16* __shared)\n{\n int _conv2_s1_y_yo___block_id_y = get_group_id(1);\n int _conv2_s1_x_xo___block_id_x = get_group_id(0);\n int ___thread_id_y = get_local_id(1);\n int ___thread_id_x = get_local_id(0);\n int _300 = _conv2_s1_x_xo___block_id_x * 16;\n int _301 = _300 + ___thread_id_x;\n int _302 = _conv2_s1_y_yo___block_id_y * 8;\n int _303 = _302 + ___thread_id_y;\n int _304 = _output_extent_0 * _301;\n int _305 = _t291 * _303;\n int _306 = _305 + _t295;\n int _307 = _304 + _306;\n for (int _conv2_s1_c_rebased = 0; _conv2_s1_c_rebased < 0 + _output_extent_0; _conv2_s1_c_rebased++)\n {\n  int _308 = _conv2_s1_c_rebased + _307;\n  for (int _conv2_s1_R__z = 0; _conv2_s1_R__z < 0 + 64; _conv2_s1_R__z++)\n  {\n   int _309 = _conv1_stride_3 * _conv2_s1_R__z;\n   int _310 = _309 + _conv2_s1_c_rebased;\n   int _311 = _conv2_s1_R__z + _t296;\n   for (int _conv2_s1_R__y = 0; _conv2_s1_R__y < 0 + 3; _conv2_s1_R__y++)\n   {\n    int _312 = _conv2_s1_R__y + _303;\n    int _313 = _312 * _t292;\n    int _314 = _313 + _310;\n    int _315 = _conv2_s1_R__y * _weight_2_stride_2;\n    int _316 = _315 + _311;\n    for (int _conv2_s1_R__x = 0; _conv2_s1_R__x < 0 + 3; _conv2_s1_R__x++)\n    {\n     float _317 = _conv2[_308];\n     int _318 = _conv2_s1_R__x + _301;\n     int _319 = _318 * _output_extent_0;\n     int _320 = _319 + _314;\n     float _321 = _conv1[_320];\n     int _322 = _conv2_s1_R__x * _weight_2_stride_1;\n     int _323 = _322 + _316;\n     float _324 = _weight_2[_323];\n     float _325 = _321 * _324;\n     float _326 = float_from_bits(967257861 /* 0.000318878 */);\n     float _327 = _325 * _326;\n     float _328 = _317 + _327;\n     _conv2[_308] = _328;\n    } // for _conv2_s1_R__x\n   } // for _conv2_s1_R__y\n  } // for _conv2_s1_R__z\n } // for _conv2_s1_c_rebased\n} // kernel _kernel_conv2_s1_y_yo___block_id_y\n#undef __address_space__conv1\n#undef __address_space__conv2\n#undef __address_space__weight_2\n// Address spaces for _kernel_output_s0_y_yo___block_id_y\n#define __address_space__conv2 __global\n#define __address_space__output __global\n__kernel void _kernel_output_s0_y_yo___block_id_y(\n __address_space__conv2 const float *restrict _conv2,\n __address_space__output float *restrict _output,\n const int _output_extent_0,\n const int _output_extent_1,\n const int _output_extent_2,\n const int _output_min_1,\n const int _output_min_2,\n const int _output_stride_1,\n const int _output_stride_2,\n const int _t309,\n const int _t311,\n const int _t312,\n __local int16* __shared)\n{\n int _output_s0_y_yo___block_id_y = get_group_id(1);\n int _output_s0_x_xo___block_id_x = get_group_id(0);\n int ___thread_id_y = get_local_id(1);\n int ___thread_id_x = get_local_id(0);\n int _329 = _output_s0_y_yo___block_id_y * 8;\n int _330 = _output_extent_2 + -8;\n int _331 = min(_329, _330);\n int _332 = _output_s0_x_xo___block_id_x * 16;\n int _333 = _output_extent_1 + -16;\n int _334 = min(_332, _333);\n int _335 = _output_min_1 + _334;\n int _336 = _335 + ___thread_id_x;\n int _337 = _336 * _output_stride_1;\n int _338 = _output_min_2 + _331;\n int _339 = _338 + ___thread_id_y;\n int _340 = _339 * _output_stride_2;\n int _341 = _340 + _t312;\n int _342 = _337 + _341;\n int _343 = ___thread_id_x + _334;\n int _344 = _343 * _output_extent_0;\n int _345 = ___thread_id_y + _331;\n int _346 = _345 * _t309;\n int _347 = _346 + _t311;\n int _348 = _344 + _347;\n for (int _output_s0_c_rebased = 0; _output_s0_c_rebased < 0 + _output_extent_0; _output_s0_c_rebased++)\n {\n  int _349 = _output_s0_c_rebased + _348;\n  float _350 = _conv2[_349];\n  float _351 = float_from_bits(0 /* 0 */);\n  float _352 = max(_350, _351);\n  int _353 = _output_s0_c_rebased + _342;\n  _output[_353] = _352;\n } // for _output_s0_c_rebased\n} // kernel _kernel_output_s0_y_yo___block_id_y\n#undef __address_space__conv2\n#undef __address_space__output\n"
	.size	.Lopencl_gpu_source_kernels.data, 23235

	.type	.L__unnamed_1,@object           # @0
	.p2align	4
.L__unnamed_1:
	.zero	64
	.size	.L__unnamed_1, 64

	.type	.Lstr,@object                   # @str
	.p2align	5
.Lstr:
	.asciz	"input"
	.size	.Lstr, 6

	.type	.L__unnamed_2,@object           # @1
	.p2align	3
.L__unnamed_2:
	.zero	16
	.size	.L__unnamed_2, 16

	.type	.Lstr.267,@object               # @str.267
	.p2align	5
.Lstr.267:
	.asciz	"bias"
	.size	.Lstr.267, 5

	.type	.L__unnamed_3,@object           # @2
	.p2align	4
.L__unnamed_3:
	.zero	64
	.size	.L__unnamed_3, 64

	.type	.Lstr.268,@object               # @str.268
	.p2align	5
.Lstr.268:
	.asciz	"weight_1"
	.size	.Lstr.268, 9

	.type	.L__unnamed_4,@object           # @3
	.p2align	4
.L__unnamed_4:
	.zero	64
	.size	.L__unnamed_4, 64

	.type	.Lstr.269,@object               # @str.269
	.p2align	5
.Lstr.269:
	.asciz	"weight_2"
	.size	.Lstr.269, 9

	.type	.L__unnamed_5,@object           # @4
	.p2align	4
.L__unnamed_5:
	.zero	64
	.size	.L__unnamed_5, 64

	.type	.Lstr.270,@object               # @str.270
	.p2align	5
.Lstr.270:
	.asciz	"output"
	.size	.Lstr.270, 7

	.type	.L__unnamed_6,@object           # @5
	.section	.data.rel.ro,"aw",@progbits
	.p2align	4
.L__unnamed_6:
	.quad	.Lstr
	.long	1                               # 0x1
	.long	4                               # 0x4
	.byte	2                               # 0x2
	.byte	32                              # 0x20
	.short	1                               # 0x1
	.zero	4
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	.L__unnamed_1
	.quad	.Lstr.267
	.long	1                               # 0x1
	.long	1                               # 0x1
	.byte	2                               # 0x2
	.byte	32                              # 0x20
	.short	1                               # 0x1
	.zero	4
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	.L__unnamed_2
	.quad	.Lstr.268
	.long	1                               # 0x1
	.long	4                               # 0x4
	.byte	2                               # 0x2
	.byte	32                              # 0x20
	.short	1                               # 0x1
	.zero	4
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	.L__unnamed_3
	.quad	.Lstr.269
	.long	1                               # 0x1
	.long	4                               # 0x4
	.byte	2                               # 0x2
	.byte	32                              # 0x20
	.short	1                               # 0x1
	.zero	4
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	.L__unnamed_4
	.quad	.Lstr.270
	.long	2                               # 0x2
	.long	4                               # 0x4
	.byte	2                               # 0x2
	.byte	32                              # 0x20
	.short	1                               # 0x1
	.zero	4
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	.L__unnamed_5
	.size	.L__unnamed_6, 320

	.type	.Lstr.271,@object               # @str.271
	.section	.rodata,"a",@progbits
	.p2align	5
.Lstr.271:
	.asciz	"x86-64-linux-avx-avx2-f16c-fma-opencl-sse41"
	.size	.Lstr.271, 44

	.type	.Lstr.272,@object               # @str.272
	.p2align	5
.Lstr.272:
	.asciz	"simple_ex"
	.size	.Lstr.272, 10

	.type	.Lsimple_ex_metadata_storage,@object # @simple_ex_metadata_storage
	.section	.data.rel.ro,"aw",@progbits
	.p2align	4
.Lsimple_ex_metadata_storage:
	.long	1                               # 0x1
	.long	5                               # 0x5
	.quad	.L__unnamed_6
	.quad	.Lstr.271
	.quad	.Lstr.272
	.size	.Lsimple_ex_metadata_storage, 32

	.type	.Lstr.273,@object               # @str.273
	.section	.rodata,"a",@progbits
	.p2align	5
.Lstr.273:
	.asciz	"Input buffer bias"
	.size	.Lstr.273, 18

	.type	.Lstr.274,@object               # @str.274
	.p2align	5
.Lstr.274:
	.asciz	"Input buffer input"
	.size	.Lstr.274, 19

	.type	.Lstr.275,@object               # @str.275
	.p2align	5
.Lstr.275:
	.asciz	"Output buffer output"
	.size	.Lstr.275, 21

	.type	.Lstr.276,@object               # @str.276
	.p2align	5
.Lstr.276:
	.asciz	"Input buffer weight_1"
	.size	.Lstr.276, 22

	.type	.Lstr.277,@object               # @str.277
	.p2align	5
.Lstr.277:
	.asciz	"Input buffer weight_2"
	.size	.Lstr.277, 22

	.type	.Lstr.278,@object               # @str.278
	.p2align	5
.Lstr.278:
	.asciz	"bias.stride.0"
	.size	.Lstr.278, 14

	.type	.Lstr.279,@object               # @str.279
	.p2align	5
.Lstr.279:
	.asciz	"1"
	.size	.Lstr.279, 2

	.type	.Lstr.280,@object               # @str.280
	.p2align	5
.Lstr.280:
	.asciz	"input.stride.0"
	.size	.Lstr.280, 15

	.type	.Lstr.281,@object               # @str.281
	.p2align	5
.Lstr.281:
	.asciz	"output.stride.0"
	.size	.Lstr.281, 16

	.type	.Lstr.282,@object               # @str.282
	.p2align	5
.Lstr.282:
	.asciz	"weight_1.stride.0"
	.size	.Lstr.282, 18

	.type	.Lstr.283,@object               # @str.283
	.p2align	5
.Lstr.283:
	.asciz	"weight_2.stride.0"
	.size	.Lstr.283, 18

	.type	.Lstr.284,@object               # @str.284
	.p2align	5
.Lstr.284:
	.asciz	"_kernel_conv1_s0_y_yo___block_id_y"
	.size	.Lstr.284, 35

	.type	.Lstr.285,@object               # @str.285
	.p2align	5
.Lstr.285:
	.asciz	"_kernel_conv1_s1_y_yo___block_id_y"
	.size	.Lstr.285, 35

	.type	.Lstr.286,@object               # @str.286
	.p2align	5
.Lstr.286:
	.asciz	"_kernel_conv2_s0_y_yo___block_id_y"
	.size	.Lstr.286, 35

	.type	.Lstr.287,@object               # @str.287
	.p2align	5
.Lstr.287:
	.asciz	"_kernel_conv2_s1_y_yo___block_id_y"
	.size	.Lstr.287, 35

	.type	.Lstr.288,@object               # @str.288
	.p2align	5
.Lstr.288:
	.asciz	"_kernel_output_s0_y_yo___block_id_y"
	.size	.Lstr.288, 36

	.type	.Lreltable.halide_type_to_string,@object # @reltable.halide_type_to_string
	.p2align	2
.Lreltable.halide_type_to_string:
	.long	.L.str.14.76-.Lreltable.halide_type_to_string
	.long	.L.str.15.75-.Lreltable.halide_type_to_string
	.long	.L.str.16.74-.Lreltable.halide_type_to_string
	.long	.L.str.17.73-.Lreltable.halide_type_to_string
	.size	.Lreltable.halide_type_to_string, 16

	.type	.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi,@object # @reltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.p2align	2
.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi:
	.long	.L.str.241-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.240-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.239-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.238-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.237-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.236-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.235-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.234-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.233-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.232-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.231-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.230-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.229-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.228-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.227-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.226-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.225-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.224-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.223-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.222-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.221-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.220-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.219-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.218-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.217-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.216-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.215-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.214-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.213-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.212-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.211-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.210-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.209-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.208-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.207-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.206-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.205-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.204-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.203-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.242-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.242-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.242-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.242-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.242-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.242-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.242-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.242-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.242-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.242-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.202-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.201-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.200-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.199-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.198-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.197.201-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.196-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.195-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.194-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.193-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.192-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.191-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.190-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.189-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.188-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.187-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.186.202-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.185-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.184-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.long	.L.str.183-.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi
	.size	.Lreltable._ZN6Halide7Runtime8Internal6OpenCL21get_opencl_error_nameEi, 276

	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.ident	"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"
	.section	".note.GNU-stack","",@progbits
